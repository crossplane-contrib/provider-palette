name: spectrocloud/spectrocloud
resources:
    spectrocloud_addon_deployment Resource - terraform-provider-spectrocloud:
        subCategory: ""
        name: spectrocloud_addon_deployment Resource - terraform-provider-spectrocloud
        title: spectrocloud_addon_deployment Resource - terraform-provider-spectrocloud
        argumentDocs:
            apply_setting: (String) The setting to apply the cluster profile. DownloadAndInstall will download and install packs in one action. DownloadAndInstallLater will only download artifact and postpone install for later. Default value is DownloadAndInstall.
            cluster_profile: (Block List) (see below for nested schema)
            cluster_uid: (String)
            content: (String) The content of the manifest. The content is the YAML content of the manifest.
            context: (String) Specifies cluster context where addon profile is attached. Allowed values are project or tenant. Defaults to project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            create: (String)
            delete: (String)
            id: (String) The ID of this resource.
            manifest: (Block List) (see below for nested schema)
            name: (String) The name of the pack. The name must be unique within the cluster profile.
            pack: (Block List) For packs of type spectro, helm, and manifest, at least one pack must be specified. (see below for nested schema)
            registry_uid: (String) The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name.
            tag: (String) The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is spectro or helm.
            timeouts: (Block, Optional) (see below for nested schema)
            type: (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
            uid: (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry.
            update: (String)
            values: (String) The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
            variables: '(Map of String) A map of cluster profile variables, specified as key-value pairs. For example: priority = "5".'
        importStatements: []
    spectrocloud_alert:
        subCategory: ""
        name: spectrocloud_alert
        title: spectrocloud_alert Resource - terraform-provider-spectrocloud
        examples:
            - name: alert_email
              manifest: |-
                {
                  "alert_all_users": true,
                  "component": "ClusterHealth",
                  "identifiers": [
                    "abc@spectrocloud.com",
                    "cba@spectrocloud.com"
                  ],
                  "is_active": true,
                  "project": "Default",
                  "type": "email"
                }
            - name: alert_http
              manifest: |-
                {
                  "alert_all_users": true,
                  "component": "ClusterHealth",
                  "http": [
                    {
                      "body": "{ \"text\": \"message\" }",
                      "headers": {
                        "source": "spectrocloud",
                        "tag": "Health"
                      },
                      "method": "POST",
                      "url": "https://openhook.com/put/notify"
                    }
                  ],
                  "is_active": true,
                  "project": "Default",
                  "type": "http"
                }
        argumentDocs:
            alert_all_users: (Boolean) If set to true, the alert will be sent to all users. If false, it will target specific users or identifiers.
            body: (String) The payload to include in the HTTP request body when the alert is triggered.
            component: (String) The component of the system that the alert is associated with. Currently, ClusterHealth is the only supported value.
            create: (String)
            created_by: (String) The user who created the alert.
            delete: (String)
            headers: (Map of String) Optional HTTP headers to include in the request. Each header should be specified as a key-value pair.
            http: (Block List) The configuration block for HTTP-based alerts. This is used when the type is set to http. (see below for nested schema)
            id: (String) The ID of this resource.
            identifiers: (Set of String) A set of unique identifiers to which the alert will be sent. This is used to target specific users or groups.
            is_active: (Boolean) Indicates whether the alert is active. Set to true to activate the alert, or false to deactivate it.
            is_succeeded: (Boolean)
            message: (String)
            method: (String) The HTTP method to use for the alert. Supported values are POST, GET, and PUT.
            project: (String) The project to which the alert belongs to.
            status: (Block List) A status block representing the internal status of the alert. This is primarily for internal use and not utilized directly. (see below for nested schema)
            time: (String)
            timeouts: (Block, Optional) (see below for nested schema)
            type: (String) The type of alert mechanism to use. Can be either email for email alerts or http for sending HTTP requests.
            update: (String)
            url: (String) The target URL to send the HTTP request to when the alert is triggered.
        importStatements: []
    spectrocloud_appliance:
        subCategory: ""
        description: A resource for creating and managing appliances for Edge Native cluster provisioning.
        name: spectrocloud_appliance
        title: spectrocloud_appliance Resource - terraform-provider-spectrocloud
        examples:
            - name: appliance
              manifest: |-
                {
                  "tags": {
                    "name": "appliance_name"
                  },
                  "uid": "test-dec9",
                  "wait": true
                }
        argumentDocs:
            create: (String)
            delete: (String)
            id: (String) The ID of this resource.
            pairing_key: (String) The pairing key used for appliance pairing.
            tags: (Map of String) A set of key-value pairs that can be used to organize and categorize the appliance.
            timeouts: (Block, Optional) (see below for nested schema)
            uid: (String) The unique identifier (UID) for the appliance.
            update: (String)
            wait: (Boolean) If set to true, the resource creation will wait for the appliance provisioning process to complete before returning. Defaults to false.
        importStatements: []
    spectrocloud_application:
        subCategory: ""
        name: spectrocloud_application
        title: spectrocloud_application Resource - terraform-provider-spectrocloud
        examples:
            - name: application
              manifest: |-
                {
                  "application_profile_uid": "${data.spectrocloud_application_profile.id}",
                  "config": [
                    {
                      "cluster_group_uid": "6358d799fad5aa39fa26a8c2",
                      "cluster_name": "sandbox-scorpius",
                      "limits": [
                        {
                          "cpu": 2,
                          "memory": 4096,
                          "storage": 10
                        }
                      ]
                    }
                  ],
                  "name": "app-beru-whitesun-lars"
                }
              references:
                application_profile_uid: data.spectrocloud_application_profile.id
        argumentDocs:
            application_profile_uid: (String) The unique identifier (UID) of the application profile to use for this application.
            cluster_context: (String) The context for the cluster,  Either tenant or project can be provided.
            cluster_group_uid: (String) The unique identifier (UID) of the cluster group. Either cluster_uid or cluster_group_uid can be provided.
            cluster_name: (String) An optional name for the target cluster.
            cluster_uid: (String) The unique identifier (UID) of the target cluster. Either cluster_uid or cluster_group_uid can be provided.
            config: '(Block List, Max: 1) The configuration block for specifying cluster and resource limits for the application. (see below for nested schema)'
            cpu: (Number) The CPU allocation for the application, specified in integer values.
            create: (String)
            delete: (String)
            id: (String) The ID of this resource.
            limits: (Block List) Optional resource limits for the application, including CPU, memory, and storage constraints. (see below for nested schema)
            memory: (Number) The memory allocation for the application, specified in megabytes.
            name: (String) The name of the application being created.
            storage: (Number) The storage allocation for the application, specified in gigabytes.
            tags: (Set of String) A set of tags to associate with the application for easier identification and categorization.
            timeouts: (Block, Optional) (see below for nested schema)
            update: (String)
        importStatements: []
    spectrocloud_application_profile:
        subCategory: ""
        description: Provisions an Application Profile. App Profiles are templates created with preconfigured services. You can create as many profiles as required, with multiple tiers serving different functionalities per use case.
        name: spectrocloud_application_profile
        title: spectrocloud_application_profile Resource - terraform-provider-spectrocloud
        examples:
            - name: hello-universe-ui
              manifest: |-
                {
                  "description": "Hello Universe as a single UI instance",
                  "name": "hello-universe",
                  "pack": [
                    {
                      "name": "hello-universe-ui",
                      "registry_uid": "${data.spectrocloud_registry.container_registry.id}",
                      "source_app_tier": "${data.spectrocloud_pack_simple.container_pack.id}",
                      "type": "${data.spectrocloud_pack_simple.container_pack.type}",
                      "values": "containerService:\n    serviceName: \"hello-universe-ui-test\"\n    registryUrl: \"\"\n    image: ${var.single-container-image}\n    access: public\n    ports:\n      - \"8080\"\n    serviceType: LoadBalancer\n"
                    }
                  ],
                  "tags": [
                    "scenario-1"
                  ]
                }
              references:
                pack.registry_uid: data.spectrocloud_registry.container_registry.id
                pack.source_app_tier: data.spectrocloud_pack_simple.container_pack.id
                pack.type: data.spectrocloud_pack_simple.container_pack.type
            - name: my-app-profile
              manifest: |-
                {
                  "context": "project",
                  "description": "A profile for a simple application",
                  "name": "my-app-profile",
                  "pack": [
                    {
                      "name": "${data.spectrocloud_pack.marvel-app.name}",
                      "registry_uid": "${data.spectrocloud_registry_helm.helm.id}",
                      "source_app_tier": "${data.spectrocloud_pack.marvel-app.id}",
                      "type": "helm"
                    }
                  ],
                  "tags": [
                    "name:marvel-app",
                    "terraform_managed:true",
                    "env:dev"
                  ]
                }
              references:
                pack.name: data.spectrocloud_pack.marvel-app.name
                pack.registry_uid: data.spectrocloud_registry_helm.helm.id
                pack.source_app_tier: data.spectrocloud_pack.marvel-app.id
            - name: app_profile_all_tiers
              manifest: |-
                {
                  "cloud": "all",
                  "context": "project",
                  "description": "test",
                  "name": "profile-all-tiers-test",
                  "pack": [
                    {
                      "name": "container-tier",
                      "registry_uid": "${data.spectrocloud_registry.container_registry.id}",
                      "source_app_tier": "${data.spectrocloud_pack_simple.container_pack.id}",
                      "type": "${data.spectrocloud_pack_simple.container_pack.type}",
                      "values": "containerService:\n    serviceName: \"spectro-system-appdeployment-tiername-svc\"\n    registryUrl: \"\"\n    image: alphine\n    access: public\n    ports:\n      - \"8080\"\n    serviceType: LoadBalancer\n    args:\n      - $TEST\n    command:\n      - sh\n      - ./start.sh\n    env:\n      - name: TEST\n        value: \"true\"\n    volumeName: TestVolume\n    volumeSize: 10\n    pathToMount: /pack/\n"
                    },
                    {
                      "manifest": [
                        {
                          "content": "annotations:\n  category: Infrastructure\napiVersion: v2\nappVersion: 3.3.1\ndependencies:\n  - condition: zookeeper.enabled\n    name: zookeeper\n    repository: https://charts.bitnami.com/bitnami\n    version: 11.x.x\n  - name: common\n    repository: https://charts.bitnami.com/bitnami\n    tags:\n      - bitnami-common\n    version: 2.x.x\ndescription: Apache Kafka is a distributed streaming platform designed to build real-time pipelines and can be used as a message broker or as a replacement for a log aggregation solution for big data applications.\nengine: gotpl\nhome: https://github.com/bitnami/charts/tree/main/bitnami/kafka\nicon: https://bitnami.com/assets/stacks/kafka/img/kafka-stack-220x234.png\nkeywords:\n  - kafka\n  - zookeeper\n  - streaming\n  - producer\n  - consumer\nmaintainers:\n  - name: Bitnami\n    url: https://github.com/bitnami/charts\nname: kafka\nsources:\n  - https://github.com/bitnami/containers/tree/main/bitnami/kafka\n  - https://kafka.apache.org/\nversion: 20.0.0\n",
                          "name": "kafka"
                        }
                      ],
                      "name": "kafka-tier",
                      "registry_uid": "${data.spectrocloud_registry.Bitnami_registry.id}",
                      "source_app_tier": "${data.spectrocloud_pack_simple.kafka_pack.id}",
                      "type": "${data.spectrocloud_pack_simple.kafka_pack.type}"
                    },
                    {
                      "install_order": 0,
                      "manifest": [
                        {
                          "content": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n        - name: nginx\n          image: nginx:1.14.2\n          ports:\n            - containerPort: 80\n",
                          "name": "test-manifest-3"
                        }
                      ],
                      "name": "manifest-3",
                      "type": "manifest"
                    },
                    {
                      "name": "minio-operator-stage",
                      "properties": {
                        "minioUserPassword": "${base64encode(\"test123!wewe!\")}",
                        "minioUsername": "miniostaging",
                        "volumeSize": "10"
                      },
                      "source_app_tier": "${data.spectrocloud_pack_simple.minio_pack.id}",
                      "type": "${data.spectrocloud_pack_simple.minio_pack.type}"
                    },
                    {
                      "name": "mysql-3-stage",
                      "properties": {
                        "dbRootPassword": "${base64encode(\"test123!wewe!\")}",
                        "dbVolumeSize": "20",
                        "version": "5.7"
                      },
                      "source_app_tier": "${data.spectrocloud_pack_simple.mysql_pack.id}",
                      "type": "${data.spectrocloud_pack_simple.mysql_pack.type}"
                    },
                    {
                      "name": "redis-4-stage",
                      "properties": {
                        "databaseName": "redsitstaging",
                        "databaseVolumeSize": "10"
                      },
                      "source_app_tier": "${data.spectrocloud_pack_simple.redis_pack.id}",
                      "type": "${data.spectrocloud_pack_simple.redis_pack.type}"
                    }
                  ],
                  "tags": [
                    "sivaa",
                    "terraform"
                  ],
                  "version": "1.0.0"
                }
              references:
                pack.registry_uid: data.spectrocloud_registry.Bitnami_registry.id
                pack.source_app_tier: data.spectrocloud_pack_simple.redis_pack.id
                pack.type: data.spectrocloud_pack_simple.redis_pack.type
        argumentDocs:
            cloud: (String) The cloud provider the profile is eligible for. Default value is all.
            content: (String) The content of the manifest.
            context: (String) Context of the profile. Allowed values are project, cluster, or namespace. Default value is project.If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            create: (String)
            delete: (String)
            description: (String) Description of the profile.
            id: (String) The ID of this resource.
            install_order: (Number) The installation priority order of the app profile. The order of priority goes from lowest number to highest number. For example, a value of -3 would be installed before an app profile with a higher number value. No upper and lower limits exist, and you may specify positive and negative integers. The default value is 0.
            manifest: (Block List) The manifest of the pack. (see below for nested schema)
            name: (String) Name of the application profile
            pack: '(Block List, Min: 1) A list of packs to be applied to the application profile. (see below for nested schema)'
            properties: '(Map of String) The various properties required by different database tiers eg: databaseName and databaseVolumeSize size for Redis etc.'
            registry_uid: (String) The unique id of the registry to be used for the pack.
            source_app_tier: (String) The unique id of the pack to be used as the source for the pack.
            tag: (String) The identifier or version to label the pack.
            tags: (Set of String) A list of tags to be applied to the application profile. Tags must be in the form of key:value.
            timeouts: (Block, Optional) (see below for nested schema)
            type: (String) The type of Pack. Allowed values are container, helm, manifest, or operator-instance.
            uid: (String) The unique id of the pack. This is a computed field and is not required to be set.
            update: (String)
            values: (String) The values to be used for the pack. This is a stringified JSON object.
            version: (String) Version of the profile. Default value is 1.0.0.
        importStatements: []
    spectrocloud_backup_storage_location:
        subCategory: ""
        name: spectrocloud_backup_storage_location
        title: spectrocloud_backup_storage_location Resource - terraform-provider-spectrocloud
        examples:
            - name: bsl1
              manifest: |-
                {
                  "bucket_name": "dev-backup",
                  "context": "tenant",
                  "is_default": false,
                  "name": "dev-backup-s3",
                  "region": "us-east-2",
                  "s3": [
                    {
                      "access_key": "${var.aws_access_key}",
                      "credential_type": "${var.credential_type}",
                      "s3_force_path_style": false,
                      "secret_key": "${var.aws_secret_key}"
                    }
                  ]
                }
              references:
                s3.access_key: var.aws_access_key
                s3.credential_type: var.credential_type
                s3.secret_key: var.aws_secret_key
            - name: bsl2
              manifest: |-
                {
                  "bucket_name": "prod-backup",
                  "is_default": false,
                  "name": "prod-backup-s3",
                  "region": "us-east-2",
                  "s3": [
                    {
                      "arn": "${var.arn}",
                      "credential_type": "${var.credential_type}",
                      "external_id": "${var.external_id}",
                      "s3_force_path_style": false
                    }
                  ]
                }
              references:
                s3.arn: var.arn
                s3.credential_type: var.credential_type
                s3.external_id: var.external_id
        argumentDocs:
            access_key: (String) The access key for S3 authentication, required if 'credential_type' is set to 'secret'.
            arn: (String) The Amazon Resource Name (ARN) of the IAM role to assume for accessing S3 when using 'sts' credentials.
            azure_client_id: (String) Unique client Id from Azure console.
            azure_client_secret: (String, Sensitive) Azure secret for authentication.
            azure_storage_config: '(Block List, Max: 1) Azure storage settings for configuring the backup storage location. (see below for nested schema)'
            azure_tenant_id: (String) Unique tenant Id from Azure console.
            bucket_name: (String) The name of the storage bucket where backups are stored. This is relevant for S3 or S3-compatible(minio) or gcp storage services.
            ca_cert: (String) An optional CA certificate used for SSL connections to ensure secure communication with the storage provider. This is relevant for S3 or S3-compatible(minio) storage services.
            container_name: (String) The container name.
            context: (String) The context of the backup storage location. Allowed values are project or tenant. Default value is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            create: (String)
            credential_type: (String) The type of credentials used to access the S3 storage. Supported values are 'secret' for static credentials and 'sts' for temporary, token-based credentials.
            delete: (String)
            external_id: (String) An external ID used for cross-account access to the S3 storage when using 'sts' credentials.
            gcp_json_credentials: (String, Sensitive) The GCP credentials in JSON format. These credentials are required to authenticate and manage.
            gcp_storage_config: '(Block List, Max: 1) GCP storage settings for configuring the backup storage location. (see below for nested schema)'
            id: (String) The ID of this resource.
            is_default: (Boolean) Specifies if this backup storage location should be used as the default location for storing backups.
            name: (String) The name of the backup storage location. This is a unique identifier for the backup location.
            project_id: (String) The GCP project ID.
            region: (String) The region where the backup storage is located, typically corresponding to the region of the cloud provider. This is relevant for S3 or S3-compatible(minio) storage services.
            resource_group: (String) The resource group name.
            s3: '(Block List, Max: 1) S3-specific settings for configuring the backup storage location. (see below for nested schema)'
            s3_force_path_style: (Boolean) A boolean flag indicating whether to enforce the path-style URL for accessing S3.
            s3_url: (String) The S3 URL endpoint.
            secret_key: (String) The secret key for S3 authentication, required if 'credential_type' is set to 'secret'.
            stock_keeping_unit: '(String) The stop-keeping unit. eg: Standard_LRS'
            storage_name: (String) The storage name.
            storage_provider: (String) The storage location provider for backup storage. Allowed values are aws or minio or gcp or azure. Default value is aws.
            subscription_id: (String) Unique subscription Id from Azure console.
            timeouts: (Block, Optional) (see below for nested schema)
            update: (String)
        importStatements: []
    spectrocloud_cloudaccount_aws:
        subCategory: ""
        name: spectrocloud_cloudaccount_aws
        title: spectrocloud_cloudaccount_aws Resource - terraform-provider-spectrocloud
        examples:
            - name: aws-1
              manifest: |-
                {
                  "aws_access_key": "${var.aws_access_key}",
                  "aws_secret_key": "${var.aws_secret_key}",
                  "name": "aws-1"
                }
              references:
                aws_access_key: var.aws_access_key
                aws_secret_key: var.aws_secret_key
        argumentDocs:
            arn: (String) The Amazon Resource Name (ARN) associated with the AWS resource. This is used for identifying resources in AWS.
            aws_access_key: (String) The AWS access key used to authenticate.
            aws_secret_key: (String, Sensitive) The AWS secret key used in conjunction with the access key for authentication.
            context: (String) The context of the AWS configuration. Allowed values are project or tenant. Default value is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            external_id: (String, Sensitive) An optional external ID that can be used for cross-account access in AWS.
            id: (String) The ID of this resource.
            name: (String)
            partition: |-
                (String) The AWS partition in which the cloud account is located.
                Can be 'aws' for standard AWS regions or 'aws-us-gov' for AWS GovCloud (US) regions.
                Default is 'aws'.
            policy_arns: (Set of String) A set of ARNs for the IAM policies that should be associated with the cloud account.
            private_cloud_gateway_id: (String) ID of the private cloud gateway. This is the ID of the private cloud gateway that is used to connect to the private cluster endpoint.
            type: (String) The type of AWS credentials to use. Can be secret or sts.
        importStatements: []
    spectrocloud_cloudaccount_azure:
        subCategory: ""
        name: spectrocloud_cloudaccount_azure
        title: spectrocloud_cloudaccount_azure Resource - terraform-provider-spectrocloud
        examples:
            - name: azure-1
              manifest: |-
                {
                  "azure_client_id": "${var.azure_client_id}",
                  "azure_client_secret": "${var.azure_client_secret}",
                  "azure_tenant_id": "${var.azure_tenant_id}",
                  "name": "azure-1"
                }
              references:
                azure_client_id: var.azure_client_id
                azure_client_secret: var.azure_client_secret
                azure_tenant_id: var.azure_tenant_id
        argumentDocs:
            azure_client_id: (String) Unique client Id from Azure console.
            azure_client_secret: (String, Sensitive) Azure secret for authentication.
            azure_tenant_id: (String) Unique tenant Id from Azure console.
            cloud: |-
                (String) The Azure partition in which the cloud account is located.
                Can be 'AzurePublicCloud' for standard Azure regions or 'AzureUSGovernmentCloud' for Azure GovCloud (US) regions.
                Default is 'AzurePublicCloud'.
            context: (String) The context of the Azure configuration. Defaults to project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            disable_properties_request: (Boolean) Disable properties request. This is a boolean value that indicates whether to disable properties request or not. If not specified, the default value is false.
            id: (String) The ID of this resource.
            name: (String) The name of the Azure cloud account.
            private_cloud_gateway_id: (String) ID of the private cloud gateway. This is the ID of the private cloud gateway that is used to connect to the private cluster endpoint.
            tenant_name: (String) The name of the tenant. This is the name of the tenant that is used to connect to the Azure cloud.
        importStatements: []
    spectrocloud_cloudaccount_custom:
        subCategory: ""
        name: spectrocloud_cloudaccount_custom
        title: spectrocloud_cloudaccount_custom Resource - terraform-provider-spectrocloud
        examples:
            - name: cloud_account
              manifest: |-
                {
                  "cloud": "nutanix",
                  "context": "tenant",
                  "credentials": {
                    "NUTANIX_ENDPOINT": "1.2.3.4",
                    "NUTANIX_INSECURE": "yes",
                    "NUTANIX_PASSWORD": "${sensitive(\"test123\")}",
                    "NUTANIX_PORT": "8998",
                    "NUTANIX_USER": "test_user"
                  },
                  "name": "test-custom-cloud-account",
                  "private_cloud_gateway_id": "${data.spectrocloud_private_cloud_gateway.nutanix_pcg.id}"
                }
              references:
                private_cloud_gateway_id: data.spectrocloud_private_cloud_gateway.nutanix_pcg.id
        argumentDocs:
            cloud: (String) The cloud provider name.
            context: (String) The context of the custom cloud configuration. Allowed values are project or tenant. Default value is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            credentials: (Map of String, Sensitive) The credentials required for accessing the cloud.
            id: (String) The ID of this resource.
            name: (String) The name of the cloud account.
            private_cloud_gateway_id: (String) ID of the private cloud gateway, which serves as the connection point to establish connectivity with the cloud infrastructure.
        importStatements: []
    spectrocloud_cloudaccount_gcp:
        subCategory: ""
        name: spectrocloud_cloudaccount_gcp
        title: spectrocloud_cloudaccount_gcp Resource - terraform-provider-spectrocloud
        examples:
            - name: gcp-1
              manifest: |-
                {
                  "gcp_json_credentials": "${var.gcp_serviceaccount_json}",
                  "name": "gcp-1"
                }
              references:
                gcp_json_credentials: var.gcp_serviceaccount_json
        argumentDocs:
            context: (String) The context of the GCP configuration. Allowed values are project or tenant. Default value is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            gcp_json_credentials: (String, Sensitive) The GCP credentials in JSON format. These credentials are required to authenticate and manage.
            id: (String) The ID of this resource.
            name: (String) The name of the GCP account.
        importStatements: []
    spectrocloud_cloudaccount_maas:
        subCategory: ""
        name: spectrocloud_cloudaccount_maas
        title: spectrocloud_cloudaccount_maas Resource - terraform-provider-spectrocloud
        examples:
            - name: maas-1
              manifest: |-
                {
                  "maas_api_endpoint": "${var.maas_api_endpoint}",
                  "maas_api_key": "${var.maas_api_key}",
                  "name": "maas-1"
                }
              references:
                maas_api_endpoint: var.maas_api_endpoint
                maas_api_key: var.maas_api_key
        argumentDocs:
            context: (String) The context of the MAAS configuration. Allowed values are project or tenant. Default value is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            id: (String) The ID of this resource.
            maas_api_endpoint: (String) Endpoint of the MAAS API that is used to connect to the MAAS cloud. I.e. http://maas:5240/MAAS
            maas_api_key: (String, Sensitive) API key that is used to connect to the MAAS cloud.
            name: (String) Name of the MAAS cloud account.
            private_cloud_gateway_id: (String) ID of the private cloud gateway that is used to connect to the MAAS cloud.
        importStatements: []
    spectrocloud_cloudaccount_openstack:
        subCategory: ""
        name: spectrocloud_cloudaccount_openstack
        title: spectrocloud_cloudaccount_openstack Resource - terraform-provider-spectrocloud
        examples:
            - name: account
              manifest: |-
                {
                  "default_domain": "${var.domain}",
                  "default_project": "${var.project}",
                  "identity_endpoint": "${var.identity_endpoint}",
                  "name": "openstack-dev",
                  "openstack_password": "${var.openstack_password}",
                  "openstack_username": "${var.openstack_username}",
                  "parent_region": "${var.region}",
                  "private_cloud_gateway_id": ""
                }
              references:
                default_domain: var.domain
                default_project: var.project
                identity_endpoint: var.identity_endpoint
                openstack_password: var.openstack_password
                openstack_username: var.openstack_username
                parent_region: var.region
        argumentDocs:
            ca_certificate: (String) The CA certificate of the OpenStack cloud that is used to connect to the OpenStack cloud.
            context: (String) The context of the OpenStack configuration. Allowed values are project or tenant. Default value is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            default_domain: (String) The default domain of the OpenStack cloud that is used to connect to the OpenStack cloud.
            default_project: (String) The default project of the OpenStack cloud that is used to connect to the OpenStack cloud.
            id: (String) The ID of this resource.
            identity_endpoint: (String) The identity endpoint of the OpenStack cloud that is used to connect to the OpenStack cloud.
            name: (String) Name of the OpenStack cloud account.
            openstack_allow_insecure: (Boolean) Whether to allow insecure connections to the OpenStack cloud. Default is false.
            openstack_password: (String, Sensitive) The password of the OpenStack cloud that is used to connect to the OpenStack cloud.
            openstack_username: (String) The username of the OpenStack cloud that is used to connect to the OpenStack cloud.
            parent_region: (String) The parent region of the OpenStack cloud that is used to connect to the OpenStack cloud.
            private_cloud_gateway_id: (String) ID of the private cloud gateway that is used to connect to the OpenStack cloud.
        importStatements: []
    spectrocloud_cloudaccount_vsphere:
        subCategory: ""
        description: A resource to manage a vSphere cloud account in Pallette.
        name: spectrocloud_cloudaccount_vsphere
        title: spectrocloud_cloudaccount_vsphere Resource - terraform-provider-spectrocloud
        examples:
            - name: account
              manifest: |-
                {
                  "context": "tenant",
                  "name": "vs",
                  "private_cloud_gateway_id": "${var.private_cloud_gateway_id}",
                  "vsphere_ignore_insecure_error": true,
                  "vsphere_password": "${var.vsphere_password}",
                  "vsphere_username": "${var.vsphere_username}",
                  "vsphere_vcenter": "${var.vsphere_vcenter}"
                }
              references:
                private_cloud_gateway_id: var.private_cloud_gateway_id
                vsphere_password: var.vsphere_password
                vsphere_username: var.vsphere_username
                vsphere_vcenter: var.vsphere_vcenter
        argumentDocs:
            context: (String) Context of the cloud account. Allowed values are project or tenant. Default value is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            id: (String) The ID of this resource.
            name: (String) Name of the cloud account. This name is used to identify the cloud account in the Spectro Cloud UI.
            private_cloud_gateway_id: (String) ID of the private cloud gateway. This is the ID of the private cloud gateway that is used to connect to the vSphere cloud.
            vsphere_ignore_insecure_error: (Boolean) Ignore insecure error. This is a boolean value that indicates whether to ignore the insecure error or not. If not specified, the default value is false.
            vsphere_password: (String, Sensitive) Password of the vSphere cloud. This is the password of the vSphere cloud that is used to connect to the vSphere cloud.
            vsphere_username: (String) Username of the vSphere cloud. This is the username of the vSphere cloud that is used to connect to the vSphere cloud.
            vsphere_vcenter: (String) vCenter server address. This is the address of the vCenter server that is used to connect to the vSphere cloud.
        importStatements: []
    spectrocloud_cluster_aks:
        subCategory: ""
        description: Resource for managing AKS clusters in Spectro Cloud through Palette.
        name: spectrocloud_cluster_aks
        title: spectrocloud_cluster_aks Resource - terraform-provider-spectrocloud
        examples:
            - name: cluster
              manifest: |-
                {
                  "backup_policy": [
                    {
                      "backup_location_id": "${data.spectrocloud_backup_storage_location.bsl.id}",
                      "expiry_in_hour": 7200,
                      "include_cluster_resources": true,
                      "include_disks": true,
                      "prefix": "prod-backup",
                      "schedule": "0 0 * * SUN"
                    }
                  ],
                  "cloud_account_id": "${data.spectrocloud_cloudaccount_azure.account.id}",
                  "cloud_config": [
                    {
                      "region": "centralus",
                      "resource_group": "dev",
                      "ssh_key": "ssh key value",
                      "subscription_id": "subscription-id"
                    }
                  ],
                  "cluster_profile": [
                    {
                      "id": "${data.spectrocloud_cluster_profile.profile.id}"
                    }
                  ],
                  "machine_pool": [
                    {
                      "count": 1,
                      "disk_size_gb": 60,
                      "instance_type": "Standard_DS4",
                      "is_system_node_pool": true,
                      "name": "worker-basic",
                      "storage_account_type": "Standard_LRS"
                    }
                  ],
                  "name": "${var.cluster_name}",
                  "scan_policy": [
                    {
                      "configuration_scan_schedule": "0 0 * * SUN",
                      "conformance_scan_schedule": "0 0 1 * *",
                      "penetration_scan_schedule": "0 0 * * SUN"
                    }
                  ],
                  "tags": [
                    "dev",
                    "department:devops",
                    "owner:bob"
                  ]
                }
              references:
                backup_policy.backup_location_id: data.spectrocloud_backup_storage_location.bsl.id
                cloud_account_id: data.spectrocloud_cloudaccount_azure.account.id
                cluster_profile.id: data.spectrocloud_cluster_profile.profile.id
                name: var.cluster_name
        argumentDocs:
            action: '(String) The action to perform on the node. Valid values are: cordon, uncordon.'
            additional_labels: (Map of String)
            admin_kube_config: (String) Admin Kube-config for the cluster. This can be used to connect to the cluster using kubectl, With admin privilege.
            apply_setting: (String) The setting to apply the cluster profile. DownloadAndInstall will download and install packs in one action. DownloadAndInstallLater will only download artifact and postpone install for later. Default value is DownloadAndInstall.
            backup_location_id: (String) The ID of the backup location to use for the backup.
            backup_policy: '(Block List, Max: 1) The backup policy for the cluster. If not specified, no backups will be taken. (see below for nested schema)'
            cloud_account_id: (String)
            cloud_config: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            cloud_config_id: (String, Deprecated) ID of the cloud config used for the cluster. This cloud config must be of type azure.
            cluster_meta_attribute: '(String) cluster_meta_attribute can be used to set additional cluster metadata information, eg {''nic_name'': ''test'', ''env'': ''stage''}'
            cluster_profile: (Block List) (see below for nested schema)
            cluster_rbac_binding: (Block List) The RBAC binding for the cluster. (see below for nested schema)
            cluster_uids: (Set of String) The list of cluster UIDs to include in the backup. If include_all_clusters is set to true, then all clusters will be included.
            configuration_scan_schedule: (String) The schedule for configuration scan.
            conformance_scan_schedule: (String) The schedule for conformance scan.
            content: (String) The content of the manifest. The content is the YAML content of the manifest.
            context: (String) The context of the AKS cluster. Allowed values are project or tenant. Default is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            control_plane_cidr: (String)
            control_plane_subnet_name: (String)
            control_plane_subnet_security_group_name: (String)
            count: (Number) Number of nodes in the machine pool.
            country_code: (String)
            country_name: (String)
            create: (String)
            delete: (String)
            description: (String) The description of the cluster. Default value is empty string.
            disk_size_gb: (Number)
            effect: '(String) The effect of the taint. Allowed values are: NoSchedule, PreferNoSchedule or NoExecute.'
            expiry_in_hour: (Number) The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
            external_traffic_policy: (String) The external traffic policy for the cluster.
            force_delete: (Boolean) If set to true, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
            force_delete_delay: (Number) Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
            host_config: (Block List) The host configuration for the cluster. (see below for nested schema)
            host_endpoint_type: (String) The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
            id: (String) The ID of this resource.
            images_blacklist: (List of String) List of images to disallow for the namespace. For example, ['nginx:latest', 'redis:latest']
            include_all_clusters: (Boolean) Whether to include all clusters in the backup. If set to false, only the clusters specified in cluster_uids will be included.
            include_cluster_resources: '(Boolean) Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)'
            include_cluster_resources_mode: (String) Specifies whether to include the cluster resources in the backup. Supported values are always, never, and auto.
            include_disks: (Boolean) Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
            ingress_host: (String) The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
            instance_type: (String)
            is_system_node_pool: (Boolean)
            key: (String) The key of the taint.
            kubeconfig: (String) Kubeconfig for the cluster. This can be used to connect to the cluster using kubectl.
            latitude: (Number)
            load_balancer_source_ranges: (String) The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
            location_config: (List of Object) The location of the cluster. (see below for nested schema)
            longitude: (Number)
            machine_pool: '(Block List, Min: 1) (see below for nested schema)'
            manifest: (Block List) (see below for nested schema)
            max: (Number) Maximum number of nodes in the machine pool. This is used for autoscaling the machine pool.
            min: (Number) Minimum number of nodes in the machine pool. This is used for autoscaling the machine pool.
            name: (String)
            namespace: (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            namespaces: (Block List) The namespaces for the cluster. (see below for nested schema)
            node: (Block List) (see below for nested schema)
            node_id: (String) The node_id of the node, For example i-07f899a33dee624f7
            os_patch_after: '(String) The date and time after which to patch the cluster. Prefix the time value with the respective RFC. Ex: RFC3339: 2006-01-02T15:04:05Z07:00'
            os_patch_on_boot: (Boolean) Whether to apply OS patch on boot. Default is false.
            os_patch_schedule: '(String) The cron schedule for OS patching. This must be in the form of cron syntax. Ex: 0 0 * * *.'
            pack: (Block List) For packs of type spectro, helm, and manifest, at least one pack must be specified. (see below for nested schema)
            pause_agent_upgrades: (String) The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is unlock, meaning upgrades occur automatically. Setting it to lock pauses automatic agent upgrades for the cluster.
            penetration_scan_schedule: (String) The schedule for penetration scan.
            prefix: (String) Prefix for the backup name. The backup name will be of the format --.
            private_cluster: (Boolean) Whether to create a private cluster(API endpoint). Default is false.
            region: (String)
            region_code: (String)
            region_name: (String)
            registry_uid: (String) The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name.
            resource_allocation: '(Map of String) Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, {cpu_cores: ''2'', memory_MiB: ''2048''}'
            resource_group: (String)
            review_repave_state: (String) To authorize the cluster repave, set the value to Approved for approval and "" to decline. Default value is "".
            role: (Map of String) The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            scan_policy: '(Block List, Max: 1) The scan policy for the cluster. (see below for nested schema)'
            schedule: (String) The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to 0 1 * * *.
            skip_completion: (Boolean) If true, the cluster will be created asynchronously. Default value is false.
            ssh_key: (String) Public SSH key to be used for the cluster nodes.
            storage_account_type: (String)
            subjects: (Block List) (see below for nested schema)
            subscription_id: (String)
            tag: (String) The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is spectro or helm.
            tags: (Set of String) A list of tags to be applied to the cluster. Tags must be in the form of key:value.
            taints: (Block List) (see below for nested schema)
            timeouts: (Block, Optional) (see below for nested schema)
            type: (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
            uid: (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry.
            update: (String)
            update_strategy: (String) Update strategy for the machine pool. Valid values are RollingUpdateScaleOut and RollingUpdateScaleIn.
            value: (String) The value of the taint.
            values: (String) The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
            variables: '(Map of String) A map of cluster profile variables, specified as key-value pairs. For example: priority = "5".'
            vnet_cidr_block: (String)
            vnet_name: (String)
            vnet_resource_group: (String)
            worker_cidr: (String)
            worker_subnet_name: (String)
            worker_subnet_security_group_name: (String)
        importStatements: []
    spectrocloud_cluster_aws:
        subCategory: ""
        description: Resource for managing AWS clusters in Spectro Cloud through Palette.
        name: spectrocloud_cluster_aws
        title: spectrocloud_cluster_aws Resource - terraform-provider-spectrocloud
        examples:
            - name: cluster
              manifest: |-
                {
                  "backup_policy": [
                    {
                      "backup_location_id": "${data.spectrocloud_backup_storage_location.bsl.id}",
                      "expiry_in_hour": 7200,
                      "include_cluster_resources": true,
                      "include_disks": true,
                      "prefix": "prod-backup",
                      "schedule": "0 0 * * SUN"
                    }
                  ],
                  "cloud_account_id": "${data.spectrocloud_cloudaccount_aws.account.id}",
                  "cloud_config": [
                    {
                      "region": "eu-west-1",
                      "ssh_key_name": "spectro2022",
                      "vpc_id": "vpc-0a38a86f3bf3c6cf5"
                    }
                  ],
                  "cluster_profile": [
                    {
                      "id": "${data.spectrocloud_cluster_profile.profile.id}"
                    }
                  ],
                  "machine_pool": [
                    {
                      "additional_labels": {
                        "owner": "siva",
                        "purpose": "testing",
                        "type": "cp"
                      },
                      "az_subnets": {
                        "eu-west-1a": "subnet-08c7ad2affe1f1250,subnet-04dbeac9aba098d0e",
                        "eu-west-1c": "${join(\",\", var.subnet_ids_eu_west_1c)}"
                      },
                      "control_plane": true,
                      "control_plane_as_worker": true,
                      "count": 1,
                      "disk_size_gb": 60,
                      "instance_type": "m4.large",
                      "name": "cp-pool"
                    },
                    {
                      "additional_labels": {
                        "owner": "siva",
                        "purpose": "testing",
                        "type": "worker"
                      },
                      "az_subnets": {
                        "eu-west-1a": "subnet-04dbeac9aba098d0e",
                        "eu-west-1c": "subnet-039c3beb3da69172f"
                      },
                      "count": 1,
                      "instance_type": "m5.large",
                      "name": "worker-basic"
                    }
                  ],
                  "name": "${var.cluster_name}",
                  "scan_policy": [
                    {
                      "configuration_scan_schedule": "0 0 * * SUN",
                      "conformance_scan_schedule": "0 0 1 * *",
                      "penetration_scan_schedule": "0 0 * * SUN"
                    }
                  ],
                  "tags": [
                    "dev",
                    "department:devops",
                    "owner:bob"
                  ]
                }
              references:
                backup_policy.backup_location_id: data.spectrocloud_backup_storage_location.bsl.id
                cloud_account_id: data.spectrocloud_cloudaccount_aws.account.id
                cluster_profile.id: data.spectrocloud_cluster_profile.profile.id
                name: var.cluster_name
        argumentDocs:
            action: '(String) The action to perform on the node. Valid values are: cordon, uncordon.'
            additional_labels: (Map of String)
            additional_security_groups: (Set of String) Additional security groups to attach to the instance.
            admin_kube_config: (String) Admin Kube-config for the cluster. This can be used to connect to the cluster using kubectl, With admin privilege.
            apply_setting: (String) The setting to apply the cluster profile. DownloadAndInstall will download and install packs in one action. DownloadAndInstallLater will only download artifact and postpone install for later. Default value is DownloadAndInstall.
            az_subnets: (Map of String) Mutually exclusive with azs. Use az_subnets for Static provisioning.
            azs: (Set of String) Mutually exclusive with az_subnets. Use azs for Dynamic provisioning.
            backup_location_id: (String) The ID of the backup location to use for the backup.
            backup_policy: '(Block List, Max: 1) The backup policy for the cluster. If not specified, no backups will be taken. (see below for nested schema)'
            capacity_type: (String) Capacity type is an instance type,  can be 'on-demand' or 'spot'. Defaults to 'on-demand'.
            cloud_account_id: (String)
            cloud_config: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            cloud_config_id: (String, Deprecated) ID of the cloud config used for the cluster. This cloud config must be of type azure.
            cluster_meta_attribute: '(String) cluster_meta_attribute can be used to set additional cluster metadata information, eg {''nic_name'': ''test'', ''env'': ''stage''}'
            cluster_profile: (Block List) (see below for nested schema)
            cluster_rbac_binding: (Block List) The RBAC binding for the cluster. (see below for nested schema)
            cluster_uids: (Set of String) The list of cluster UIDs to include in the backup. If include_all_clusters is set to true, then all clusters will be included.
            configuration_scan_schedule: (String) The schedule for configuration scan.
            conformance_scan_schedule: (String) The schedule for conformance scan.
            content: (String) The content of the manifest. The content is the YAML content of the manifest.
            context: (String) The context of the AWS cluster. Allowed values are project or tenant. Default is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            control_plane: (Boolean) Whether this machine pool is a control plane. Defaults to false.
            control_plane_as_worker: (Boolean) Whether this machine pool is a control plane and a worker. Defaults to false.
            control_plane_lb: (String) Control plane load balancer type. Valid values are Internet-facing and internal. Defaults to `` (empty string).
            count: (Number) Number of nodes in the machine pool.
            country_code: (String)
            country_name: (String)
            create: (String)
            delete: (String)
            description: (String) The description of the cluster. Default value is empty string.
            disk_size_gb: (Number) The disk size in GB for the machine pool nodes.
            effect: '(String) The effect of the taint. Allowed values are: NoSchedule, PreferNoSchedule or NoExecute.'
            expiry_in_hour: (Number) The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
            external_traffic_policy: (String) The external traffic policy for the cluster.
            force_delete: (Boolean) If set to true, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
            force_delete_delay: (Number) Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
            host_config: (Block List) The host configuration for the cluster. (see below for nested schema)
            host_endpoint_type: (String) The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
            id: (String) The ID of this resource.
            images_blacklist: (List of String) List of images to disallow for the namespace. For example, ['nginx:latest', 'redis:latest']
            include_all_clusters: (Boolean) Whether to include all clusters in the backup. If set to false, only the clusters specified in cluster_uids will be included.
            include_cluster_resources: '(Boolean) Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)'
            include_cluster_resources_mode: (String) Specifies whether to include the cluster resources in the backup. Supported values are always, never, and auto.
            include_disks: (Boolean) Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
            ingress_host: (String) The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
            instance_type: (String) The instance type to use for the machine pool nodes.
            key: (String) The key of the taint.
            kubeconfig: (String) Kubeconfig for the cluster. This can be used to connect to the cluster using kubectl.
            latitude: (Number)
            load_balancer_source_ranges: (String) The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
            location_config: (List of Object) The location of the cluster. (see below for nested schema)
            longitude: (Number)
            machine_pool: '(Block Set, Min: 1) (see below for nested schema)'
            manifest: (Block List) (see below for nested schema)
            max: (Number) Maximum number of nodes in the machine pool. This is used for autoscaling the machine pool.
            max_price: (String) Maximum price to bid for spot instances. Only applied when instance type is 'spot'.
            min: (Number) Minimum number of nodes in the machine pool. This is used for autoscaling the machine pool.
            name: (String)
            namespace: (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            namespaces: (Block List) The namespaces for the cluster. (see below for nested schema)
            node: (Block List) (see below for nested schema)
            node_id: (String) The node_id of the node, For example i-07f899a33dee624f7
            node_repave_interval: (Number) Minimum number of seconds node should be Ready, before the next node is selected for repave. Default value is 0, Applicable only for worker pools.
            os_patch_after: '(String) Date and time after which to patch cluster RFC3339: 2006-01-02T15:04:05Z07:00'
            os_patch_on_boot: (Boolean) Whether to apply OS patch on boot. Default is false.
            os_patch_schedule: '(String) The cron schedule for OS patching. This must be in the form of cron syntax. Ex: 0 0 * * *.'
            pack: (Block List) For packs of type spectro, helm, and manifest, at least one pack must be specified. (see below for nested schema)
            pause_agent_upgrades: (String) The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is unlock, meaning upgrades occur automatically. Setting it to lock pauses automatic agent upgrades for the cluster.
            penetration_scan_schedule: (String) The schedule for penetration scan.
            prefix: (String) Prefix for the backup name. The backup name will be of the format --.
            region: (String) The AWS region to deploy the cluster in.
            region_code: (String)
            region_name: (String)
            registry_uid: (String) The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name.
            resource_allocation: '(Map of String) Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, {cpu_cores: ''2'', memory_MiB: ''2048''}'
            review_repave_state: (String) To authorize the cluster repave, set the value to Approved for approval and "" to decline. Default value is "".
            role: (Map of String) The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            scan_policy: '(Block List, Max: 1) The scan policy for the cluster. (see below for nested schema)'
            schedule: (String) The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to 0 1 * * *.
            skip_completion: (Boolean) If true, the cluster will be created asynchronously. Default value is false.
            ssh_key_name: (String) Public SSH key to be used for the cluster nodes.
            subjects: (Block List) (see below for nested schema)
            tag: (String) The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is spectro or helm.
            tags: (Set of String) A list of tags to be applied to the cluster. Tags must be in the form of key:value.
            taints: (Block List) (see below for nested schema)
            timeouts: (Block, Optional) (see below for nested schema)
            type: (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
            uid: (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry.
            update: (String)
            update_strategy: (String) Update strategy for the machine pool. Valid values are RollingUpdateScaleOut and RollingUpdateScaleIn.
            value: (String) The value of the taint.
            values: (String) The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
            variables: '(Map of String) A map of cluster profile variables, specified as key-value pairs. For example: priority = "5".'
            vpc_id: (String) The VPC ID to deploy the cluster in. If not provided, VPC will be provisioned dynamically.
        importStatements: []
    spectrocloud_cluster_azure:
        subCategory: ""
        description: Resource for managing Azure clusters in Spectro Cloud through Palette.
        name: spectrocloud_cluster_azure
        title: spectrocloud_cluster_azure Resource - terraform-provider-spectrocloud
        examples:
            - name: cluster
              manifest: |-
                {
                  "cloud_account_id": "${data.spectrocloud_cloudaccount_azure.account.id}",
                  "cloud_config": [
                    {
                      "region": "${var.azure_region}",
                      "resource_group": "${var.azure_resource_group}",
                      "ssh_key": "${var.cluster_ssh_public_key}",
                      "subscription_id": "${var.azure_subscription_id}"
                    }
                  ],
                  "cluster_profile": [
                    {
                      "id": "${data.spectrocloud_cluster_profile.profile.id}"
                    }
                  ],
                  "machine_pool": [
                    {
                      "azs": [
                        ""
                      ],
                      "control_plane": true,
                      "control_plane_as_worker": true,
                      "count": 1,
                      "disk": [
                        {
                          "size_gb": 65,
                          "type": "Standard_LRS"
                        }
                      ],
                      "instance_type": "Standard_D2_v3",
                      "name": "cp-pool"
                    },
                    {
                      "azs": [
                        ""
                      ],
                      "count": 1,
                      "instance_type": "Standard_D2_v3",
                      "name": "worker-basic"
                    }
                  ],
                  "name": "${var.cluster_name}",
                  "tags": [
                    "dev",
                    "department:devops",
                    "owner:bob"
                  ]
                }
              references:
                cloud_account_id: data.spectrocloud_cloudaccount_azure.account.id
                cloud_config.region: var.azure_region
                cloud_config.resource_group: var.azure_resource_group
                cloud_config.ssh_key: var.cluster_ssh_public_key
                cloud_config.subscription_id: var.azure_subscription_id
                cluster_profile.id: data.spectrocloud_cluster_profile.profile.id
                name: var.cluster_name
        argumentDocs:
            action: '(String) The action to perform on the node. Valid values are: cordon, uncordon.'
            additional_labels: (Map of String)
            admin_kube_config: (String) Admin Kube-config for the cluster. This can be used to connect to the cluster using kubectl, With admin privilege.
            apply_setting: (String) The setting to apply the cluster profile. DownloadAndInstall will download and install packs in one action. DownloadAndInstallLater will only download artifact and postpone install for later. Default value is DownloadAndInstall.
            azs: (Set of String) Availability zones for the machine pool. Check if your region provides availability zones on the Azure documentation. Default value is [""].
            backup_location_id: (String) The ID of the backup location to use for the backup.
            backup_policy: '(Block List, Max: 1) The backup policy for the cluster. If not specified, no backups will be taken. (see below for nested schema)'
            cidr_block: (String) CidrBlock is the CIDR block to be used when the provider creates a managed virtual network.
            cloud_account_id: (String) ID of the cloud account to be used for the cluster. This cloud account must be of type azure.
            cloud_config: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            cloud_config_id: (String, Deprecated) ID of the cloud config used for the cluster. This cloud config must be of type azure.
            cluster_meta_attribute: '(String) cluster_meta_attribute can be used to set additional cluster metadata information, eg {''nic_name'': ''test'', ''env'': ''stage''}'
            cluster_profile: (Block List) (see below for nested schema)
            cluster_rbac_binding: (Block List) The RBAC binding for the cluster. (see below for nested schema)
            cluster_uids: (Set of String) The list of cluster UIDs to include in the backup. If include_all_clusters is set to true, then all clusters will be included.
            configuration_scan_schedule: (String) The schedule for configuration scan.
            conformance_scan_schedule: (String) The schedule for conformance scan.
            container_name: (String) Container name within your azure storage account.
            content: (String) The content of the manifest. The content is the YAML content of the manifest.
            context: (String) The context of the Azure cluster. Allowed values are project or tenant. Default is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            control_plane: (Boolean) Whether this machine pool is a control plane. Defaults to false.
            control_plane_as_worker: (Boolean) Whether this machine pool is a control plane and a worker. Defaults to false.
            control_plane_subnet: '(Block List, Max: 1) (see below for nested schema)'
            count: (Number) Number of nodes in the machine pool.
            country_code: (String)
            country_name: (String)
            create: (String)
            delete: (String)
            description: (String) The description of the cluster. Default value is empty string.
            disk: '(Block List, Max: 1) Disk configuration for the machine pool. (see below for nested schema)'
            effect: '(String) The effect of the taint. Allowed values are: NoSchedule, PreferNoSchedule or NoExecute.'
            expiry_in_hour: (Number) The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
            external_traffic_policy: (String) The external traffic policy for the cluster.
            force_delete: (Boolean) If set to true, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
            force_delete_delay: (Number) Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
            host_config: (Block List) The host configuration for the cluster. (see below for nested schema)
            host_endpoint_type: (String) The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
            id: (String) The ID of this resource.
            images_blacklist: (List of String) List of images to disallow for the namespace. For example, ['nginx:latest', 'redis:latest']
            include_all_clusters: (Boolean) Whether to include all clusters in the backup. If set to false, only the clusters specified in cluster_uids will be included.
            include_cluster_resources: '(Boolean) Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)'
            include_cluster_resources_mode: (String) Specifies whether to include the cluster resources in the backup. Supported values are always, never, and auto.
            include_disks: (Boolean) Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
            ingress_host: (String) The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
            instance_type: (String) Azure instance type from the Azure portal.
            is_system_node_pool: (Boolean) Whether this machine pool is a system node pool. Default value is `false'.
            key: (String) The key of the taint.
            kubeconfig: (String) Kubeconfig for the cluster. This can be used to connect to the cluster using kubectl.
            latitude: (Number)
            load_balancer_source_ranges: (String) The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
            location_config: (List of Object) The location of the cluster. (see below for nested schema)
            longitude: (Number)
            machine_pool: '(Block Set, Min: 1) (see below for nested schema)'
            manifest: (Block List) (see below for nested schema)
            name: (String) Name of the cluster. This name will be used to create the cluster in Azure.
            namespace: (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            namespaces: (Block List) The namespaces for the cluster. (see below for nested schema)
            network_resource_group: (String) Azure network resource group in which the cluster is to be provisioned.
            node: (Block List) (see below for nested schema)
            node_id: (String) The node_id of the node, For example i-07f899a33dee624f7
            node_repave_interval: (Number) Minimum number of seconds node should be Ready, before the next node is selected for repave. Default value is 0, Applicable only for worker pools.
            os_patch_after: '(String) Date and time after which to patch cluster RFC3339: 2006-01-02T15:04:05Z07:00'
            os_patch_on_boot: (Boolean) Whether to apply OS patch on boot. Default is false.
            os_patch_schedule: (String) Cron schedule for OS patching. This must be in the form of 0 0 * * *.
            os_type: (String) Operating system type for the machine pool. Valid values are Linux and Windows. Defaults to Linux.
            pack: (Block List) For packs of type spectro, helm, and manifest, at least one pack must be specified. (see below for nested schema)
            pause_agent_upgrades: (String) The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is unlock, meaning upgrades occur automatically. Setting it to lock pauses automatic agent upgrades for the cluster.
            penetration_scan_schedule: (String) The schedule for penetration scan.
            prefix: (String) Prefix for the backup name. The backup name will be of the format --.
            region: (String) Azure region. This can be found in the Azure portal under Resource groups.
            region_code: (String)
            region_name: (String)
            registry_uid: (String) The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name.
            resource_allocation: '(Map of String) Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, {cpu_cores: ''2'', memory_MiB: ''2048''}'
            resource_group: (String) Azure resource group. This can be found in the Azure portal under Resource groups.
            review_repave_state: (String) To authorize the cluster repave, set the value to Approved for approval and "" to decline. Default value is "".
            role: (Map of String) The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            scan_policy: '(Block List, Max: 1) The scan policy for the cluster. (see below for nested schema)'
            schedule: (String) The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to 0 1 * * *.
            security_group_name: (String) Network Security Group(NSG) to be attached to subnet.
            size_gb: (Number) Size of the disk in GB.
            skip_completion: (Boolean) If true, the cluster will be created asynchronously. Default value is false.
            ssh_key: (String) Public SSH key to be used for the cluster nodes.
            storage_account_name: (String) Azure storage account name.
            subjects: (Block List) (see below for nested schema)
            subscription_id: (String) Azure subscription ID. This can be found in the Azure portal under Subscriptions.
            tag: (String) The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is spectro or helm.
            tags: (Set of String) A list of tags to be applied to the cluster. Tags must be in the form of key:value.
            taints: (Block List) (see below for nested schema)
            timeouts: (Block, Optional) (see below for nested schema)
            type: (String) Type of the disk. Valid values are Standard_LRS, StandardSSD_LRS, Premium_LRS.
            uid: (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry.
            update: (String)
            update_strategy: (String) Update strategy for the machine pool. Valid values are RollingUpdateScaleOut and RollingUpdateScaleIn.
            value: (String) The value of the taint.
            values: (String) The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
            variables: '(Map of String) A map of cluster profile variables, specified as key-value pairs. For example: priority = "5".'
            virtual_network_cidr_block: (String) Azure virtual network cidr block in which the cluster is to be provisioned.
            virtual_network_name: (String) Azure virtual network in which the cluster is to be provisioned.
            worker_node_subnet: '(Block List, Max: 1) (see below for nested schema)'
        importStatements: []
    spectrocloud_cluster_custom_cloud:
        subCategory: ""
        description: Resource for managing custom cloud clusters in Spectro Cloud through Palette.
        name: spectrocloud_cluster_custom_cloud
        title: spectrocloud_cluster_custom_cloud Resource - terraform-provider-spectrocloud
        examples:
            - name: cluster_nutanix
              manifest: |-
                {
                  "apply_setting": "DownloadAndInstall",
                  "backup_policy": [
                    {
                      "backup_location_id": "test-backup-uid",
                      "expiry_in_hour": 7200,
                      "include_cluster_resources": true,
                      "include_disks": false,
                      "prefix": "prod-backup",
                      "schedule": "0 0 * * SUN"
                    }
                  ],
                  "cloud": "nutanix",
                  "cloud_account_id": "${data.spectrocloud_cloudaccount_custom.nutanix_account.id}",
                  "cloud_config": [
                    {
                      "values": "${templatefile(\"config_templates/cloud_config.yaml\", local.cloud_config_override_variables)}"
                    }
                  ],
                  "cluster_profile": [
                    {
                      "id": "${data.spectrocloud_cluster_profile.profile.id}"
                    }
                  ],
                  "cluster_rbac_binding": [
                    {
                      "role": {
                        "kind": "ClusterRole",
                        "name": "testRole3"
                      },
                      "subjects": [
                        {
                          "name": "testRoleUser3",
                          "type": "User"
                        },
                        {
                          "name": "testRoleGroup3",
                          "type": "Group"
                        },
                        {
                          "name": "testrolesubject3",
                          "namespace": "testrolenamespace",
                          "type": "ServiceAccount"
                        }
                      ],
                      "type": "ClusterRoleBinding"
                    }
                  ],
                  "context": "tenant",
                  "description": "The nutanix cluster with k8 infra profile test",
                  "force_delete": true,
                  "machine_pool": [
                    {
                      "additional_labels": {
                        "owner": "tf",
                        "purpose": "testing",
                        "type": "cp"
                      },
                      "control_plane": true,
                      "control_plane_as_worker": true,
                      "node_pool_config": "${templatefile(\"config_templates/cp_pool_config.yaml\", local.node_pool_config_variables)}"
                    },
                    {
                      "additional_labels": {
                        "owner": "tf",
                        "purpose": "testing",
                        "type": "worker"
                      },
                      "control_plane": false,
                      "control_plane_as_worker": false,
                      "node_pool_config": "${templatefile(\"config_templates/worker_pool_config.yaml\", local.node_pool_config_variables)}",
                      "taints": [
                        {
                          "effect": "NoSchedule",
                          "key": "taintkey2",
                          "value": "taintvalue2"
                        }
                      ]
                    }
                  ],
                  "name": "${local.cloud_config_override_variables.CLUSTER_NAME}",
                  "namespaces": [
                    {
                      "name": "test5ns",
                      "resource_allocation": {
                        "cpu_cores": "2",
                        "memory_MiB": "2048"
                      }
                    }
                  ],
                  "os_patch_after": "2025-02-14T13:09:21+05:30",
                  "os_patch_on_boot": true,
                  "os_patch_schedule": "0 0 * * SUN",
                  "pause_agent_upgrades": "lock",
                  "scan_policy": [
                    {
                      "configuration_scan_schedule": "0 0 * * SUN",
                      "conformance_scan_schedule": "0 0 1 * *",
                      "penetration_scan_schedule": "0 0 * * SUN"
                    }
                  ],
                  "skip_completion": true,
                  "tags": [
                    "dev",
                    "department:tf",
                    "owner:admin"
                  ]
                }
              references:
                cloud_account_id: data.spectrocloud_cloudaccount_custom.nutanix_account.id
                cluster_profile.id: data.spectrocloud_cluster_profile.profile.id
                name: local.cloud_config_override_variables.CLUSTER_NAME
        argumentDocs:
            admin_kube_config: (String) Admin Kube-config for the cluster. This can be used to connect to the cluster using kubectl, With admin privilege.
            apply_setting: (String) The setting to apply the cluster profile. DownloadAndInstall will download and install packs in one action. DownloadAndInstallLater will only download artifact and postpone install for later. Default value is DownloadAndInstall.
            backup_location_id: (String) The ID of the backup location to use for the backup.
            backup_policy: '(Block List, Max: 1) The backup policy for the cluster. If not specified, no backups will be taken. (see below for nested schema)'
            cloud: (String) The cloud provider name.
            cloud_account_id: (String) The cloud account id to use for this cluster.
            cloud_config: '(Block List, Min: 1, Max: 1) The Cloud environment configuration settings such as network parameters and encryption parameters that apply to this cluster. (see below for nested schema)'
            cloud_config_id: (String, Deprecated)
            cluster_profile: (Block List) (see below for nested schema)
            cluster_rbac_binding: (Block List) The RBAC binding for the cluster. (see below for nested schema)
            cluster_uids: (Set of String) The list of cluster UIDs to include in the backup. If include_all_clusters is set to true, then all clusters will be included.
            configuration_scan_schedule: (String) The schedule for configuration scan.
            conformance_scan_schedule: (String) The schedule for conformance scan.
            content: (String) The content of the manifest. The content is the YAML content of the manifest.
            context: (String) The context of the EKS cluster. Allowed values are project or tenant. Default is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            control_plane: (Boolean) Whether this machine pool is a control plane. Defaults to false.
            control_plane_as_worker: (Boolean) Whether this machine pool is a control plane and a worker. Defaults to false.
            count: (Number) Number of nodes in the machine pool. This will be derived from the replica value in the 'node_pool_config'.
            country_code: (String) The country code of the country the cluster is located in.
            country_name: (String) The name of the country.
            create: (String)
            delete: (String)
            description: (String) The description of the cluster. Default value is empty string.
            expiry_in_hour: (Number) The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
            force_delete: (Boolean) If set to true, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
            force_delete_delay: (Number) Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
            id: (String) The ID of this resource.
            images_blacklist: (List of String) List of images to disallow for the namespace. For example, ['nginx:latest', 'redis:latest']
            include_all_clusters: (Boolean) Whether to include all clusters in the backup. If set to false, only the clusters specified in cluster_uids will be included.
            include_cluster_resources: '(Boolean) Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)'
            include_cluster_resources_mode: (String) Specifies whether to include the cluster resources in the backup. Supported values are always, never, and auto.
            include_disks: (Boolean) Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
            kubeconfig: (String) Kubeconfig for the cluster. This can be used to connect to the cluster using kubectl.
            latitude: (Number) The latitude coordinates value.
            location_config: (Block List) (see below for nested schema)
            longitude: (Number) The longitude coordinates value.
            machine_pool: '(Block List, Min: 1) The machine pool configuration for the cluster. (see below for nested schema)'
            manifest: (Block List) (see below for nested schema)
            name: (String) The name of the cluster.
            namespace: (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            namespaces: (Block List) The namespaces for the cluster. (see below for nested schema)
            node_pool_config: (String) The values of the node pool config. The values are specified in YAML format.
            os_patch_after: '(String) Date and time after which to patch cluster RFC3339: 2006-01-02T15:04:05Z07:00'
            os_patch_on_boot: (Boolean) Whether to apply OS patch on boot. Default is false.
            os_patch_schedule: '(String) The cron schedule for OS patching. This must be in the form of cron syntax. Ex: 0 0 * * *.'
            pack: (Block List) For packs of type spectro, helm, and manifest, at least one pack must be specified. (see below for nested schema)
            pause_agent_upgrades: (String) The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is unlock, meaning upgrades occur automatically. Setting it to lock pauses automatic agent upgrades for the cluster.
            penetration_scan_schedule: (String) The schedule for penetration scan.
            prefix: (String) Prefix for the backup name. The backup name will be of the format --.
            region_code: (String) The region code of where the cluster is located in.
            region_name: (String) The name of the region.
            registry_uid: (String) The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name.
            resource_allocation: '(Map of String) Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, {cpu_cores: ''2'', memory_MiB: ''2048''}'
            role: (Map of String) The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            scan_policy: '(Block List, Max: 1) The scan policy for the cluster. (see below for nested schema)'
            schedule: (String) The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to 0 1 * * *.
            skip_completion: (Boolean) If true, the cluster will be created asynchronously. Default value is false.
            subjects: (Block List) (see below for nested schema)
            tag: (String) The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is spectro or helm.
            tags: (Set of String) A list of tags to be applied to the cluster. Tags must be in the form of key:value.
            timeouts: (Block, Optional) (see below for nested schema)
            type: (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
            uid: (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry.
            update: (String)
            values: (String) The values of the cloud config. The values are specified in YAML format.
            variables: '(Map of String) A map of cluster profile variables, specified as key-value pairs. For example: priority = "5".'
        importStatements: []
    spectrocloud_cluster_edge_native:
        subCategory: ""
        description: Resource for managing Edge Native clusters in Spectro Cloud through Palette.
        name: spectrocloud_cluster_edge_native
        title: spectrocloud_cluster_edge_native Resource - terraform-provider-spectrocloud
        examples:
            - name: cluster
              manifest: |-
                {
                  "cloud_config": [
                    {
                      "overlay_cidr_range": "100.0.0.12/12",
                      "ssh_keys": [
                        "spectro2022",
                        "spectro2023"
                      ],
                      "vip": "100.0.0.1"
                    }
                  ],
                  "cluster_profile": [
                    {
                      "id": "${data.spectrocloud_cluster_profile.profile.id}"
                    }
                  ],
                  "machine_pool": [
                    {
                      "control_plane": true,
                      "control_plane_as_worker": true,
                      "edge_host": [
                        {
                          "host_uid": "${spectrocloud_appliance.appliance0.uid}",
                          "static_ip": "4.1.2.3"
                        }
                      ],
                      "name": "cp-pool"
                    },
                    {
                      "edge_host": [
                        {
                          "dns_servers": [
                            "tf.test.com"
                          ],
                          "host_name": "test-test",
                          "host_uid": "${spectrocloud_appliance.appliance1.uid}",
                          "nic_name": "auto160",
                          "static_ip": "1.2.3.4",
                          "subnet_mask": "2.2.1.0"
                        }
                      ],
                      "name": "worker-pool"
                    }
                  ],
                  "name": "edge-native-example",
                  "skip_completion": true
                }
              references:
                cluster_profile.id: data.spectrocloud_cluster_profile.profile.id
                machine_pool.edge_host.host_uid: spectrocloud_appliance.appliance1.uid
        argumentDocs:
            action: '(String) The action to perform on the node. Valid values are: cordon, uncordon.'
            additional_labels: (Map of String)
            admin_kube_config: (String) Admin Kube-config for the cluster. This can be used to connect to the cluster using kubectl, With admin privilege.
            apply_setting: (String) The setting to apply the cluster profile. DownloadAndInstall will download and install packs in one action. DownloadAndInstallLater will only download artifact and postpone install for later. Default value is DownloadAndInstall.
            backup_location_id: (String) The ID of the backup location to use for the backup.
            backup_policy: '(Block List, Max: 1) The backup policy for the cluster. If not specified, no backups will be taken. (see below for nested schema)'
            cloud_account_id: (String)
            cloud_config: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            cloud_config_id: (String, Deprecated) ID of the cloud config used for the cluster. This cloud config must be of type azure.
            cluster_meta_attribute: '(String) cluster_meta_attribute can be used to set additional cluster metadata information, eg {''nic_name'': ''test'', ''env'': ''stage''}'
            cluster_profile: (Block List) (see below for nested schema)
            cluster_rbac_binding: (Block List) The RBAC binding for the cluster. (see below for nested schema)
            cluster_uids: (Set of String) The list of cluster UIDs to include in the backup. If include_all_clusters is set to true, then all clusters will be included.
            configuration_scan_schedule: (String) The schedule for configuration scan.
            conformance_scan_schedule: (String) The schedule for conformance scan.
            content: (String) The content of the manifest. The content is the YAML content of the manifest.
            context: (String) The context of the Edge cluster. Allowed values are project or tenant. Default is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            control_plane: (Boolean) Whether this machine pool is a control plane. Defaults to false.
            control_plane_as_worker: (Boolean) Whether this machine pool is a control plane and a worker. Defaults to false.
            country_code: (String) The country code of the country the cluster is located in.
            country_name: (String) The name of the country.
            create: (String)
            default_gateway: (String) Edge host default gateway
            delete: (String)
            description: (String) The description of the cluster. Default value is empty string.
            dns_servers: (Set of String) Edge host DNS servers
            edge_host: '(Block List, Min: 1) (see below for nested schema)'
            effect: '(String) The effect of the taint. Allowed values are: NoSchedule, PreferNoSchedule or NoExecute.'
            expiry_in_hour: (Number) The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
            external_traffic_policy: (String) The external traffic policy for the cluster.
            force_delete: (Boolean) If set to true, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
            force_delete_delay: (Number) Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
            host_config: (Block List) The host configuration for the cluster. (see below for nested schema)
            host_endpoint_type: (String) The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
            host_name: (String) Edge host name
            host_uid: (String) Edge host id
            id: (String) The ID of this resource.
            images_blacklist: (List of String) List of images to disallow for the namespace. For example, ['nginx:latest', 'redis:latest']
            include_all_clusters: (Boolean) Whether to include all clusters in the backup. If set to false, only the clusters specified in cluster_uids will be included.
            include_cluster_resources: '(Boolean) Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)'
            include_cluster_resources_mode: (String) Specifies whether to include the cluster resources in the backup. Supported values are always, never, and auto.
            include_disks: (Boolean) Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
            ingress_host: (String) The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
            is_two_node_cluster: (Boolean) Set to true to enable a two-node cluster.
            key: (String) The key of the taint.
            kubeconfig: (String) Kubeconfig for the cluster. This can be used to connect to the cluster using kubectl.
            latitude: (Number) The latitude coordinates value.
            load_balancer_source_ranges: (String) The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
            location_config: (Block List) (see below for nested schema)
            longitude: (Number) The longitude coordinates value.
            machine_pool: '(Block Set, Min: 1) (see below for nested schema)'
            manifest: (Block List) (see below for nested schema)
            name: (String)
            namespace: (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            namespaces: (Block List) The namespaces for the cluster. (see below for nested schema)
            nic_name: (String) NIC Name for edge host.
            node: (Block List) (see below for nested schema)
            node_id: (String) The node_id of the node, For example i-07f899a33dee624f7
            node_repave_interval: (Number) Minimum number of seconds node should be Ready, before the next node is selected for repave. Default value is 0, Applicable only for worker pools.
            ntp_servers: (Set of String) A list of NTP servers to be used by the cluster.
            os_patch_after: '(String) Date and time after which to patch cluster RFC3339: 2006-01-02T15:04:05Z07:00'
            os_patch_on_boot: (Boolean) Whether to apply OS patch on boot. Default is false.
            os_patch_schedule: '(String) The cron schedule for OS patching. This must be in the form of cron syntax. Ex: 0 0 * * *.'
            overlay_cidr_range: (String) The Overlay (VPN) creates a virtual network, using techniques like VxLAN. It overlays the existing network infrastructure, enhancing connectivity either at Layer 2 or Layer 3, making it flexible and adaptable for various needs. For example, 100.64.192.0/24
            pack: (Block List) For packs of type spectro, helm, and manifest, at least one pack must be specified. (see below for nested schema)
            pause_agent_upgrades: (String) The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is unlock, meaning upgrades occur automatically. Setting it to lock pauses automatic agent upgrades for the cluster.
            penetration_scan_schedule: (String) The schedule for penetration scan.
            prefix: (String) Prefix for the backup name. The backup name will be of the format --.
            region_code: (String) The region code of where the cluster is located in.
            region_name: (String) The name of the region.
            registry_uid: (String) The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name.
            resource_allocation: '(Map of String) Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, {cpu_cores: ''2'', memory_MiB: ''2048''}'
            review_repave_state: (String) To authorize the cluster repave, set the value to Approved for approval and "" to decline. Default value is "".
            role: (Map of String) The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            scan_policy: '(Block List, Max: 1) The scan policy for the cluster. (see below for nested schema)'
            schedule: (String) The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to 0 1 * * *.
            skip_completion: (Boolean) If true, the cluster will be created asynchronously. Default value is false.
            ssh_keys: (Set of String) List of public SSH (Secure Shell) to establish, administer, and communicate with remote clusters.
            static_ip: (String) Edge host static IP address
            subjects: (Block List) (see below for nested schema)
            subnet_mask: (String) Edge host subnet mask
            tag: (String) The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is spectro or helm.
            tags: (Set of String) A list of tags to be applied to the cluster. Tags must be in the form of key:value.
            taints: (Block List) (see below for nested schema)
            timeouts: (Block, Optional) (see below for nested schema)
            two_node_role: (String) Two node role for edge host. Valid values are primary and secondary.
            type: (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
            uid: (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry.
            update: (String)
            update_strategy: (String) Update strategy for the machine pool. Valid values are RollingUpdateScaleOut and RollingUpdateScaleIn.
            value: (String) The value of the taint.
            values: (String) The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
            variables: '(Map of String) A map of cluster profile variables, specified as key-value pairs. For example: priority = "5".'
            vip: (String) The vip can be specified as either an IP address or a fully qualified domain name (FQDN). If overlay_cidr_range is set, the vip should be within the specified overlay_cidr_range. By default, the vip is set to the first IP address within the given overlay_cidr_range.
        importStatements: []
    spectrocloud_cluster_edge_vsphere Resource - terraform-provider-spectrocloud:
        subCategory: ""
        name: spectrocloud_cluster_edge_vsphere Resource - terraform-provider-spectrocloud
        title: spectrocloud_cluster_edge_vsphere Resource - terraform-provider-spectrocloud
        argumentDocs:
            action: '(String) The action to perform on the node. Valid values are: cordon, uncordon.'
            additional_labels: (Map of String)
            admin_kube_config: (String) Admin Kube-config for the cluster. This can be used to connect to the cluster using kubectl, With admin privilege.
            backup_location_id: (String) The ID of the backup location to use for the backup.
            backup_policy: '(Block List, Max: 1) The backup policy for the cluster. If not specified, no backups will be taken. (see below for nested schema)'
            cloud_config: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            cloud_config_id: (String, Deprecated) ID of the cloud config used for the cluster. This cloud config must be of type azure.
            cluster: (String)
            cluster_meta_attribute: '(String) cluster_meta_attribute can be used to set additional cluster metadata information, eg {''nic_name'': ''test'', ''env'': ''stage''}'
            cluster_profile: (Block List) (see below for nested schema)
            cluster_rbac_binding: (Block List) The RBAC binding for the cluster. (see below for nested schema)
            cluster_uids: (Set of String) The list of cluster UIDs to include in the backup. If include_all_clusters is set to true, then all clusters will be included.
            configuration_scan_schedule: (String) The schedule for configuration scan.
            conformance_scan_schedule: (String) The schedule for conformance scan.
            content: (String) The content of the manifest. The content is the YAML content of the manifest.
            context: (String) The context of the Edge cluster. Allowed values are project or tenant. Default is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            control_plane: (Boolean) Whether this machine pool is a control plane. Defaults to false.
            control_plane_as_worker: (Boolean) Whether this machine pool is a control plane and a worker. Defaults to false.
            count: (Number) Number of nodes in the machine pool.
            country_code: (String) The country code of the country the cluster is located in.
            country_name: (String) The name of the country.
            cpu: (Number)
            create: (String)
            datacenter: (String)
            datastore: (String)
            delete: (String)
            description: (String) The description of the cluster. Default value is empty string.
            disk_size_gb: (Number)
            edge_host_uid: (String)
            effect: '(String) The effect of the taint. Allowed values are: NoSchedule, PreferNoSchedule or NoExecute.'
            expiry_in_hour: (Number) The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
            external_traffic_policy: (String) The external traffic policy for the cluster.
            folder: (String)
            force_delete: (Boolean) If set to true, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
            force_delete_delay: (Number) Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
            host_config: (Block List) The host configuration for the cluster. (see below for nested schema)
            host_endpoint_type: (String) The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
            id: (String) The ID of this resource.
            image_template_folder: (String)
            images_blacklist: (List of String) List of images to disallow for the namespace. For example, ['nginx:latest', 'redis:latest']
            include_all_clusters: (Boolean) Whether to include all clusters in the backup. If set to false, only the clusters specified in cluster_uids will be included.
            include_cluster_resources: '(Boolean) Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)'
            include_cluster_resources_mode: (String) Specifies whether to include the cluster resources in the backup. Supported values are always, never, and auto.
            include_disks: (Boolean) Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
            ingress_host: (String) The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
            instance_type: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            key: (String) The key of the taint.
            kubeconfig: (String) Kubeconfig for the cluster. This can be used to connect to the cluster using kubectl.
            latitude: (Number) The latitude coordinates value.
            load_balancer_source_ranges: (String) The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
            location_config: (Block List) (see below for nested schema)
            longitude: (Number) The longitude coordinates value.
            machine_pool: '(Block List, Min: 1) (see below for nested schema)'
            manifest: (Block List) (see below for nested schema)
            memory_mb: (Number)
            name: (String)
            namespace: (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            namespaces: (Block List) The namespaces for the cluster. (see below for nested schema)
            network: (String)
            network_search_domain: (String)
            network_type: (String)
            node: (Block List) (see below for nested schema)
            node_id: (String) The node_id of the node, For example i-07f899a33dee624f7
            node_repave_interval: (Number) Minimum number of seconds node should be Ready, before the next node is selected for repave. Default value is 0, Applicable only for worker pools.
            os_patch_after: '(String) Date and time after which to patch cluster RFC3339: 2006-01-02T15:04:05Z07:00'
            os_patch_on_boot: (Boolean) Whether to apply OS patch on boot. Default is false.
            os_patch_schedule: (String) Cron schedule for OS patching. This must be in the form of 0 0 * * *.
            pack: (Block List) For packs of type spectro, helm, and manifest, at least one pack must be specified. (see below for nested schema)
            pause_agent_upgrades: (String) The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is unlock, meaning upgrades occur automatically. Setting it to lock pauses automatic agent upgrades for the cluster.
            penetration_scan_schedule: (String) The schedule for penetration scan.
            placement: '(Block List, Min: 1) (see below for nested schema)'
            prefix: (String) Prefix for the backup name. The backup name will be of the format --.
            region_code: (String) The region code of where the cluster is located in.
            region_name: (String) The name of the region.
            registry_uid: (String) The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name.
            resource_allocation: '(Map of String) Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, {cpu_cores: ''2'', memory_MiB: ''2048''}'
            resource_pool: (String)
            review_repave_state: (String) To authorize the cluster repave, set the value to Approved for approval and "" to decline. Default value is "".
            role: (Map of String) The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            scan_policy: '(Block List, Max: 1) The scan policy for the cluster. (see below for nested schema)'
            schedule: (String) The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to 0 1 * * *.
            skip_completion: (Boolean) If true, the cluster will be created asynchronously. Default value is false.
            ssh_key: (String) Public SSH Key (Secure Shell) to establish, administer, and communicate with remote clusters, ssh_key & ssh_keys are mutually exclusive.
            ssh_keys: (Set of String) List of public SSH (Secure Shell) keys to establish, administer, and communicate with remote clusters, ssh_key & ssh_keys are mutually exclusive.
            static_ip: (Boolean)
            static_ip_pool_id: (String)
            subjects: (Block List) (see below for nested schema)
            tag: (String) The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is spectro or helm.
            tags: (Set of String) A list of tags to be applied to the cluster. Tags must be in the form of key:value.
            taints: (Block List) (see below for nested schema)
            timeouts: (Block, Optional) (see below for nested schema)
            type: (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
            uid: (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry.
            update: (String)
            update_strategy: (String) Update strategy for the machine pool. Valid values are RollingUpdateScaleOut and RollingUpdateScaleIn.
            value: (String) The value of the taint.
            values: (String) The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
            variables: '(Map of String) A map of cluster profile variables, specified as key-value pairs. For example: priority = "5".'
            vip: (String)
        importStatements: []
    spectrocloud_cluster_eks:
        subCategory: ""
        description: Resource for managing EKS clusters in Spectro Cloud through Palette.
        name: spectrocloud_cluster_eks
        title: spectrocloud_cluster_eks Resource - terraform-provider-spectrocloud
        examples:
            - name: cluster
              manifest: |-
                {
                  "backup_policy": [
                    {
                      "backup_location_id": "${data.spectrocloud_backup_storage_location.bsl.id}",
                      "expiry_in_hour": 7200,
                      "include_cluster_resources": true,
                      "include_disks": true,
                      "prefix": "prod-backup",
                      "schedule": "0 0 * * SUN"
                    }
                  ],
                  "cloud_account_id": "${data.spectrocloud_cloudaccount_aws.account.id}",
                  "cloud_config": [
                    {
                      "region": "us-west-2",
                      "ssh_key_name": "default"
                    }
                  ],
                  "cluster_profile": [
                    {
                      "id": "${data.spectrocloud_cluster_profile.profile.id}"
                    }
                  ],
                  "machine_pool": [
                    {
                      "az_subnets": {
                        "us-west-2a": "subnet-0d4978ddbff16c"
                      },
                      "count": 1,
                      "disk_size_gb": 60,
                      "encryption_config_arn": "arn:aws:kms:us-west-2:123456789012:key/1234abcd-12ab-34cd-56ef-1234567890ab",
                      "instance_type": "t3.large",
                      "name": "worker-basic"
                    }
                  ],
                  "name": "${var.cluster_name}",
                  "scan_policy": [
                    {
                      "configuration_scan_schedule": "0 0 * * SUN",
                      "conformance_scan_schedule": "0 0 1 * *",
                      "penetration_scan_schedule": "0 0 * * SUN"
                    }
                  ],
                  "tags": [
                    "dev",
                    "department:devops",
                    "owner:bob"
                  ]
                }
              references:
                backup_policy.backup_location_id: data.spectrocloud_backup_storage_location.bsl.id
                cloud_account_id: data.spectrocloud_cloudaccount_aws.account.id
                cluster_profile.id: data.spectrocloud_cluster_profile.profile.id
                name: var.cluster_name
        argumentDocs:
            action: '(String) The action to perform on the node. Valid values are: cordon, uncordon.'
            additional_labels: (Map of String)
            additional_security_groups: (Set of String) Additional security groups to attach to the instance.
            additional_tags: (Map of String)
            admin_kube_config: (String) Admin Kube-config for the cluster. This can be used to connect to the cluster using kubectl, With admin privilege.
            ami_id: (String) The ID of the custom Amazon Machine Image (AMI).
            apply_setting: (String) The setting to apply the cluster profile. DownloadAndInstall will download and install packs in one action. DownloadAndInstallLater will only download artifact and postpone install for later. Default value is DownloadAndInstall.
            az_subnets: (Map of String) Mutually exclusive with azs. Use for Static provisioning.
            azs: (List of String) Mutually exclusive with az_subnets. Use for Dynamic provisioning.
            backup_location_id: (String) The ID of the backup location to use for the backup.
            backup_policy: '(Block List, Max: 1) The backup policy for the cluster. If not specified, no backups will be taken. (see below for nested schema)'
            capacity_type: (String) Capacity type is an instance type,  can be 'on-demand' or 'spot'. Defaults to 'on-demand'.
            cloud_account_id: (String) The AWS cloud account id to use for this cluster.
            cloud_config: '(Block List, Min: 1, Max: 1) The AWS environment configuration settings such as network parameters and encryption parameters that apply to this cluster. (see below for nested schema)'
            cloud_config_id: (String, Deprecated) ID of the cloud config used for the cluster. This cloud config must be of type azure.
            cluster_meta_attribute: '(String) cluster_meta_attribute can be used to set additional cluster metadata information, eg {''nic_name'': ''test'', ''env'': ''stage''}'
            cluster_profile: (Block List) (see below for nested schema)
            cluster_rbac_binding: (Block List) The RBAC binding for the cluster. (see below for nested schema)
            cluster_uids: (Set of String) The list of cluster UIDs to include in the backup. If include_all_clusters is set to true, then all clusters will be included.
            configuration_scan_schedule: (String) The schedule for configuration scan.
            conformance_scan_schedule: (String) The schedule for conformance scan.
            content: (String) The content of the manifest. The content is the YAML content of the manifest.
            context: (String) The context of the EKS cluster. Allowed values are project or tenant. Default is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            count: (Number) Number of nodes in the machine pool.
            country_code: (String)
            country_name: (String)
            create: (String)
            delete: (String)
            description: (String) The description of the cluster. Default value is empty string.
            disk_size_gb: (Number)
            effect: '(String) The effect of the taint. Allowed values are: NoSchedule, PreferNoSchedule or NoExecute.'
            eks_launch_template: '(Block List, Max: 1) (see below for nested schema)'
            encryption_config_arn: (String) The ARN of the KMS encryption key to use for the cluster. Refer to the Enable Secrets Encryption for EKS Cluster for additional guidance.
            endpoint_access: (String) Choose between private, public, or private_and_public to define how communication is established with the endpoint for the managed Kubernetes API server and your cluster. The default value is public.
            expiry_in_hour: (Number) The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
            external_traffic_policy: (String) The external traffic policy for the cluster.
            fargate_profile: (Block List) (see below for nested schema)
            force_delete: (Boolean) If set to true, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
            force_delete_delay: (Number) Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
            host_config: (Block List) The host configuration for the cluster. (see below for nested schema)
            host_endpoint_type: (String) The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
            id: (String) The ID of this resource.
            images_blacklist: (List of String) List of images to disallow for the namespace. For example, ['nginx:latest', 'redis:latest']
            include_all_clusters: (Boolean) Whether to include all clusters in the backup. If set to false, only the clusters specified in cluster_uids will be included.
            include_cluster_resources: '(Boolean) Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)'
            include_cluster_resources_mode: (String) Specifies whether to include the cluster resources in the backup. Supported values are always, never, and auto.
            include_disks: (Boolean) Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
            ingress_host: (String) The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
            instance_type: (String)
            key: (String) The key of the taint.
            kubeconfig: (String) Kubeconfig for the cluster. This can be used to connect to the cluster using kubectl.
            labels: (Map of String)
            latitude: (Number)
            load_balancer_source_ranges: (String) The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
            location_config: (List of Object) The location of the cluster. (see below for nested schema)
            longitude: (Number)
            machine_pool: '(Block List, Min: 1) The machine pool configuration for the cluster. (see below for nested schema)'
            manifest: (Block List) (see below for nested schema)
            max: (Number) Maximum number of nodes in the machine pool. This is used for autoscaling the machine pool.
            max_price: (String)
            min: (Number) Minimum number of nodes in the machine pool. This is used for autoscaling the machine pool.
            name: (String) The name of the cluster.
            namespace: (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            namespaces: (Block List) The namespaces for the cluster. (see below for nested schema)
            node: (Block List) (see below for nested schema)
            node_id: (String) The node_id of the node, For example i-07f899a33dee624f7
            os_patch_after: '(String) Date and time after which to patch cluster RFC3339: 2006-01-02T15:04:05Z07:00'
            os_patch_on_boot: (Boolean) Whether to apply OS patch on boot. Default is false.
            os_patch_schedule: (String) Cron schedule for OS patching. This must be in the form of 0 0 * * *.
            pack: (Block List) For packs of type spectro, helm, and manifest, at least one pack must be specified. (see below for nested schema)
            pause_agent_upgrades: (String) The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is unlock, meaning upgrades occur automatically. Setting it to lock pauses automatic agent upgrades for the cluster.
            penetration_scan_schedule: (String) The schedule for penetration scan.
            prefix: (String) Prefix for the backup name. The backup name will be of the format --.
            private_access_cidrs: (Set of String) List of CIDR blocks that define the allowed private access to the resource. Only requests originating from addresses within these CIDR blocks will be permitted to access the resource.
            public_access_cidrs: (Set of String) List of CIDR blocks that define the allowed public access to the resource. Requests originating from addresses within these CIDR blocks will be permitted to access the resource. All other addresses will be denied access.
            region: (String)
            region_code: (String)
            region_name: (String)
            registry_uid: (String) The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name.
            resource_allocation: '(Map of String) Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, {cpu_cores: ''2'', memory_MiB: ''2048''}'
            review_repave_state: (String) To authorize the cluster repave, set the value to Approved for approval and "" to decline. Default value is "".
            role: (Map of String) The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            root_volume_iops: (Number) The number of input/output operations per second (IOPS) for the root volume.
            root_volume_throughput: (Number) The throughput of the root volume in MiB/s.
            root_volume_type: (String) The type of the root volume.
            scan_policy: '(Block List, Max: 1) The scan policy for the cluster. (see below for nested schema)'
            schedule: (String) The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to 0 1 * * *.
            selector: '(Block List, Min: 1) (see below for nested schema)'
            skip_completion: (Boolean) If true, the cluster will be created asynchronously. Default value is false.
            ssh_key_name: (String) Public SSH key to be used for the cluster nodes.
            subjects: (Block List) (see below for nested schema)
            subnets: (List of String)
            tag: (String) The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is spectro or helm.
            tags: (Set of String) A list of tags to be applied to the cluster. Tags must be in the form of key:value.
            taints: (Block List) (see below for nested schema)
            timeouts: (Block, Optional) (see below for nested schema)
            type: (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
            uid: (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry.
            update: (String)
            update_strategy: (String) Update strategy for the machine pool. Valid values are RollingUpdateScaleOut and RollingUpdateScaleIn.
            value: (String) The value of the taint.
            values: (String) The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
            variables: '(Map of String) A map of cluster profile variables, specified as key-value pairs. For example: priority = "5".'
            vpc_id: (String)
        importStatements: []
    spectrocloud_cluster_gcp:
        subCategory: ""
        description: Resource for managing GCP clusters in Spectro Cloud through Palette.
        name: spectrocloud_cluster_gcp
        title: spectrocloud_cluster_gcp Resource - terraform-provider-spectrocloud
        examples:
            - name: cluster
              manifest: |-
                {
                  "cloud_account_id": "${data.spectrocloud_cloudaccount_gcp.account.id}",
                  "cloud_config": [
                    {
                      "network": "${var.gcp_network}",
                      "project": "${var.gcp_project}",
                      "region": "${var.gcp_region}"
                    }
                  ],
                  "cluster_profile": [
                    {
                      "id": "${data.spectrocloud_cluster_profile.profile.id}"
                    }
                  ],
                  "machine_pool": [
                    {
                      "azs": [
                        "us-west3-a"
                      ],
                      "control_plane": true,
                      "control_plane_as_worker": true,
                      "count": 1,
                      "disk_size_gb": 62,
                      "instance_type": "e2-standard-2",
                      "name": "cp-pool"
                    },
                    {
                      "azs": [
                        "us-west3-a"
                      ],
                      "count": 1,
                      "instance_type": "e2-standard-2",
                      "name": "worker-basic"
                    }
                  ],
                  "name": "${var.cluster_name}",
                  "tags": [
                    "dev",
                    "department:devops",
                    "owner:bob"
                  ]
                }
              references:
                cloud_account_id: data.spectrocloud_cloudaccount_gcp.account.id
                cloud_config.network: var.gcp_network
                cloud_config.project: var.gcp_project
                cloud_config.region: var.gcp_region
                cluster_profile.id: data.spectrocloud_cluster_profile.profile.id
                name: var.cluster_name
        argumentDocs:
            action: '(String) The action to perform on the node. Valid values are: cordon, uncordon.'
            additional_labels: (Map of String)
            admin_kube_config: (String) Admin Kube-config for the cluster. This can be used to connect to the cluster using kubectl, With admin privilege.
            apply_setting: (String) The setting to apply the cluster profile. DownloadAndInstall will download and install packs in one action. DownloadAndInstallLater will only download artifact and postpone install for later. Default value is DownloadAndInstall.
            azs: (Set of String)
            backup_location_id: (String) The ID of the backup location to use for the backup.
            backup_policy: '(Block List, Max: 1) The backup policy for the cluster. If not specified, no backups will be taken. (see below for nested schema)'
            cloud_account_id: (String)
            cloud_config: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            cloud_config_id: (String, Deprecated) ID of the cloud config used for the cluster. This cloud config must be of type azure.
            cluster_meta_attribute: '(String) cluster_meta_attribute can be used to set additional cluster metadata information, eg {''nic_name'': ''test'', ''env'': ''stage''}'
            cluster_profile: (Block List) (see below for nested schema)
            cluster_rbac_binding: (Block List) The RBAC binding for the cluster. (see below for nested schema)
            cluster_uids: (Set of String) The list of cluster UIDs to include in the backup. If include_all_clusters is set to true, then all clusters will be included.
            configuration_scan_schedule: (String) The schedule for configuration scan.
            conformance_scan_schedule: (String) The schedule for conformance scan.
            content: (String) The content of the manifest. The content is the YAML content of the manifest.
            context: (String) The context of the GCP cluster. Allowed values are project or tenant. Default is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            control_plane: (Boolean) Whether this machine pool is a control plane. Defaults to false.
            control_plane_as_worker: (Boolean) Whether this machine pool is a control plane and a worker. Defaults to false.
            count: (Number) Number of nodes in the machine pool.
            country_code: (String)
            country_name: (String)
            create: (String)
            delete: (String)
            description: (String) The description of the cluster. Default value is empty string.
            disk_size_gb: (Number)
            effect: '(String) The effect of the taint. Allowed values are: NoSchedule, PreferNoSchedule or NoExecute.'
            expiry_in_hour: (Number) The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
            external_traffic_policy: (String) The external traffic policy for the cluster.
            force_delete: (Boolean) If set to true, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
            force_delete_delay: (Number) Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
            host_config: (Block List) The host configuration for the cluster. (see below for nested schema)
            host_endpoint_type: (String) The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
            id: (String) The ID of this resource.
            images_blacklist: (List of String) List of images to disallow for the namespace. For example, ['nginx:latest', 'redis:latest']
            include_all_clusters: (Boolean) Whether to include all clusters in the backup. If set to false, only the clusters specified in cluster_uids will be included.
            include_cluster_resources: '(Boolean) Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)'
            include_cluster_resources_mode: (String) Specifies whether to include the cluster resources in the backup. Supported values are always, never, and auto.
            include_disks: (Boolean) Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
            ingress_host: (String) The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
            instance_type: (String)
            key: (String) The key of the taint.
            kubeconfig: (String) Kubeconfig for the cluster. This can be used to connect to the cluster using kubectl.
            latitude: (Number)
            load_balancer_source_ranges: (String) The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
            location_config: (List of Object) The location of the cluster. (see below for nested schema)
            longitude: (Number)
            machine_pool: '(Block Set, Min: 1) (see below for nested schema)'
            manifest: (Block List) (see below for nested schema)
            name: (String)
            namespace: (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            namespaces: (Block List) The namespaces for the cluster. (see below for nested schema)
            network: (String)
            node: (Block List) (see below for nested schema)
            node_id: (String) The node_id of the node, For example i-07f899a33dee624f7
            node_repave_interval: (Number) Minimum number of seconds node should be Ready, before the next node is selected for repave. Default value is 0, Applicable only for worker pools.
            os_patch_after: '(String) Date and time after which to patch cluster RFC3339: 2006-01-02T15:04:05Z07:00'
            os_patch_on_boot: (Boolean) Whether to apply OS patch on boot. Default is false.
            os_patch_schedule: (String) Cron schedule for OS patching. This must be in the form of 0 0 * * *.
            pack: (Block List) For packs of type spectro, helm, and manifest, at least one pack must be specified. (see below for nested schema)
            pause_agent_upgrades: (String) The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is unlock, meaning upgrades occur automatically. Setting it to lock pauses automatic agent upgrades for the cluster.
            penetration_scan_schedule: (String) The schedule for penetration scan.
            prefix: (String) Prefix for the backup name. The backup name will be of the format --.
            project: (String)
            region: (String)
            region_code: (String)
            region_name: (String)
            registry_uid: (String) The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name.
            resource_allocation: '(Map of String) Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, {cpu_cores: ''2'', memory_MiB: ''2048''}'
            review_repave_state: (String) To authorize the cluster repave, set the value to Approved for approval and "" to decline. Default value is "".
            role: (Map of String) The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            scan_policy: '(Block List, Max: 1) The scan policy for the cluster. (see below for nested schema)'
            schedule: (String) The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to 0 1 * * *.
            skip_completion: (Boolean) If true, the cluster will be created asynchronously. Default value is false.
            subjects: (Block List) (see below for nested schema)
            tag: (String) The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is spectro or helm.
            tags: (Set of String) A list of tags to be applied to the cluster. Tags must be in the form of key:value.
            taints: (Block List) (see below for nested schema)
            timeouts: (Block, Optional) (see below for nested schema)
            type: (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
            uid: (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry.
            update: (String)
            update_strategy: (String) Update strategy for the machine pool. Valid values are RollingUpdateScaleOut and RollingUpdateScaleIn.
            value: (String) The value of the taint.
            values: (String) The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
            variables: '(Map of String) A map of cluster profile variables, specified as key-value pairs. For example: priority = "5".'
        importStatements: []
    spectrocloud_cluster_gke:
        subCategory: ""
        description: Resource for managing GKE clusters through Palette.
        name: spectrocloud_cluster_gke
        title: spectrocloud_cluster_gke Resource - terraform-provider-spectrocloud
        examples:
            - name: cluster
              manifest: |-
                {
                  "cloud_account_id": "${data.spectrocloud_cloudaccount_gcp.account.id}",
                  "cloud_config": [
                    {
                      "project": "${var.gcp_project}",
                      "region": "${var.gcp_region}"
                    }
                  ],
                  "cluster_profile": [
                    {
                      "id": "${data.spectrocloud_cluster_profile.profile.id}"
                    }
                  ],
                  "context": "project",
                  "description": "Gke Cluster",
                  "machine_pool": [
                    {
                      "count": 3,
                      "instance_type": "n2-standard-4",
                      "name": "worker-basic"
                    }
                  ],
                  "name": "${var.cluster_name}",
                  "tags": [
                    "dev",
                    "department:pax"
                  ],
                  "update_worker_pool_in_parallel": true
                }
              references:
                cloud_account_id: data.spectrocloud_cloudaccount_gcp.account.id
                cloud_config.project: var.gcp_project
                cloud_config.region: var.gcp_region
                cluster_profile.id: data.spectrocloud_cluster_profile.profile.id
                name: var.cluster_name
        argumentDocs:
            action: '(String) The action to perform on the node. Valid values are: cordon, uncordon.'
            additional_labels: (Map of String)
            admin_kube_config: (String) Admin Kube-config for the cluster. This can be used to connect to the cluster using kubectl, With admin privilege.
            apply_setting: (String) The setting to apply the cluster profile. DownloadAndInstall will download and install packs in one action. DownloadAndInstallLater will only download artifact and postpone install for later. Default value is DownloadAndInstall.
            backup_location_id: (String) The ID of the backup location to use for the backup.
            backup_policy: '(Block List, Max: 1) The backup policy for the cluster. If not specified, no backups will be taken. (see below for nested schema)'
            cloud_account_id: (String)
            cloud_config: '(Block List, Min: 1, Max: 1) The GKE environment configuration settings such as project parameters and region parameters that apply to this cluster. (see below for nested schema)'
            cloud_config_id: (String, Deprecated) ID of the cloud config used for the cluster. This cloud config must be of type azure.
            cluster_meta_attribute: '(String) cluster_meta_attribute can be used to set additional cluster metadata information, eg {''nic_name'': ''test'', ''env'': ''stage''}'
            cluster_profile: (Block List) (see below for nested schema)
            cluster_rbac_binding: (Block List) The RBAC binding for the cluster. (see below for nested schema)
            cluster_uids: (Set of String) The list of cluster UIDs to include in the backup. If include_all_clusters is set to true, then all clusters will be included.
            configuration_scan_schedule: (String) The schedule for configuration scan.
            conformance_scan_schedule: (String) The schedule for conformance scan.
            content: (String) The content of the manifest. The content is the YAML content of the manifest.
            context: (String) The context of the GKE cluster. Allowed values are project or tenant. Default is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            count: (Number) Number of nodes in the machine pool.
            country_code: (String)
            country_name: (String)
            create: (String)
            delete: (String)
            description: (String) The description of the cluster. Default value is empty string.
            disk_size_gb: (Number)
            effect: '(String) The effect of the taint. Allowed values are: NoSchedule, PreferNoSchedule or NoExecute.'
            expiry_in_hour: (Number) The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
            external_traffic_policy: (String) The external traffic policy for the cluster.
            force_delete: (Boolean) If set to true, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
            force_delete_delay: (Number) Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
            host_config: (Block List) The host configuration for the cluster. (see below for nested schema)
            host_endpoint_type: (String) The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
            id: (String) The ID of this resource.
            images_blacklist: (List of String) List of images to disallow for the namespace. For example, ['nginx:latest', 'redis:latest']
            include_all_clusters: (Boolean) Whether to include all clusters in the backup. If set to false, only the clusters specified in cluster_uids will be included.
            include_cluster_resources: '(Boolean) Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)'
            include_cluster_resources_mode: (String) Specifies whether to include the cluster resources in the backup. Supported values are always, never, and auto.
            include_disks: (Boolean) Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
            ingress_host: (String) The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
            instance_type: (String)
            key: (String) The key of the taint.
            kubeconfig: (String) Kubeconfig for the cluster. This can be used to connect to the cluster using kubectl.
            latitude: (Number)
            load_balancer_source_ranges: (String) The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
            location_config: (List of Object) The location of the cluster. (see below for nested schema)
            longitude: (Number)
            machine_pool: '(Block List, Min: 1) The machine pool configuration for the cluster. (see below for nested schema)'
            manifest: (Block List) (see below for nested schema)
            name: (String) The name of the cluster.
            namespace: (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            namespaces: (Block List) The namespaces for the cluster. (see below for nested schema)
            node: (Block List) (see below for nested schema)
            node_id: (String) The node_id of the node, For example i-07f899a33dee624f7
            os_patch_after: '(String) Date and time after which to patch cluster RFC3339: 2006-01-02T15:04:05Z07:00'
            os_patch_on_boot: (Boolean) Whether to apply OS patch on boot. Default is false.
            os_patch_schedule: (String) Cron schedule for OS patching. This must be in the form of 0 0 * * *.
            pack: (Block List) For packs of type spectro, helm, and manifest, at least one pack must be specified. (see below for nested schema)
            pause_agent_upgrades: (String) The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is unlock, meaning upgrades occur automatically. Setting it to lock pauses automatic agent upgrades for the cluster.
            penetration_scan_schedule: (String) The schedule for penetration scan.
            prefix: (String) Prefix for the backup name. The backup name will be of the format --.
            project: (String) GCP project name.
            region: (String)
            region_code: (String)
            region_name: (String)
            registry_uid: (String) The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name.
            resource_allocation: '(Map of String) Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, {cpu_cores: ''2'', memory_MiB: ''2048''}'
            review_repave_state: (String) To authorize the cluster repave, set the value to Approved for approval and "" to decline. Default value is "".
            role: (Map of String) The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            scan_policy: '(Block List, Max: 1) The scan policy for the cluster. (see below for nested schema)'
            schedule: (String) The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to 0 1 * * *.
            skip_completion: (Boolean) If true, the cluster will be created asynchronously. Default value is false.
            subjects: (Block List) (see below for nested schema)
            tag: (String) The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is spectro or helm.
            tags: (Set of String) A list of tags to be applied to the cluster. Tags must be in the form of key:value.
            taints: (Block List) (see below for nested schema)
            timeouts: (Block, Optional) (see below for nested schema)
            type: (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
            uid: (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry.
            update: (String)
            update_strategy: (String) Update strategy for the machine pool. Valid values are RollingUpdateScaleOut and RollingUpdateScaleIn.
            update_worker_pool_in_parallel: (Boolean)
            value: (String) The value of the taint.
            values: (String) The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
            variables: '(Map of String) A map of cluster profile variables, specified as key-value pairs. For example: priority = "5".'
        importStatements: []
    spectrocloud_cluster_group:
        subCategory: ""
        name: spectrocloud_cluster_group
        title: spectrocloud_cluster_group Resource - terraform-provider-spectrocloud
        examples:
            - name: cg
              manifest: |-
                {
                  "clusters": [
                    {
                      "cluster_uid": "${data.spectrocloud_cluster.host_cluster0.id}",
                      "host": "*.test.com"
                    },
                    {
                      "cluster_uid": "${data.spectrocloud_cluster.host_cluster1.id}",
                      "host": "*"
                    }
                  ],
                  "config": [
                    {
                      "cpu_millicore": 6000,
                      "host_endpoint_type": "LoadBalancer",
                      "memory_in_mb": 8192,
                      "oversubscription_percent": 120,
                      "storage_in_gb": 10
                    }
                  ],
                  "name": "cluster-group-demo"
                }
              references:
                clusters.cluster_uid: data.spectrocloud_cluster.host_cluster1.id
        argumentDocs:
            cluster_profile: (Block List) (see below for nested schema)
            cluster_uid: (String) The UID of the host cluster.
            clusters: (Block List) A list of clusters to include in the cluster group. (see below for nested schema)
            config: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            content: (String) The content of the manifest. The content is the YAML content of the manifest.
            context: (String) The context of the Cluster group. Allowed values are project or tenant. Defaults to tenant. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            cpu_millicore: (Number) The CPU limit in millicores.
            create: (String)
            delete: (String)
            description: (String) The description of the cluster. Default value is empty string.
            host_dns: (String) The host DNS wildcard for the cluster. i.e. *.dev or *test.com
            host_endpoint_type: (String) The host endpoint type. Allowed values are 'Ingress' or 'LoadBalancer'. Defaults to 'Ingress'.
            id: (String) The ID of this resource.
            k8s_distribution: (String) The Kubernetes distribution, allowed values are k3s and cncf_k8s.
            manifest: (Block List) (see below for nested schema)
            memory_in_mb: (Number) The memory limit in megabytes (MB).
            name: (String) Name of the cluster group
            oversubscription_percent: (Number) The allowed oversubscription percentage.
            pack: (Block List) For packs of type spectro, helm, and manifest, at least one pack must be specified. (see below for nested schema)
            registry_uid: (String) The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name.
            storage_in_gb: (Number) The storage limit in gigabytes (GB).
            tag: (String) The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is spectro or helm.
            tags: (Set of String) A list of tags to be applied to the cluster group. Tags must be in the form of key:value.
            timeouts: (Block, Optional) (see below for nested schema)
            type: (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
            uid: (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry.
            update: (String)
            values: (String)
            variables: '(Map of String) A map of cluster profile variables, specified as key-value pairs. For example: priority = "5".'
        importStatements: []
    spectrocloud_cluster_maas:
        subCategory: ""
        description: Resource for managing MAAS clusters in Spectro Cloud through Palette.
        name: spectrocloud_cluster_maas
        title: spectrocloud_cluster_maas Resource - terraform-provider-spectrocloud
        examples:
            - name: cluster
              manifest: |-
                {
                  "backup_policy": [
                    {
                      "backup_location_id": "${data.spectrocloud_backup_storage_location.bsl.id}",
                      "expiry_in_hour": 7200,
                      "include_cluster_resources": true,
                      "include_disks": true,
                      "prefix": "prod-backup",
                      "schedule": "0 0 * * SUN"
                    }
                  ],
                  "cloud_account_id": "${data.spectrocloud_cloudaccount_maas.account.id}",
                  "cloud_config": [
                    {
                      "domain": "maas.mycompany.com"
                    }
                  ],
                  "cluster_profile": [
                    {
                      "id": "${data.spectrocloud_cluster_profile.profile.id}"
                    }
                  ],
                  "machine_pool": [
                    {
                      "control_plane": true,
                      "count": 1,
                      "instance_type": [
                        {
                          "min_cpu": 8,
                          "min_memory_mb": 16000
                        }
                      ],
                      "name": "control-plane",
                      "placement": [
                        {
                          "resource_pool": "Production-Compute-Pool-1"
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "instance_type": [
                        {
                          "min_cpu": 8,
                          "min_memory_mb": 32000
                        }
                      ],
                      "name": "worker-basic",
                      "placement": [
                        {
                          "resource_pool": "Production-Compute-Pool-2"
                        }
                      ]
                    }
                  ],
                  "name": "${var.cluster_name}",
                  "scan_policy": [
                    {
                      "configuration_scan_schedule": "0 0 * * SUN",
                      "conformance_scan_schedule": "0 0 1 * *",
                      "penetration_scan_schedule": "0 0 * * SUN"
                    }
                  ],
                  "tags": [
                    "dev",
                    "department:devops",
                    "owner:bob"
                  ]
                }
              references:
                backup_policy.backup_location_id: data.spectrocloud_backup_storage_location.bsl.id
                cloud_account_id: data.spectrocloud_cloudaccount_maas.account.id
                cluster_profile.id: data.spectrocloud_cluster_profile.profile.id
                name: var.cluster_name
        argumentDocs:
            action: '(String) The action to perform on the node. Valid values are: cordon, uncordon.'
            additional_labels: (Map of String) Additional labels to be applied to the machine pool. Labels must be in the form of key:value.
            admin_kube_config: (String) Admin Kube-config for the cluster. This can be used to connect to the cluster using kubectl, With admin privilege.
            apply_setting: (String) The setting to apply the cluster profile. DownloadAndInstall will download and install packs in one action. DownloadAndInstallLater will only download artifact and postpone install for later. Default value is DownloadAndInstall.
            azs: (Set of String) Availability zones in which the machine pool nodes to be provisioned.
            backup_location_id: (String) The ID of the backup location to use for the backup.
            backup_policy: '(Block List, Max: 1) The backup policy for the cluster. If not specified, no backups will be taken. (see below for nested schema)'
            cloud_account_id: (String) ID of the Maas cloud account used for the cluster. This cloud account must be of type maas.
            cloud_config: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            cloud_config_id: (String, Deprecated) ID of the cloud config used for the cluster. This cloud config must be of type maas.
            cluster_meta_attribute: '(String) cluster_meta_attribute can be used to set additional cluster metadata information, eg {''nic_name'': ''test'', ''env'': ''stage''}'
            cluster_profile: (Block List) (see below for nested schema)
            cluster_rbac_binding: (Block List) The RBAC binding for the cluster. (see below for nested schema)
            cluster_uids: (Set of String) The list of cluster UIDs to include in the backup. If include_all_clusters is set to true, then all clusters will be included.
            configuration_scan_schedule: (String) The schedule for configuration scan.
            conformance_scan_schedule: (String) The schedule for conformance scan.
            content: (String) The content of the manifest. The content is the YAML content of the manifest.
            context: (String) The context of the MAAS configuration. Allowed values are project or tenant. Default is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            control_plane: (Boolean) Whether this machine pool is a control plane. Defaults to false.
            control_plane_as_worker: (Boolean) Whether this machine pool is a control plane and a worker. Defaults to false.
            count: (Number) Number of nodes in the machine pool.
            country_code: (String) The country code of the country the cluster is located in.
            country_name: (String) The name of the country.
            create: (String)
            delete: (String)
            description: (String) The description of the cluster. Default value is empty string.
            domain: (String) Domain name in which the cluster to be provisioned.
            effect: '(String) The effect of the taint. Allowed values are: NoSchedule, PreferNoSchedule or NoExecute.'
            expiry_in_hour: (Number) The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
            external_traffic_policy: (String) The external traffic policy for the cluster.
            force_delete: (Boolean) If set to true, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
            force_delete_delay: (Number) Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
            host_config: (Block List) The host configuration for the cluster. (see below for nested schema)
            host_endpoint_type: (String) The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
            id: (String) The ID of this resource.
            images_blacklist: (List of String) List of images to disallow for the namespace. For example, ['nginx:latest', 'redis:latest']
            include_all_clusters: (Boolean) Whether to include all clusters in the backup. If set to false, only the clusters specified in cluster_uids will be included.
            include_cluster_resources: '(Boolean) Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)'
            include_cluster_resources_mode: (String) Specifies whether to include the cluster resources in the backup. Supported values are always, never, and auto.
            include_disks: (Boolean) Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
            ingress_host: (String) The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
            instance_type: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            key: (String) The key of the taint.
            kubeconfig: (String) Kubeconfig for the cluster. This can be used to connect to the cluster using kubectl.
            latitude: (Number) The latitude coordinates value.
            load_balancer_source_ranges: (String) The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
            location_config: (Block List) (see below for nested schema)
            longitude: (Number) The longitude coordinates value.
            machine_pool: '(Block Set, Min: 1) (see below for nested schema)'
            manifest: (Block List) (see below for nested schema)
            max: (Number) Maximum number of nodes in the machine pool. This is used for autoscaling the machine pool.
            min: (Number) Minimum number of nodes in the machine pool. This is used for autoscaling the machine pool.
            min_cpu: (Number) Minimum number of CPU required for the machine pool node.
            min_memory_mb: (Number) Minimum memory in MB required for the machine pool node.
            name: (String) The name of the cluster.
            namespace: (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            namespaces: (Block List) The namespaces for the cluster. (see below for nested schema)
            node: (Block List) (see below for nested schema)
            node_id: (String) The node_id of the node, For example i-07f899a33dee624f7
            node_repave_interval: (Number) Minimum number of seconds node should be Ready, before the next node is selected for repave. Default value is 0, Applicable only for worker pools.
            node_tags: (Set of String) Node tags to dynamically place nodes in a pool by using MAAS automatic tags. Specify the tag values that you want to apply to all nodes in the node pool.
            os_patch_after: '(String) The date and time after which to patch the cluster. Prefix the time value with the respective RFC. Ex: RFC3339: 2006-01-02T15:04:05Z07:00'
            os_patch_on_boot: (Boolean) Whether to apply OS patch on boot. Default is false.
            os_patch_schedule: (String) Cron schedule for OS patching. This must be in the form of 0 0 * * *.
            pack: (Block List) For packs of type spectro, helm, and manifest, at least one pack must be specified. (see below for nested schema)
            pause_agent_upgrades: (String) The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is unlock, meaning upgrades occur automatically. Setting it to lock pauses automatic agent upgrades for the cluster.
            penetration_scan_schedule: (String) The schedule for penetration scan.
            placement: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            prefix: (String) Prefix for the backup name. The backup name will be of the format --.
            region_code: (String) The region code of where the cluster is located in.
            region_name: (String) The name of the region.
            registry_uid: (String) The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name.
            resource_allocation: '(Map of String) Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, {cpu_cores: ''2'', memory_MiB: ''2048''}'
            resource_pool: (String) The name of the resource pool in the Maas cloud.
            review_repave_state: (String) To authorize the cluster repave, set the value to Approved for approval and "" to decline. Default value is "".
            role: (Map of String) The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            scan_policy: '(Block List, Max: 1) The scan policy for the cluster. (see below for nested schema)'
            schedule: (String) The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to 0 1 * * *.
            skip_completion: (Boolean) If true, the cluster will be created asynchronously. Default value is false.
            subjects: (Block List) (see below for nested schema)
            tag: (String) The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is spectro or helm.
            tags: (Set of String) A list of tags to be applied to the cluster. Tags must be in the form of key:value.
            taints: (Block List) (see below for nested schema)
            timeouts: (Block, Optional) (see below for nested schema)
            type: (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
            uid: (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry.
            update: (String)
            update_strategy: (String) Update strategy for the machine pool. Valid values are RollingUpdateScaleOut and RollingUpdateScaleIn.
            value: (String) The value of the taint.
            values: (String) The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
            variables: '(Map of String) A map of cluster profile variables, specified as key-value pairs. For example: priority = "5".'
        importStatements: []
    spectrocloud_cluster_openstack:
        subCategory: ""
        description: Resource for managing Openstack clusters in Spectro Cloud through Palette.
        name: spectrocloud_cluster_openstack
        title: spectrocloud_cluster_openstack Resource - terraform-provider-spectrocloud
        examples:
            - name: cluster
              manifest: |-
                {
                  "backup_policy": [
                    {
                      "backup_location_id": "${data.spectrocloud_backup_storage_location.bsl.id}",
                      "expiry_in_hour": 7200,
                      "include_cluster_resources": true,
                      "include_disks": true,
                      "prefix": "prod-backup",
                      "schedule": "0 0 * * SUN"
                    }
                  ],
                  "cloud_account_id": "${data.spectrocloud_cloudaccount_openstack.account.id}",
                  "cloud_config": [
                    {
                      "dns_servers": [
                        "10.10.128.8",
                        "8.8.8.8"
                      ],
                      "domain": "Default",
                      "project": "dev",
                      "region": "RegionOne",
                      "ssh_key": "Spectro2021",
                      "subnet_cidr": "192.168.151.0/24"
                    }
                  ],
                  "cluster_profile": [
                    {
                      "id": "${data.spectrocloud_cluster_profile.profile.id}"
                    }
                  ],
                  "machine_pool": [
                    {
                      "azs": [
                        "zone1"
                      ],
                      "control_plane": true,
                      "control_plane_as_worker": true,
                      "count": 1,
                      "instance_type": "spectro-xlarge",
                      "name": "cp-pool"
                    },
                    {
                      "azs": [
                        "zone1"
                      ],
                      "count": 2,
                      "instance_type": "spectro-large",
                      "name": "worker-basic"
                    }
                  ],
                  "name": "openstack-piyush-tf-1",
                  "scan_policy": [
                    {
                      "configuration_scan_schedule": "0 0 * * SUN",
                      "conformance_scan_schedule": "0 0 1 * *",
                      "penetration_scan_schedule": "0 0 * * SUN"
                    }
                  ],
                  "tags": [
                    "dev"
                  ]
                }
              references:
                backup_policy.backup_location_id: data.spectrocloud_backup_storage_location.bsl.id
                cloud_account_id: data.spectrocloud_cloudaccount_openstack.account.id
                cluster_profile.id: data.spectrocloud_cluster_profile.profile.id
        argumentDocs:
            action: '(String) The action to perform on the node. Valid values are: cordon, uncordon.'
            additional_labels: (Map of String)
            admin_kube_config: (String) Admin Kube-config for the cluster. This can be used to connect to the cluster using kubectl, With admin privilege.
            apply_setting: (String) The setting to apply the cluster profile. DownloadAndInstall will download and install packs in one action. DownloadAndInstallLater will only download artifact and postpone install for later. Default value is DownloadAndInstall.
            azs: (Set of String)
            backup_location_id: (String) The ID of the backup location to use for the backup.
            backup_policy: '(Block List, Max: 1) The backup policy for the cluster. If not specified, no backups will be taken. (see below for nested schema)'
            cloud_account_id: (String)
            cloud_config: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            cloud_config_id: (String, Deprecated) ID of the cloud config used for the cluster. This cloud config must be of type azure.
            cluster_meta_attribute: '(String) cluster_meta_attribute can be used to set additional cluster metadata information, eg {''nic_name'': ''test'', ''env'': ''stage''}'
            cluster_profile: (Block List) (see below for nested schema)
            cluster_rbac_binding: (Block List) The RBAC binding for the cluster. (see below for nested schema)
            cluster_uids: (Set of String) The list of cluster UIDs to include in the backup. If include_all_clusters is set to true, then all clusters will be included.
            configuration_scan_schedule: (String) The schedule for configuration scan.
            conformance_scan_schedule: (String) The schedule for conformance scan.
            content: (String) The content of the manifest. The content is the YAML content of the manifest.
            context: (String) The context of the OpenStack cluster. Allowed values are project or tenant. Default is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            control_plane: (Boolean) Whether this machine pool is a control plane. Defaults to false.
            control_plane_as_worker: (Boolean) Whether this machine pool is a control plane and a worker. Defaults to false.
            count: (Number) Number of nodes in the machine pool.
            country_code: (String) The country code of the country the cluster is located in.
            country_name: (String) The name of the country.
            create: (String)
            delete: (String)
            description: (String) The description of the cluster. Default value is empty string.
            dns_servers: (Set of String)
            domain: (String)
            effect: '(String) The effect of the taint. Allowed values are: NoSchedule, PreferNoSchedule or NoExecute.'
            expiry_in_hour: (Number) The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
            external_traffic_policy: (String) The external traffic policy for the cluster.
            force_delete: (Boolean) If set to true, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
            force_delete_delay: (Number) Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
            host_config: (Block List) The host configuration for the cluster. (see below for nested schema)
            host_endpoint_type: (String) The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
            id: (String) The ID of this resource.
            images_blacklist: (List of String) List of images to disallow for the namespace. For example, ['nginx:latest', 'redis:latest']
            include_all_clusters: (Boolean) Whether to include all clusters in the backup. If set to false, only the clusters specified in cluster_uids will be included.
            include_cluster_resources: '(Boolean) Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)'
            include_cluster_resources_mode: (String) Specifies whether to include the cluster resources in the backup. Supported values are always, never, and auto.
            include_disks: (Boolean) Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
            ingress_host: (String) The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
            instance_type: (String)
            key: (String) The key of the taint.
            kubeconfig: (String) Kubeconfig for the cluster. This can be used to connect to the cluster using kubectl.
            latitude: (Number) The latitude coordinates value.
            load_balancer_source_ranges: (String) The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
            location_config: (Block List) (see below for nested schema)
            longitude: (Number) The longitude coordinates value.
            machine_pool: '(Block List, Min: 1) (see below for nested schema)'
            manifest: (Block List) (see below for nested schema)
            name: (String)
            namespace: (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            namespaces: (Block List) The namespaces for the cluster. (see below for nested schema)
            network_id: (String)
            node: (Block List) (see below for nested schema)
            node_id: (String) The node_id of the node, For example i-07f899a33dee624f7
            node_repave_interval: (Number) Minimum number of seconds node should be Ready, before the next node is selected for repave. Default value is 0, Applicable only for worker pools.
            os_patch_after: '(String) The date and time after which to patch the cluster. Prefix the time value with the respective RFC. Ex: RFC3339: 2006-01-02T15:04:05Z07:00'
            os_patch_on_boot: (Boolean) Whether to apply OS patch on boot. Default is false.
            os_patch_schedule: (String) Cron schedule for OS patching. This must be in the form of 0 0 * * *.
            pack: (Block List) For packs of type spectro, helm, and manifest, at least one pack must be specified. (see below for nested schema)
            pause_agent_upgrades: (String) The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is unlock, meaning upgrades occur automatically. Setting it to lock pauses automatic agent upgrades for the cluster.
            penetration_scan_schedule: (String) The schedule for penetration scan.
            prefix: (String) Prefix for the backup name. The backup name will be of the format --.
            project: (String)
            region: (String)
            region_code: (String) The region code of where the cluster is located in.
            region_name: (String) The name of the region.
            registry_uid: (String) The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name.
            resource_allocation: '(Map of String) Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, {cpu_cores: ''2'', memory_MiB: ''2048''}'
            review_repave_state: (String) To authorize the cluster repave, set the value to Approved for approval and "" to decline. Default value is "".
            role: (Map of String) The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            scan_policy: '(Block List, Max: 1) The scan policy for the cluster. (see below for nested schema)'
            schedule: (String) The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to 0 1 * * *.
            skip_completion: (Boolean) If true, the cluster will be created asynchronously. Default value is false.
            ssh_key: (String) Public SSH key to be used for the cluster nodes.
            subjects: (Block List) (see below for nested schema)
            subnet_cidr: (String)
            subnet_id: (String)
            tag: (String) The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is spectro or helm.
            tags: (Set of String) A list of tags to be applied to the cluster. Tags must be in the form of key:value.
            taints: (Block List) (see below for nested schema)
            timeouts: (Block, Optional) (see below for nested schema)
            type: (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
            uid: (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry.
            update: (String)
            update_strategy: (String) Update strategy for the machine pool. Valid values are RollingUpdateScaleOut and RollingUpdateScaleIn.
            value: (String) The value of the taint.
            values: (String) The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
            variables: '(Map of String) A map of cluster profile variables, specified as key-value pairs. For example: priority = "5".'
        importStatements: []
    spectrocloud_cluster_profile:
        subCategory: ""
        description: The Cluster Profile resource allows you to create and manage cluster profiles.
        name: spectrocloud_cluster_profile
        title: spectrocloud_cluster_profile Resource - terraform-provider-spectrocloud
        examples:
            - name: aws-profile
              manifest: |-
                {
                  "cloud": "aws",
                  "count": "${var.deploy-aws ? 1 : 0}",
                  "description": "A basic cluster profile for AWS",
                  "name": "tf-aws-profile",
                  "pack": [
                    {
                      "name": "${data.spectrocloud_pack.aws_ubuntu.name}",
                      "tag": "${data.spectrocloud_pack.aws_ubuntu.version}",
                      "uid": "${data.spectrocloud_pack.aws_ubuntu.id}",
                      "values": "${data.spectrocloud_pack.aws_ubuntu.values}"
                    },
                    {
                      "name": "${data.spectrocloud_pack.aws_k8s.name}",
                      "tag": "${data.spectrocloud_pack.aws_k8s.version}",
                      "uid": "${data.spectrocloud_pack.aws_k8s.id}",
                      "values": "${data.spectrocloud_pack.aws_k8s.values}"
                    },
                    {
                      "name": "${data.spectrocloud_pack.aws_cni.name}",
                      "tag": "${data.spectrocloud_pack.aws_cni.version}",
                      "uid": "${data.spectrocloud_pack.aws_cni.id}",
                      "values": "${data.spectrocloud_pack.aws_cni.values}"
                    },
                    {
                      "name": "${data.spectrocloud_pack.aws_csi.name}",
                      "tag": "${data.spectrocloud_pack.aws_csi.version}",
                      "uid": "${data.spectrocloud_pack.aws_csi.id}",
                      "values": "${data.spectrocloud_pack.aws_csi.values}"
                    },
                    {
                      "manifest": [
                        {
                          "content": "${file(\"manifests/hello-universe.yaml\")}",
                          "name": "hello-universe"
                        }
                      ],
                      "name": "hello-universe",
                      "tag": "1.0.0",
                      "type": "manifest",
                      "values": ""
                    }
                  ],
                  "tags": "${concat(var.tags, [\"env:aws\"])}",
                  "type": "cluster",
                  "version": "1.0.0"
                }
              references:
                pack.name: data.spectrocloud_pack.aws_csi.name
                pack.tag: data.spectrocloud_pack.aws_csi.version
                pack.uid: data.spectrocloud_pack.aws_csi.id
                pack.values: data.spectrocloud_pack.aws_csi.values
            - name: profile
              manifest: |-
                {
                  "cloud": "vsphere",
                  "description": "basic cp",
                  "name": "vsphere-picard-3",
                  "pack": [
                    {
                      "name": "ubuntu-vsphere",
                      "tag": "LTS__18.4.x",
                      "uid": "${data.spectrocloud_pack.ubuntu.id}",
                      "values": "foo: 1"
                    },
                    {
                      "name": "kubernetes",
                      "tag": "1.21.5",
                      "uid": "${data.spectrocloud_pack.k8s.id}",
                      "values": "${data.spectrocloud_pack.k8s.values}"
                    },
                    {
                      "name": "cni-calico",
                      "tag": "3.16.x",
                      "uid": "${data.spectrocloud_pack.cni.id}",
                      "values": "${data.spectrocloud_pack.cni.values}"
                    },
                    {
                      "name": "csi-vsphere-csi",
                      "tag": "2.3.x",
                      "uid": "${data.spectrocloud_pack.csi.id}",
                      "values": "${data.spectrocloud_pack.csi.values}"
                    },
                    {
                      "manifest": [
                        {
                          "content": "apiVersion: v1\nkind: Namespace\nmetadata:\n  labels:\n    app: wordpress\n    app3: wordpress786\n  name: wordpress\n",
                          "name": "manifest-namespace"
                        }
                      ],
                      "name": "manifest-namespace",
                      "type": "manifest"
                    },
                    {
                      "name": "spectro-proxy",
                      "tag": "1.0.0",
                      "uid": "60bd99ce9c10082ed8b314c9",
                      "values": "${local.proxy_val}"
                    }
                  ],
                  "tags": [
                    "dev",
                    "department:devops",
                    "owner:bob"
                  ],
                  "type": "cluster"
                }
              references:
                pack.uid: data.spectrocloud_pack.csi.id
                pack.values: local.proxy_val
            - name: this
              manifest: |-
                {
                  "dynamic": {
                    "pack": [
                      {
                        "for_each": "${var.my-packs}"
                      }
                    ]
                  },
                  "name": "security-profile"
                }
              references:
                dynamic.for_each: var.my-packs
            - name: profile
              manifest: |-
                {
                  "cloud": "vsphere",
                  "description": "basic cp",
                  "name": "vsphere-picard-4",
                  "pack": [
                    {
                      "name": "ubuntu-vsphere",
                      "tag": "LTS__18.4.x",
                      "uid": "${data.spectrocloud_pack.ubuntu.id}",
                      "values": "foo: 1"
                    },
                    {
                      "name": "kubernetes",
                      "tag": "1.21.5",
                      "uid": "${data.spectrocloud_pack.k8s.id}",
                      "values": "${data.spectrocloud_pack.k8s.values}"
                    },
                    {
                      "name": "cni-calico",
                      "tag": "3.16.x",
                      "uid": "${data.spectrocloud_pack.cni.id}",
                      "values": "${data.spectrocloud_pack.cni.values}"
                    },
                    {
                      "name": "csi-vsphere-csi",
                      "tag": "2.3.x",
                      "uid": "${data.spectrocloud_pack.csi.id}",
                      "values": "${data.spectrocloud_pack.csi.values}"
                    }
                  ],
                  "profile_variables": [
                    {
                      "variable": [
                        {
                          "display_name": "Default Password",
                          "format": "string",
                          "hidden": true,
                          "name": "default_password"
                        },
                        {
                          "default_value": "0.0.1",
                          "description": "description hard-version",
                          "display_name": "Version",
                          "format": "version",
                          "immutable": false,
                          "name": "default_version",
                          "regex": "*.*",
                          "required": true
                        }
                      ]
                    }
                  ],
                  "tags": [
                    "dev",
                    "department:devops",
                    "owner:bob"
                  ],
                  "type": "cluster"
                }
              references:
                pack.uid: data.spectrocloud_pack.csi.id
                pack.values: data.spectrocloud_pack.csi.values
        argumentDocs:
            cloud: (String) Specify the infrastructure provider the cluster profile is for. Only Palette supported infrastructure providers can be used. The supported cloud types are - all, aws, azure, gcp, vsphere, openstack, maas, virtual, baremetal, eks, aks, edge-native, generic, and gke or any custom cloud provider registered in Palette, e.g., nutanix.If the value is set to all, then the type must be set to add-on. Otherwise, the cluster profile may be incompatible with other providers. Default value is all.
            content: (String) The content of the manifest. The content is the YAML content of the manifest.
            context: (String) The context of the cluster profile. Allowed values are project or tenant. Default value is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            create: (String)
            default_value: (String) The default value of the variable.
            delete: (String)
            description: (String)
            display_name: (String) The display name of the variable should be unique among variables.
            format: (String) The format of the variable. Default is string, format field can only be set during cluster profile creation. Allowed formats include string, number, boolean, ipv4, ipv4cidr, ipv6, version.
            hidden: (Boolean) If hidden is set to true, then variable will be hidden for overriding the value. By default the hidden flag will be set to false.
            id: (String) The ID of this resource.
            immutable: (Boolean) If immutable is set to true, then variable value can't be editable. By default the immutable flag will be set to false.
            is_sensitive: (Boolean) If is_sensitive is set to true, then default value will be masked. By default the is_sensitive flag will be set to false.
            manifest: (Block List) (see below for nested schema)
            name: (String)
            pack: (Block List) For packs of type spectro, helm, and manifest, at least one pack must be specified. (see below for nested schema)
            profile_variables: '(Block List, Max: 1) List of variables for the cluster profile. Note: This is a preview feature and is currently only supported for the edge_native cloud type and general add-on profiles. (see below for nested schema)'
            regex: (String) Regular expression pattern which the variable value must match.
            registry_uid: (String) The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name.
            required: (Boolean) The required to specify if the variable is optional or mandatory. If it is mandatory then default value must be provided.
            tag: (String) The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is spectro or helm.
            tags: (Set of String) A list of tags to be applied to the cluster. Tags must be in the form of key:value.
            timeouts: (Block, Optional) (see below for nested schema)
            type: (String) Specify the cluster profile type to use. Allowed values are cluster, infra, add-on, and system. These values map to the following User Interface (UI) labels. Use the value ' cluster ' for a Full cluster profile.For an Infrastructure cluster profile, use the value infra; for an Add-on cluster profile, use the value add-on.System cluster profiles can be specified using the value system. To learn more about cluster profiles, refer to the Cluster Profile documentation. Default value is add-on.
            uid: (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry.
            update: (String)
            values: (String) The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
            variable: '(Block List, Min: 1) (see below for nested schema)'
            version: (String) Version of the cluster profile. Defaults to '1.0.0'.
        importStatements: []
    spectrocloud_cluster_profile_import:
        subCategory: ""
        name: spectrocloud_cluster_profile_import
        title: spectrocloud_cluster_profile_import Resource - terraform-provider-spectrocloud
        examples:
            - name: import
              manifest: |-
                {
                  "import_file": "/tmp/profile_import.json"
                }
        argumentDocs:
            context: (String) Allowed values are project, tenant or system. Defaults to project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            id: (String) The ID of this resource.
            import_file: (String)
        importStatements: []
    spectrocloud_cluster_vsphere Resource - terraform-provider-spectrocloud:
        subCategory: ""
        description: A resource to manage a vSphere cluster in Palette.
        name: spectrocloud_cluster_vsphere Resource - terraform-provider-spectrocloud
        title: spectrocloud_cluster_vsphere Resource - terraform-provider-spectrocloud
        argumentDocs:
            action: '(String) The action to perform on the node. Valid values are: cordon, uncordon.'
            additional_labels: (Map of String)
            admin_kube_config: (String) Admin Kube-config for the cluster. This can be used to connect to the cluster using kubectl, With admin privilege.
            apply_setting: (String) The setting to apply the cluster profile. DownloadAndInstall will download and install packs in one action. DownloadAndInstallLater will only download artifact and postpone install for later. Default value is DownloadAndInstall.
            backup_location_id: (String) The ID of the backup location to use for the backup.
            backup_policy: '(Block List, Max: 1) The backup policy for the cluster. If not specified, no backups will be taken. (see below for nested schema)'
            cloud_account_id: (String) ID of the cloud account to be used for the cluster. This cloud account must be of type vsphere.
            cloud_config: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            cloud_config_id: (String, Deprecated) ID of the cloud config used for the cluster. This cloud config must be of type azure.
            cluster: (String) The name of the cluster to use for the machine pool. As it appears in the vSphere.
            cluster_meta_attribute: '(String) cluster_meta_attribute can be used to set additional cluster metadata information, eg {''nic_name'': ''test'', ''env'': ''stage''}'
            cluster_profile: (Block List) (see below for nested schema)
            cluster_rbac_binding: (Block List) The RBAC binding for the cluster. (see below for nested schema)
            cluster_uids: (Set of String) The list of cluster UIDs to include in the backup. If include_all_clusters is set to true, then all clusters will be included.
            configuration_scan_schedule: (String) The schedule for configuration scan.
            conformance_scan_schedule: (String) The schedule for conformance scan.
            content: (String) The content of the manifest. The content is the YAML content of the manifest.
            context: (String) The context of the VMware cluster. Allowed values are project or tenant. Default is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            control_plane: (Boolean) Whether this machine pool is a control plane. Defaults to false.
            control_plane_as_worker: (Boolean) Whether this machine pool is a control plane and a worker. Defaults to false.
            count: (Number) Number of nodes in the machine pool.
            country_code: (String) The country code of the country the cluster is located in.
            country_name: (String) The name of the country.
            cpu: (Number) The number of CPUs.
            create: (String)
            datacenter: (String) The name of the datacenter in vSphere. This is the name of the datacenter as it appears in vSphere.
            datastore: (String) The name of the datastore to use for the machine pool. As it appears in the vSphere.
            delete: (String)
            description: (String) The description of the cluster. Default value is empty string.
            disk_size_gb: (Number) The size of the disk in GB.
            effect: '(String) The effect of the taint. Allowed values are: NoSchedule, PreferNoSchedule or NoExecute.'
            expiry_in_hour: (Number) The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
            external_traffic_policy: (String) The external traffic policy for the cluster.
            folder: (String) The name of the folder in vSphere. This is the name of the folder as it appears in vSphere.
            force_delete: (Boolean) If set to true, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
            force_delete_delay: (Number) Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
            host_config: (Block List) The host configuration for the cluster. (see below for nested schema)
            host_endpoint: (String) The host endpoint to use for the cluster. This can be IP or FQDN(External/DDNS).
            host_endpoint_type: (String) The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
            id: (String) The ID of this resource.
            image_template_folder: (String) The name of the image template folder in vSphere. This is the name of the folder as it appears in vSphere.
            images_blacklist: (List of String) List of images to disallow for the namespace. For example, ['nginx:latest', 'redis:latest']
            include_all_clusters: (Boolean) Whether to include all clusters in the backup. If set to false, only the clusters specified in cluster_uids will be included.
            include_cluster_resources: '(Boolean) Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)'
            include_cluster_resources_mode: (String) Specifies whether to include the cluster resources in the backup. Supported values are always, never, and auto.
            include_disks: (Boolean) Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
            ingress_host: (String) The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
            instance_type: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            key: (String) The key of the taint.
            kubeconfig: (String) Kubeconfig for the cluster. This can be used to connect to the cluster using kubectl.
            latitude: (Number) The latitude coordinates value.
            load_balancer_source_ranges: (String) The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
            location_config: (Block List) (see below for nested schema)
            longitude: (Number) The longitude coordinates value.
            machine_pool: '(Block Set, Min: 1) (see below for nested schema)'
            manifest: (Block List) (see below for nested schema)
            max: (Number) Maximum number of nodes in the machine pool. This is used for autoscaling the machine pool.
            memory_mb: (Number) The amount of memory in MB.
            min: (Number) Minimum number of nodes in the machine pool. This is used for autoscaling the machine pool.
            name: (String) The name of the cluster.
            namespace: (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            namespaces: (Block List) The namespaces for the cluster. (see below for nested schema)
            network: (String) The name of the network to use for the machine pool. As it appears in the vSphere.
            network_search_domain: (String) The search domain to use for the cluster in case of DHCP.
            network_type: (String) The type of network to use for the cluster. This can be VIP or DDNS.
            node: (Block List) (see below for nested schema)
            node_id: (String) The node_id of the node, For example i-07f899a33dee624f7
            node_repave_interval: (Number) Minimum number of seconds node should be Ready, before the next node is selected for repave. Default value is 0, Applicable only for worker pools.
            ntp_servers: (Set of String) A list of NTP servers to be used by the cluster.
            os_patch_after: '(String) The date and time after which to patch the cluster. Prefix the time value with the respective RFC. Ex: RFC3339: 2006-01-02T15:04:05Z07:00'
            os_patch_on_boot: (Boolean) Whether to apply OS patch on boot. Default is false.
            os_patch_schedule: '(String) The cron schedule for OS patching. This must be in the form of cron syntax. Ex: 0 0 * * *.'
            pack: (Block List) For packs of type spectro, helm, and manifest, at least one pack must be specified. (see below for nested schema)
            pause_agent_upgrades: (String) The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is unlock, meaning upgrades occur automatically. Setting it to lock pauses automatic agent upgrades for the cluster.
            penetration_scan_schedule: (String) The schedule for penetration scan.
            placement: '(Block List, Min: 1) (see below for nested schema)'
            prefix: (String) Prefix for the backup name. The backup name will be of the format --.
            region_code: (String) The region code of where the cluster is located in.
            region_name: (String) The name of the region.
            registry_uid: (String) The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name.
            resource_allocation: '(Map of String) Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, {cpu_cores: ''2'', memory_MiB: ''2048''}'
            resource_pool: (String) The name of the resource pool to use for the machine pool. As it appears in the vSphere.
            review_repave_state: (String) To authorize the cluster repave, set the value to Approved for approval and "" to decline. Default value is "".
            role: (Map of String) The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            scan_policy: '(Block List, Max: 1) The scan policy for the cluster. (see below for nested schema)'
            schedule: (String) The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to 0 1 * * *.
            skip_completion: (Boolean) If true, the cluster will be created asynchronously. Default value is false.
            ssh_key: (String, Deprecated) The SSH key to be used for the cluster. This is the public key that will be used to access the cluster nodes. ssh_key & ssh_keys are mutually exclusive.
            ssh_keys: (Set of String) List of public SSH (Secure Shell) keys to establish, administer, and communicate with remote clusters, ssh_key & ssh_keys are mutually exclusive.
            static_ip: (Boolean) Whether to use static IP addresses for the cluster. If true, the cluster will use static IP addresses. If false, the cluster will use DDNS. Default is false.
            static_ip_pool_id: (String) The ID of the static IP pool to use for the machine pool in case of static cluster placement.
            subjects: (Block List) (see below for nested schema)
            tag: (String) The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is spectro or helm.
            tags: (Set of String) A list of tags to be applied to the cluster. Tags must be in the form of key:value.
            taints: (Block List) (see below for nested schema)
            timeouts: (Block, Optional) (see below for nested schema)
            type: (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
            uid: (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry.
            update: (String)
            update_strategy: (String) Update strategy for the machine pool. Valid values are RollingUpdateScaleOut and RollingUpdateScaleIn.
            value: (String) The value of the taint.
            values: (String) The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
            variables: '(Map of String) A map of cluster profile variables, specified as key-value pairs. For example: priority = "5".'
        importStatements: []
    spectrocloud_datavolume Resource - terraform-provider-spectrocloud:
        subCategory: ""
        name: spectrocloud_datavolume Resource - terraform-provider-spectrocloud
        title: spectrocloud_datavolume Resource - terraform-provider-spectrocloud
        argumentDocs:
            access_modes: '(Set of String) A set of the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1'
            add_volume_options: '(Block List, Min: 1, Max: 1) DataVolumeSpec defines our specification for a DataVolume type (see below for nested schema)'
            annotations: '(Map of String) An unstructured key value map stored with the DataVolume that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations'
            blank: '(Block List, Max: 1) DataVolumeSourceBlank provides the parameters to create a Data Volume from an empty source. (see below for nested schema)'
            bus: (String)
            cert_config_map: (String) Cert_config_map provides a reference to the Registry certs.
            cluster_context: (String)
            cluster_uid: (String) The cluster UID to which the virtual machine belongs to.
            content_type: '(String) ContentType options: "kubevirt", "archive".'
            create: (String)
            data_volume: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            delete: (String)
            disk: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            generation: (Number) A sequence number representing a specific generation of the desired state.
            hotpluggable: (Boolean)
            http: '(Block List, Max: 1) DataVolumeSourceHTTP provides the parameters to create a Data Volume from an HTTP source. (see below for nested schema)'
            id: (String) The ID of this resource.
            image_url: (String) The registry URL of the image to download.
            key: (String) The label key that the selector applies to.
            labels: '(Map of String) Map of string keys and values that can be used to organize and categorize (scope and select) the DataVolume. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
            limits: '(Map of String) Map describing the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/'
            match_expressions: (Block List) A list of label selector requirements. The requirements are ANDed. (see below for nested schema)
            match_labels: (Map of String) A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of match_expressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
            metadata: '(Block List, Min: 1, Max: 1) Standard DataVolume''s metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata (see below for nested schema)'
            name: (String)
            namespace: (String) Namespace defines the space within which name of the DataVolume must be unique.
            operator: (String) A key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist.
            phase: (String) DataVolumePhase is the current phase of the DataVolume.
            progress: (String) DataVolumePhase is the current phase of the DataVolume.
            pvc: '(Block List, Min: 1, Max: 1) PVC is a pointer to the PVC Spec we want to use. (see below for nested schema)'
            registry: '(Block List, Max: 1) DataVolumeSourceRegistry provides the parameters to create a Data Volume from an existing PVC. (see below for nested schema)'
            requests: '(Map of String) Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to limits if that is explicitly specified, otherwise to an implementation-defined value. More info: http://kubernetes.io/docs/user-guide/compute-resources/'
            resource_version: '(String) An opaque value that represents the internal version of this DataVolume that can be used by clients to determine when DataVolume has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
            resources: '(Block List, Min: 1, Max: 1) A list of the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources (see below for nested schema)'
            secret_ref: (String) Secret_ref provides the secret reference needed to access the HTTP source.
            selector: '(Block List, Max: 1) A label query over volumes to consider for binding. (see below for nested schema)'
            self_link: (String) A URL representing this DataVolume.
            source: '(Block List, Max: 1) Source is the src of the data for the requested DataVolume. (see below for nested schema)'
            spec: '(Block List, Min: 1, Max: 1) DataVolumeSpec defines our specification for a DataVolume type (see below for nested schema)'
            status: '(Block List, Max: 1) DataVolumeStatus provides the parameters to store the phase of the Data Volume (see below for nested schema)'
            storage_class_name: (String) Name of the storage class requested by the claim
            timeouts: (Block, Optional) (see below for nested schema)
            uid: '(String) The unique in time and space value for this DataVolume. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
            url: (String) url is the URL of the http source.
            values: (Set of String) An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
            vm_name: (String) The name of the virtual machine to which the data volume belongs to.
            vm_namespace: (String) The namespace of the virtual machine to which the data volume belongs to.
            volume_mode: (String) volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
            volume_name: (String) The binding reference to the PersistentVolume backing this claim.
            volume_source: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
        importStatements: []
    spectrocloud_developer_setting:
        subCategory: ""
        name: spectrocloud_developer_setting
        title: spectrocloud_developer_setting Resource - terraform-provider-spectrocloud
        examples:
            - name: dev_setting
              manifest: |-
                {
                  "cpu": 20,
                  "hide_system_cluster_group": false,
                  "memory": 100,
                  "storage": 100,
                  "virtual_clusters_limit": 10
                }
        argumentDocs:
            cpu: (Number) Defines the number of CPU cores allocated to the cluster.
            create: (String)
            delete: (String)
            hide_system_cluster_group: (Boolean) If set to true, hides the system cluster.
            id: (String) The ID of this resource.
            memory: (Number) Specifies the amount of memory (in GiB) allocated to the cluster.
            storage: (Number) Defines the storage capacity (in GiB) allocated to the cluster.
            timeouts: (Block, Optional) (see below for nested schema)
            update: (String)
            virtual_clusters_limit: (Number) Specifies the number of virtual clusters to be created.
        importStatements: []
    spectrocloud_filter:
        subCategory: ""
        description: A resource for creating and managing filters.
        name: spectrocloud_filter
        title: spectrocloud_filter Resource - terraform-provider-spectrocloud
        examples:
            - name: example
              manifest: |-
                {
                  "metadata": [
                    {
                      "name": "resourcefilter2"
                    }
                  ],
                  "spec": [
                    {
                      "filter_group": [
                        {
                          "conjunction": "and",
                          "filters": [
                            {
                              "key": "testtag1",
                              "negation": false,
                              "operator": "eq",
                              "values": [
                                "spectro__tag"
                              ]
                            },
                            {
                              "key": "testtag2",
                              "negation": true,
                              "operator": "eq",
                              "values": [
                                "spectro__tag"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
        argumentDocs:
            conjunction: (String) Conjunction operation of the filter group. Valid values are 'and' and 'or'.
            create: (String)
            delete: (String)
            filter_group: '(Block List, Min: 1, Max: 1) Filter group of the filter. (see below for nested schema)'
            filters: '(Block List, Min: 1) List of filters in the filter group. (see below for nested schema)'
            id: (String) The ID of this resource.
            key: (String) Key of the filter.
            metadata: '(Block List, Min: 1, Max: 1) Metadata of the filter. (see below for nested schema)'
            name: (String) The name of the filter.
            negation: (Boolean) Negation flag of the filter condition.
            operator: (String) Operator of the filter. Valid values are 'eq'.
            spec: '(Block List, Min: 1, Max: 1) Specification of the filter. (see below for nested schema)'
            timeouts: (Block, Optional) (see below for nested schema)
            update: (String)
            values: (List of String) Values of the filter.
        importStatements: []
    spectrocloud_macro:
        subCategory: ""
        description: A resource for creating and managing service output variables and macro.
        name: spectrocloud_macro
        title: spectrocloud_macro Resource - terraform-provider-spectrocloud
        examples:
            - name: project_macro
              manifest: |-
                {
                  "name": "project1",
                  "project": "Default",
                  "value": "project_val2"
                }
            - name: tenant_macro
              manifest: |-
                {
                  "name": "tenant1",
                  "value": "tenant_val1"
                }
        argumentDocs:
            create: (String)
            delete: (String)
            id: (String) The ID of this resource.
            name: (String) The name of the macro or service variable output.
            project: (String) The Spectro Cloud project name.
            timeouts: (Block, Optional) (see below for nested schema)
            update: (String)
            value: (String) The value that the macro or service output variable will contain.
        importStatements: []
    spectrocloud_macros:
        subCategory: ""
        description: A resource for creating and managing service output variables and macros.
        name: spectrocloud_macros
        title: spectrocloud_macros Resource - terraform-provider-spectrocloud
        examples:
            - name: project_macro
              manifest: |-
                {
                  "macros": {
                    "project_macro_1": "val1",
                    "project_macro_2": "val2"
                  },
                  "project": "Default"
                }
            - name: tenant_macro
              manifest: |-
                {
                  "macros": {
                    "tenant_macro_1": "tenant_val2"
                  }
                }
        argumentDocs:
            create: (String)
            delete: (String)
            id: (String) The ID of this resource.
            macros: (Map of String) The key-value mapping includes the macro name and its corresponding value, representing either a macro or a service variable output.
            project: (String) The Spectro Cloud project name.
            timeouts: (Block, Optional) (see below for nested schema)
            update: (String)
        importStatements: []
    spectrocloud_password_policy:
        subCategory: ""
        name: spectrocloud_password_policy
        title: spectrocloud_password_policy Resource - terraform-provider-spectrocloud
        examples:
            - name: policy_regex
              manifest: |-
                {
                  "first_reminder_days": 5,
                  "min_digits": 1,
                  "min_lowercase_letters": 12,
                  "min_password_length": 12,
                  "min_special_characters": 1,
                  "min_uppercase_letters": 1,
                  "password_expiry_days": 123
                }
        argumentDocs:
            create: (String)
            delete: (String)
            first_reminder_days: (Number) The number of days before the password expiry to send the first reminder to the user. Default is 5 days before expiry.
            id: (String) The ID of this resource.
            min_digits: (Number) The minimum number of numeric digits (0-9) required in the password. Ensures that passwords contain numerical characters. Minimum length of digit should be 1.
            min_lowercase_letters: (Number) The minimum number of lowercase letters (a-z) required in the password. Ensures that lowercase characters are included for password complexity. Minimum length of lower case should be 1.
            min_password_length: (Number) The minimum length required for the password. Enforces a stronger password policy by ensuring a minimum number of characters.  Default minimum length is 6.
            min_special_characters: '(Number) The minimum number of special characters (e.g., !, @, #, $, %) required in the password. This increases the password''s security level by including symbols. Minimum special characters should be 1.'
            min_uppercase_letters: (Number) The minimum number of uppercase letters (A-Z) required in the password. Helps ensure password complexity with a mix of case-sensitive characters. Minimum length of upper case should be 1.
            password_expiry_days: (Number) The number of days before the password expires. Must be between 1 and 1000 days. Defines how often passwords must be changed.  Default is 999 days for expiry.
            password_regex: (String) A regular expression (regex) to define custom password patterns, such as enforcing specific characters or sequences in the password.
            timeouts: (Block, Optional) (see below for nested schema)
            update: (String)
        importStatements: []
    spectrocloud_platform_setting:
        subCategory: ""
        name: spectrocloud_platform_setting
        title: spectrocloud_platform_setting Resource - terraform-provider-spectrocloud
        examples:
            - name: platform_settings
              manifest: |-
                {
                  "cluster_auto_remediation": false,
                  "context": "tenant",
                  "enable_auto_remediation": true,
                  "login_banner": [
                    {
                      "message": "test",
                      "title": "test"
                    }
                  ],
                  "non_fips_addon_pack": true,
                  "non_fips_cluster_import": true,
                  "non_fips_features": true,
                  "pause_agent_upgrades": "lock",
                  "session_timeout": 230
                }
        argumentDocs:
            cluster_auto_remediation: (Boolean) Enables automatic remediation for unhealthy nodes in Palette-provisioned clusters by replacing them with new nodes. Disabling this feature prevents auto-remediation. Not applicable to EKS, AKS, or TKE clusters.
            context: (String) Defines the scope of the platform setting. Valid values are project or tenant. By default, it is set to tenant. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            create: (String)
            delete: (String)
            enable_auto_remediation: (Boolean) Enables automatic remediation. set only with `project' context
            id: (String) The ID of this resource.
            login_banner: '(Block List, Max: 1) Configure a login banner that users must acknowledge before signing in. (see below for nested schema)'
            message: (String) Specify the message displayed in the login banner.
            non_fips_addon_pack: (Boolean) Allows users in this tenant to use non-FIPS-compliant addon packs when creating cluster profiles. The non_fips_addon_pack only supported in palette vertex environment.
            non_fips_cluster_import: (Boolean) Allows users in this tenant to import clusters, but the imported clusters may not be FIPS-compliant.  The non_fips_cluster_import only supported in palette vertex environment.
            non_fips_features: (Boolean) Allows users in this tenant to access non-FIPS-compliant features such as backup, restore, and scans. The non_fips_features only supported in palette vertex environment.
            pause_agent_upgrades: (String) Controls automatic upgrades for Palette components and agents in clusters deployed under a tenant or project. Setting it to lock disables automatic upgrades, while unlock (default) allows automatic upgrades.
            session_timeout: (Number) Specifies the duration (in minutes) of inactivity before a user is automatically logged out. The default is 240 minutes allowed in Palette
            timeouts: (Block, Optional) (see below for nested schema)
            title: (String) Specify the title of the login banner.
            update: (String)
        importStatements: []
    spectrocloud_privatecloudgateway_dns_map:
        subCategory: ""
        description: This resource allows for the management of DNS mappings for private cloud gateways. This helps ensure proper DNS resolution for resources within the private cloud environment.
        name: spectrocloud_privatecloudgateway_dns_map
        title: spectrocloud_privatecloudgateway_dns_map Resource - terraform-provider-spectrocloud
        examples:
            - name: dns_map_test
              manifest: |-
                {
                  "data_center": "DataCenterTest",
                  "network": "TEST-VM-NETWORK",
                  "private_cloud_gateway_id": "${data.spectrocloud_private_cloud_gateway.gateway.id}",
                  "search_domain_name": "test1.spectro.com"
                }
              references:
                private_cloud_gateway_id: data.spectrocloud_private_cloud_gateway.gateway.id
        argumentDocs:
            create: (String)
            data_center: (String) The data center in which the private cloud resides.
            delete: (String)
            id: (String) The ID of this resource.
            network: (String) The network to which the private cloud gateway is mapped.
            private_cloud_gateway_id: (String) The ID of the Private Cloud Gateway.
            search_domain_name: (String) The domain name used for DNS search queries within the private cloud.
            timeouts: (Block, Optional) (see below for nested schema)
            update: (String)
        importStatements: []
    spectrocloud_privatecloudgateway_ippool:
        subCategory: ""
        description: A Resource to manage IP pools for Private Cloud Gateway.
        name: spectrocloud_privatecloudgateway_ippool
        title: spectrocloud_privatecloudgateway_ippool Resource - terraform-provider-spectrocloud
        examples:
            - name: ippool
              manifest: |-
                {
                  "gateway": "192.168.1.1",
                  "ip_end_range": "192.168.1.100",
                  "ip_start_range": "192.168.1.10",
                  "name": "primary-compute-pool-1",
                  "nameserver_addresses": [
                    "192.168.1.8"
                  ],
                  "network_type": "range",
                  "prefix": "24",
                  "private_cloud_gateway_id": "${data.spectrocloud_private_cloud_gateway.pcg.id}",
                  "restrict_to_single_cluster": true
                }
              references:
                private_cloud_gateway_id: data.spectrocloud_private_cloud_gateway.pcg.id
            - name: ippool
              manifest: |-
                {
                  "gateway": "10.10.192.1",
                  "name": "backup-compute-pool",
                  "nameserver_addresses": [
                    "192.168.1.8"
                  ],
                  "network_type": "subnet",
                  "prefix": "24",
                  "private_cloud_gateway_id": "${data.spectrocloud_private_cloud_gateway.pcg.id}",
                  "subnet_cidr": "10.10.100.0/24"
                }
              references:
                private_cloud_gateway_id: data.spectrocloud_private_cloud_gateway.pcg.id
        argumentDocs:
            create: (String)
            delete: (String)
            gateway: (String) The network gateway IP address for the IP pool. Typically, this is the default network gateway for the subnet.
            id: (String) The ID of this resource.
            ip_end_range: (String) The end IP address of the IP pool. Required if network_type is range.
            ip_start_range: (String) The start IP address of the IP pool. Required if network_type is range.
            name: (String) The name of the IP pool.
            nameserver_addresses: (Set of String) The list of nameserver IP addresses for the IP pool.
            nameserver_search_suffix: (Set of String) The list of nameserver search suffixes for the IP pool. For example, example.org.
            network_type: '(String) The type of network for the IP pool. Allowed values are: range and subnet.'
            prefix: (Number) The prefix of the IP pool provided network range or subnet. For example 24 for a /24 subnet or a range that falls inside a 24 subnet.
            private_cloud_gateway_id: (String) The ID of the Private Cloud Gateway.
            restrict_to_single_cluster: (Boolean) Restrict the IP pool to a single cluster. If set to true, the IP pool is restricted to a single cluster. We recommend setting this to true for production environments and creating separate IP pools for each cluster.
            subnet_cidr: (String) The subnet CIDR of the IP pool. Required if network_type is subnet.
            timeouts: (Block, Optional) (see below for nested schema)
            update: (String)
        importStatements: []
    spectrocloud_project:
        subCategory: ""
        description: Create and manage projects in Palette.
        name: spectrocloud_project
        title: spectrocloud_project Resource - terraform-provider-spectrocloud
        examples:
            - name: project
              manifest: |-
                {
                  "name": "dev1"
                }
            - name: project
              manifest: |-
                {
                  "description": "This is the primary devoplent environment for team Yellow.",
                  "name": "dev2",
                  "tags": [
                    "owner:jdoe@emxaple.com",
                    "cost-center:12345"
                  ]
                }
        argumentDocs:
            create: (String)
            delete: (String)
            description: (String) The description of the project.
            id: (String) The ID of this resource.
            name: (String) The name of the project.
            tags: (Set of String) Assign tags to the project.
            timeouts: (Block, Optional) (see below for nested schema)
            update: (String)
        importStatements: []
    spectrocloud_registration_token:
        subCategory: ""
        name: spectrocloud_registration_token
        title: spectrocloud_registration_token Resource - terraform-provider-spectrocloud
        examples:
            - name: tf_token
              manifest: |-
                {
                  "description": "test token description updated",
                  "expiry_date": "2025-03-25",
                  "name": "tf_siva",
                  "project_uid": "6514216503b",
                  "status": "active"
                }
        argumentDocs:
            create: (String)
            delete: (String)
            description: (String) A brief description of the registration token.
            expiry_date: (String) The expiration date of the registration token in YYYY-MM-DD format.
            id: (String) The ID of this resource.
            name: (String) The name of the registration token.
            project_uid: (String) The unique identifier of the project associated with the registration token.
            status: (String) The status of the registration token. Allowed values are active or inactive. Default is active.
            timeouts: (Block, Optional) (see below for nested schema)
            token: (String)
            update: (String)
        importStatements: []
    spectrocloud_registry_helm:
        subCategory: ""
        name: spectrocloud_registry_helm
        title: spectrocloud_registry_helm Resource - terraform-provider-spectrocloud
        examples:
            - name: r1
              manifest: |-
                {
                  "credentials": [
                    {
                      "credential_type": "noAuth",
                      "password": "def",
                      "username": "abc"
                    }
                  ],
                  "endpoint": "https://123456.dkr.ecr.us-west-1.amazonaws.com",
                  "is_private": true,
                  "name": "us-artifactory"
                }
        argumentDocs:
            create: (String)
            credential_type: (String) The type of authentication used for the Helm registry. Supported values are 'noAuth' for no authentication, 'basic' for username/password, and 'token' for token-based authentication.
            credentials: '(Block List, Min: 1, Max: 1) Authentication credentials for accessing the Helm registry. (see below for nested schema)'
            delete: (String)
            endpoint: (String) The URL endpoint of the Helm registry where the charts are hosted.
            id: (String) The ID of this resource.
            is_private: (Boolean) Specifies whether the Helm registry is private or public.
            name: (String) The name of the Helm registry. This must be unique
            password: (String) The password for basic authentication. Required if 'credential_type' is set to 'basic'.
            timeouts: (Block, Optional) (see below for nested schema)
            token: (String) The authentication token. Required if 'credential_type' is set to 'token'.
            update: (String)
            username: (String) The username for basic authentication. Required if 'credential_type' is set to 'basic'.
        importStatements: []
    spectrocloud_registry_oci:
        subCategory: ""
        name: spectrocloud_registry_oci
        title: spectrocloud_registry_oci Resource - terraform-provider-spectrocloud
        examples:
            - name: r1
              manifest: |-
                {
                  "credentials": [
                    {
                      "arn": "arn:aws:iam::123456:role/stage-demo-ecr",
                      "credential_type": "sts",
                      "external_id": "sofiwhgowbrgiornM="
                    }
                  ],
                  "endpoint": "123456.dkr.ecr.us-west-1.amazonaws.com",
                  "is_private": true,
                  "name": "test-nik2",
                  "type": "ecr"
                }
        argumentDocs:
            access_key: (String) The access key for accessing the registry. Required if 'credential_type' is set to 'secret'.
            arn: (String) The Amazon Resource Name (ARN) used for AWS-based authentication. Required if 'credential_type' is 'sts'.
            base_content_path: (String) The relative path to the endpoint specified.
            certificate: (String) Specifies the TLS certificate used for secure communication. Required for enabling SSL/TLS encryption.
            create: (String)
            credential_type: (String) The type of authentication used for accessing the registry. Supported values are 'secret', 'sts', 'basic', and 'noAuth'.
            credentials: '(Block List, Min: 1, Max: 1) Authentication credentials to access the private OCI registry. Required if is_private is set to true (see below for nested schema)'
            delete: (String)
            endpoint: (String) The URL endpoint of the OCI registry. This is where the container images are hosted and accessed.
            endpoint_suffix: (String) Specifies a suffix to append to the endpoint. This field is optional, but some registries (e.g., JFrog) may require it. The final registry URL is constructed by appending this suffix to the endpoint.
            external_id: (String) The external ID used for AWS STS (Security Token Service) authentication. Required if 'credential_type' is 'sts'.
            id: (String) The ID of this resource.
            insecure_skip_verify: (Boolean) Disables TLS certificate verification when set to true. Use with caution as it may expose connections to security risks.
            is_private: (Boolean) Specifies whether the registry is private or public. Private registries require authentication to access.
            is_synchronization: (Boolean) Specifies whether the registry is synchronized.
            name: (String) The name of the OCI registry.
            password: (String, Sensitive) The password for basic authentication. Required if 'credential_type' is 'basic'.
            provider_type: (String) The type of provider used for interacting with the registry. Supported value's are helm, zarf and pack, The default is 'helm'. zarf is allowed with type="basic"
            secret_key: (String, Sensitive) The secret key for accessing the registry. Required if 'credential_type' is set to 'secret'.
            timeouts: (Block, Optional) (see below for nested schema)
            tls_config: '(Block List, Max: 1) TLS configuration for the registry. (see below for nested schema)'
            type: (String) The type of the registry. Possible values are 'ecr' (Amazon Elastic Container Registry) or 'basic' (for other types of OCI registries).
            update: (String)
            username: (String) The username for basic authentication. Required if 'credential_type' is 'basic'.
        importStatements: []
    spectrocloud_resource_limit:
        subCategory: ""
        name: spectrocloud_resource_limit
        title: spectrocloud_resource_limit Resource - terraform-provider-spectrocloud
        examples:
            - name: resource_limit
              manifest: |-
                {
                  "alert": 101,
                  "api_keys": 201,
                  "appliance": 6001,
                  "appliance_token": 201,
                  "application_deployment": 200,
                  "application_profile": 200,
                  "certificate": 20,
                  "cloud_account": 355,
                  "cluster": 300,
                  "cluster_group": 50,
                  "cluster_profile": 2500,
                  "filter": 200,
                  "location": 100,
                  "macro": 6000,
                  "private_gateway": 100,
                  "project": 200,
                  "registry": 200,
                  "role": 100,
                  "ssh_key": 300,
                  "team": 100,
                  "user": 300,
                  "workspace": 60
                }
        argumentDocs:
            alert: (Number) The maximum number of alerts that can be created. Must be between 1 and 10,000.
            api_keys: (Number) The maximum number of API keys that can be generated. Must be between 1 and 10,000.
            appliance: (Number) The maximum number of appliances that can be managed. Must be between 1 and 50,000.
            appliance_token: (Number) The maximum number of appliance tokens that can be issued. Must be between 1 and 10,000.
            application_deployment: (Number) The maximum number of application deployments allowed. Must be between 1 and 10,000.
            application_profile: (Number) The maximum number of application profiles that can be configured. Must be between 1 and 10,000.
            certificate: (Number) The maximum number of certificates that can be managed. Must be between 1 and 10,000.
            cloud_account: (Number) The maximum number of cloud accounts that can be added. Must be between 1 and 10,000.
            cluster: (Number) The maximum number of clusters that can be created. Must be between 1 and 50,000.
            cluster_group: (Number) The maximum number of cluster groups that can be created. Must be between 1 and 10,000.
            cluster_profile: (Number) The maximum number of cluster profiles that can be configured. Must be between 1 and 10,000.
            create: (String)
            delete: (String)
            filter: (Number) The maximum number of filters that can be defined. Must be between 1 and 10,000.
            id: (String) The ID of this resource.
            location: (Number) The maximum number of locations that can be configured. Must be between 1 and 10,000.
            macro: (Number) The maximum number of macros that can be created. Must be between 1 and 10,000.
            private_gateway: (Number) The maximum number of private gateways that can be managed. Must be between 1 and 10,000.
            project: (Number) The maximum number of projects that can be created. Must be between 1 and 10,000.
            registry: (Number) The maximum number of registries that can be configured. Must be between 1 and 10,000.
            role: (Number) The maximum number of roles that can be assigned. Must be between 1 and 10,000.
            ssh_key: (Number) The maximum number of SSH keys that can be managed. Must be between 1 and 10,000.
            team: (Number) The maximum number of teams that can be created. Must be between 1 and 10,000.
            timeouts: (Block, Optional) (see below for nested schema)
            update: (String)
            user: (Number) The maximum number of users that can be added. Must be between 1 and 10,000.
            workspace: (Number) The maximum number of workspaces that can be created. Must be between 1 and 10,000.
        importStatements: []
    spectrocloud_role:
        subCategory: ""
        description: The role resource allows you to manage roles in Palette.
        name: spectrocloud_role
        title: spectrocloud_role Resource - terraform-provider-spectrocloud
        examples:
            - name: custom_role
              manifest: |-
                {
                  "name": "Test Cluster Role",
                  "permissions": "${flatten([for role in data.spectrocloud_role.roles : role.permissions])}",
                  "type": "project"
                }
        argumentDocs:
            create: (String)
            delete: (String)
            id: (String) The ID of this resource.
            name: (String) The name of the role.
            permissions: (Set of String) The permission's assigned to the role.
            timeouts: (Block, Optional) (see below for nested schema)
            type: (String) The role type. Allowed values are project or tenant or resource
            update: (String)
        importStatements: []
    spectrocloud_ssh_key:
        subCategory: ""
        description: The SSH key resource allows you to manage SSH keys in Palette.
        name: spectrocloud_ssh_key
        title: spectrocloud_ssh_key Resource - terraform-provider-spectrocloud
        examples:
            - name: ssh_tenant
              manifest: |-
                {
                  "context": "project",
                  "name": "ssh-dev-1",
                  "ssh_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZ....."
                }
            - name: ssh_tenant
              manifest: |-
                {
                  "context": "tenant",
                  "name": "ssh-dev-1",
                  "ssh_key": "${var.ssh_key_value}"
                }
              references:
                ssh_key: var.ssh_key_value
            - name: primary_key_1
              manifest: |-
                {
                  "context": "tenant",
                  "name": "ssh-dev-1",
                  "ssh_key": "${trimspace(tls_private_key.default_ssh_key.public_key_openssh)}"
                }
              dependencies:
                tls_private_key.default_ssh_key: |-
                    {
                      "algorithm": "RSA",
                      "rsa_bits": "4096"
                    }
        argumentDocs:
            context: (String) The context of the cluster profile. Allowed values are project or tenant. Default value is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            create: (String)
            delete: (String)
            id: (String) The ID of this resource.
            name: (String) The name of the SSH key resource.
            ssh_key: (String, Sensitive) The SSH key value. This is the public key that will be used to access the cluster. Must be in the Authorized Keys format, such as ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZ...
            timeouts: (Block, Optional) (see below for nested schema)
            update: (String)
        importStatements: []
    spectrocloud_team:
        subCategory: ""
        name: spectrocloud_team
        title: spectrocloud_team Resource - terraform-provider-spectrocloud
        examples:
            - name: t1
              manifest: |-
                {
                  "name": "team1",
                  "project_role_mapping": [
                    {
                      "id": "${data.spectrocloud_project.project1.id}",
                      "roles": [
                        "${data.spectrocloud_role.role1.id}",
                        "${data.spectrocloud_role.role2.id}"
                      ]
                    },
                    {
                      "id": "${data.spectrocloud_project.project2.id}",
                      "roles": [
                        "${data.spectrocloud_role.role3.id}"
                      ]
                    }
                  ],
                  "users": [
                    "${data.spectrocloud_user.user1.id}"
                  ]
                }
              references:
                project_role_mapping.id: data.spectrocloud_project.project2.id
        argumentDocs:
            create: (String)
            delete: (String)
            id: (String) The ID of this resource.
            name: (String) Name of the team.
            project_role_mapping: (Block Set) List of project roles to be associated with the team. (see below for nested schema)
            roles: (Set of String) List of project roles to be associated with the team.
            tenant_role_mapping: (Set of String) List of tenant role ids to be associated with the team.
            timeouts: (Block, Optional) (see below for nested schema)
            update: (String)
            users: (Set of String) List of user ids to be associated with the team.
            workspace: (Block Set) List of workspace roles to be associated with the team. (see below for nested schema)
            workspace_role_mapping: (Block Set) List of workspace roles to be associated with the team. (see below for nested schema)
        importStatements: []
    spectrocloud_user:
        subCategory: ""
        description: Create and manage projects in Palette.
        name: spectrocloud_user
        title: spectrocloud_user Resource - terraform-provider-spectrocloud
        examples:
            - name: user-test
              manifest: |-
                {
                  "email": "test-tf@spectrocloud.com",
                  "first_name": "tf",
                  "last_name": "test",
                  "project_role": [
                    {
                      "project_id": "${data.spectrocloud_project.default.id}",
                      "role_ids": "${[for r in data.spectrocloud_role.app_roles : r.id]}"
                    },
                    {
                      "project_id": "${data.spectrocloud_project.ranjith.id}",
                      "role_ids": "${[for r in data.spectrocloud_role.app_roles : r.id]}"
                    }
                  ],
                  "resource_role": [
                    {
                      "filter_ids": [
                        "${data.spectrocloud_filter.filter.id}"
                      ],
                      "project_ids": [
                        "${data.spectrocloud_project.default.id}",
                        "${data.spectrocloud_project.ranjith.id}"
                      ],
                      "role_ids": "${[for r in data.spectrocloud_role.resource_roles : r.id]}"
                    },
                    {
                      "filter_ids": [
                        "${data.spectrocloud_filter.filter.id}"
                      ],
                      "project_ids": [
                        "${data.spectrocloud_project.ranjith.id}"
                      ],
                      "role_ids": "${[for re in data.spectrocloud_role.resource_roles_editor : re.id]}"
                    }
                  ],
                  "team_ids": [
                    "${data.spectrocloud_team.team2.id}"
                  ],
                  "tenant_role": "${[for t in data.spectrocloud_role.tenant_roles : t.id]}",
                  "workspace_role": [
                    {
                      "project_id": "${data.spectrocloud_project.default.id}",
                      "workspace": [
                        {
                          "id": "${data.spectrocloud_workspace.workspace.id}",
                          "role_ids": "${[for w in data.spectrocloud_role.workspace_roles : w.id]}"
                        },
                        {
                          "id": "${data.spectrocloud_workspace.workspace2.id}",
                          "role_ids": [
                            "66fbea622947f81fc26983e6"
                          ]
                        }
                      ]
                    }
                  ]
                }
              references:
                project_role.project_id: data.spectrocloud_project.ranjith.id
                workspace_role.project_id: data.spectrocloud_project.default.id
                workspace_role.workspace.id: data.spectrocloud_workspace.workspace2.id
            - name: user-test
              manifest: |-
                {
                  "email": "test-tf@spectrocloud.com",
                  "first_name": "tf",
                  "last_name": "test",
                  "team_ids": [
                    "${data.spectrocloud_team.team2.id}"
                  ]
                }
        argumentDocs:
            create: (String)
            delete: (String)
            email: (String) The email of the user.
            filter_ids: (Set of String) List of filter ids.
            first_name: (String) The first name of the user.
            id: (String) The ID of this resource.
            last_name: (String) The last name of the user.
            project_id: (String) Project id to be associated with the user.
            project_ids: (Set of String) Project id's to be associated with the user.
            project_role: (Block Set) List of project roles to be associated with the user. (see below for nested schema)
            resource_role: (Block Set) (see below for nested schema)
            role_ids: (Set of String) List of project role ids to be associated with the user.
            team_ids: (List of String) The team id's assigned to the user.
            tenant_role: (Set of String) List of tenant role ids to be associated with the user.
            timeouts: (Block, Optional) (see below for nested schema)
            update: (String)
            workspace: '(Block Set, Min: 1) List of workspace roles to be associated with the user. (see below for nested schema)'
            workspace_role: (Block Set) List of workspace roles to be associated with the user. (see below for nested schema)
        importStatements: []
    spectrocloud_virtual_cluster:
        subCategory: ""
        description: A resource to manage a Palette Virtual Cluster.
        name: spectrocloud_virtual_cluster
        title: spectrocloud_virtual_cluster Resource - terraform-provider-spectrocloud
        examples:
            - name: cluster
              manifest: |-
                {
                  "host_cluster_uid": "${var.host_cluster_uid}",
                  "name": "virtual-cluster-demo",
                  "resources": [
                    {
                      "max_cpu": 6,
                      "max_mem_in_mb": 6000,
                      "min_cpu": 0,
                      "min_mem_in_mb": 0
                    }
                  ]
                }
              references:
                host_cluster_uid: var.host_cluster_uid
        argumentDocs:
            admin_kube_config: (String) Admin Kube-config for the cluster. This can be used to connect to the cluster using kubectl, With admin privilege.
            apply_setting: (String) The setting to apply the cluster profile. DownloadAndInstall will download and install packs in one action. DownloadAndInstallLater will only download artifact and postpone install for later. Default value is DownloadAndInstall.
            backup_location_id: (String) The ID of the backup location to use for the backup.
            backup_policy: '(Block List, Max: 1) The backup policy for the cluster. If not specified, no backups will be taken. (see below for nested schema)'
            chart_name: (String)
            chart_repo: (String)
            chart_values: (String)
            chart_version: (String)
            cloud_config: '(Block List, Max: 1) (see below for nested schema)'
            cloud_config_id: (String, Deprecated) ID of the cloud config used for the cluster. This cloud config must be of type azure.
            cluster_group_uid: (String)
            cluster_profile: (Block List) (see below for nested schema)
            cluster_rbac_binding: (Block List) The RBAC binding for the cluster. (see below for nested schema)
            cluster_uids: (Set of String) The list of cluster UIDs to include in the backup. If include_all_clusters is set to true, then all clusters will be included.
            configuration_scan_schedule: (String) The schedule for configuration scan.
            conformance_scan_schedule: (String) The schedule for conformance scan.
            content: (String) The content of the manifest. The content is the YAML content of the manifest.
            context: (String) The context of the virtual cluster. Allowed values are project or tenant. Default is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
            country_code: (String)
            country_name: (String)
            create: (String)
            delete: (String)
            description: (String) The description of the cluster. Default value is empty string.
            expiry_in_hour: (Number) The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
            force_delete: (Boolean) If set to true, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
            force_delete_delay: (Number) Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
            host_cluster_uid: (String)
            id: (String) The ID of this resource.
            images_blacklist: (List of String) List of images to disallow for the namespace. For example, ['nginx:latest', 'redis:latest']
            include_all_clusters: (Boolean) Whether to include all clusters in the backup. If set to false, only the clusters specified in cluster_uids will be included.
            include_cluster_resources: '(Boolean) Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)'
            include_cluster_resources_mode: (String) Specifies whether to include the cluster resources in the backup. Supported values are always, never, and auto.
            include_disks: (Boolean) Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
            k8s_version: (String)
            kubeconfig: (String) Kubeconfig for the cluster. This can be used to connect to the cluster using kubectl.
            latitude: (Number)
            location_config: (List of Object) The location of the cluster. (see below for nested schema)
            longitude: (Number)
            manifest: (Block List) (see below for nested schema)
            max_cpu: (Number)
            max_mem_in_mb: (Number)
            max_storage_in_gb: (Number)
            min_cpu: (Number)
            min_mem_in_mb: (Number)
            min_storage_in_gb: (Number)
            name: (String)
            namespace: (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            namespaces: (Block List) The namespaces for the cluster. (see below for nested schema)
            os_patch_after: '(String) The date and time after which to patch the cluster. Prefix the time value with the respective RFC. Ex: RFC3339: 2006-01-02T15:04:05Z07:00'
            os_patch_on_boot: (Boolean) Whether to apply OS patch on boot. Default is false.
            os_patch_schedule: (String) Cron schedule for OS patching. This must be in the form of 0 0 * * *.
            pack: (Block List) For packs of type spectro, helm, and manifest, at least one pack must be specified. (see below for nested schema)
            pause_cluster: (Boolean) To pause and resume cluster state. Set to true to pause running cluster & false to resume it.
            penetration_scan_schedule: (String) The schedule for penetration scan.
            prefix: (String) Prefix for the backup name. The backup name will be of the format --.
            region_code: (String)
            region_name: (String)
            registry_uid: (String) The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name.
            resource_allocation: '(Map of String) Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, {cpu_cores: ''2'', memory_MiB: ''2048''}'
            resources: (Block List) (see below for nested schema)
            role: (Map of String) The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            scan_policy: '(Block List, Max: 1) The scan policy for the cluster. (see below for nested schema)'
            schedule: (String) The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to 0 1 * * *.
            skip_completion: (Boolean) If true, the cluster will be created asynchronously. Default value is false.
            subjects: (Block List) (see below for nested schema)
            tag: (String) The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is spectro or helm.
            tags: (Set of String) A list of tags to be applied to the cluster. Tags must be in the form of key:value.
            timeouts: (Block, Optional) (see below for nested schema)
            type: (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
            uid: (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry.
            update: (String)
            values: (String) The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
            variables: '(Map of String) A map of cluster profile variables, specified as key-value pairs. For example: priority = "5".'
        importStatements: []
    spectrocloud_virtual_machine:
        subCategory: ""
        name: spectrocloud_virtual_machine
        title: spectrocloud_virtual_machine Resource - terraform-provider-spectrocloud
        examples:
            - name: tf-test-vm-basic-type
              manifest: |-
                {
                  "cluster_context": "${data.spectrocloud_cluster.vm_enabled_base_cluster.context}",
                  "cluster_uid": "${data.spectrocloud_cluster.vm_enabled_base_cluster.id}",
                  "cpu": [
                    {
                      "cores": 2,
                      "sockets": 1,
                      "threads": 10
                    }
                  ],
                  "disk": [
                    {
                      "disk_device": [
                        {
                          "disk": [
                            {
                              "bus": "virtio"
                            }
                          ]
                        }
                      ],
                      "name": "containerdisk"
                    },
                    {
                      "disk_device": [
                        {
                          "disk": [
                            {
                              "bus": "virtio"
                            }
                          ]
                        }
                      ],
                      "name": "cloudintdisk"
                    }
                  ],
                  "interface": [
                    {
                      "interface_binding_method": "InterfaceMasquerade",
                      "name": "default"
                    }
                  ],
                  "labels": {
                    "tf": "test"
                  },
                  "memory": [
                    {
                      "guest": "1Gi"
                    }
                  ],
                  "name": "tf-test-vm-basic-type",
                  "namespace": "default",
                  "network": [
                    {
                      "name": "default",
                      "network_source": [
                        {
                          "pod": [
                            {}
                          ]
                        }
                      ]
                    }
                  ],
                  "resources": [
                    {
                      "limits": {
                        "cpu": 2,
                        "memory": "1Gi"
                      },
                      "requests": {
                        "cpu": 1,
                        "memory": "1Gi"
                      }
                    }
                  ],
                  "run_on_launch": true,
                  "volume": [
                    {
                      "name": "containerdisk",
                      "volume_source": [
                        {
                          "container_disk": [
                            {
                              "image_url": "gcr.io/spectro-images-public/release/vm-dashboard/os/ubuntu-container-disk:20.04"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "cloudintdisk",
                      "volume_source": [
                        {
                          "cloud_init_config_drive": [
                            {
                              "user_data": "\n#cloud-config\nssh_pwauth: True\nchpasswd: { expire: False }\npassword: spectro\ndisable_root: false\n"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              references:
                cluster_context: data.spectrocloud_cluster.vm_enabled_base_cluster.context
                cluster_uid: data.spectrocloud_cluster.vm_enabled_base_cluster.id
        argumentDocs:
            access_modes: '(Set of String) A set of the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1'
            action: (String) Indicates the type of action that is requested. e.g. Start or Stop.
            affinity: '(Block List, Max: 1) Optional pod scheduling constraints. (see below for nested schema)'
            annotations: (Map of String) An unstructured key value map stored with the VM that may be used to store arbitrary metadata.
            base_vm_name: (String) The name of the source virtual machine that a clone will be created of.
            blank: '(Block List, Max: 1) DataVolumeSourceBlank provides the parameters to create a Data Volume from an empty source. (see below for nested schema)'
            bus: (String) Bus indicates the type of disk device to emulate.
            capacity: (String) Capacity of the sparse disk.
            cert_config_map: (String) Cert_config_map provides a reference to the Registry certs.
            claim_name: '(String) ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
            cloud_init_config_drive: '(Block List, Max: 1) CloudInitConfigDrive represents a cloud-init Config Drive user-data source. (see below for nested schema)'
            cloud_init_no_cloud: (Block Set) Used to specify a cloud-init noCloud image. The image is expected to contain a disk image in a supported format. The disk image is extracted from the cloud-init noCloud image and used as the disk for the VM (see below for nested schema)
            cluster_context: (String) Context of the cluster. Allowed values are project, tenant. Default value is project.
            cluster_uid: (String) The cluster UID to which the virtual machine belongs to.
            conditions: '(Block List, Min: 1) Hold the state information of the VirtualMachine and its VirtualMachineInstance. (see below for nested schema)'
            config_map: '(Block List, Max: 1) ConfigMapVolumeSource adapts a ConfigMap into a volume. (see below for nested schema)'
            container_disk: (Block Set) A container disk is a disk that is backed by a container image. The container image is expected to contain a disk image in a supported format. The disk image is extracted from the container image and used as the disk for the VM. (see below for nested schema)
            content_type: '(String) ContentType options: "kubevirt", "archive".'
            cores: (Number) Cores is the number of cores inside the vmi. Must be a value greater or equal 1
            cpu: '(Block List, Max: 1) CPU allows to specifying the CPU topology. Valid resource keys are "cores" , "sockets" and "threads" (see below for nested schema)'
            create: (String)
            created: (Boolean) Created indicates if the virtual machine is created in the cluster.
            data: (Map of String) Provides additional data in order to perform the Action.
            data_volume: '(Block List, Max: 1) DataVolume represents the dynamic creation a PVC for this volume as well as the process of populating that PVC with a disk image. (see below for nested schema)'
            data_volume_templates: (Block List) dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance template can reference. (see below for nested schema)
            default: (Boolean) Select the default network and add it to the multus-cni.io/default-network annotation.
            default_mode: '(Number) Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
            delete: (String)
            disk: (Block List) Disks describes disks, cdroms, floppy and luns which are connected to the vmi. (see below for nested schema)
            disk_device: '(Block List, Min: 1) DiskDevice specifies as which device the disk should be added to the guest. (see below for nested schema)'
            dns_policy: (String) DNSPolicy defines how a pod's DNS will be configured.
            effect: (String) Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
            empty_disk: '(Block List, Max: 1) EmptyDisk represents a temporary disk which shares the VM''s lifecycle. (see below for nested schema)'
            ephemeral: '(Block List, Max: 1) EphemeralVolumeSource represents a volume that is populated with the contents of a pod. Ephemeral volumes do not support ownership management or SELinux relabeling. (see below for nested schema)'
            eviction_strategy: (String) EvictionStrategy can be set to "LiveMigrate" if the VirtualMachineInstance should be migrated instead of shut-off in case of a node drain.
            generate_name: '(String) Prefix, used by the server, to generate a unique name ONLY IF the name field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency'
            generation: (Number) A sequence number representing a specific generation of the desired state.
            guest: (String) Guest is the amount of memory allocated to the vmi. This value must be less than or equal to the limit if specified.
            host_disk: '(Block List, Max: 1) HostDisk represents a disk created on the host. (see below for nested schema)'
            hostname: (String) Specifies the hostname of the vmi.
            http: '(Block List, Max: 1) DataVolumeSourceHTTP provides the parameters to create a Data Volume from an HTTP source. (see below for nested schema)'
            hugepages: (String) Hugepages attribute specifies the hugepage size, for x86_64 architecture valid values are 1Gi and 2Mi.
            id: (String) The ID of this resource.
            image_url: (String) The registry URL of the image to download.
            interface: (Block List) Interfaces describe network interfaces which are added to the vmi. (see below for nested schema)
            interface_binding_method: '(String) Represents the Interface model, One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139, virtio. Defaults to virtio.'
            items: (Block List) If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. (see below for nested schema)
            key: (String) The label key that the selector applies to.
            label_selector: (Block List) A label query over a set of resources, in this case pods. (see below for nested schema)
            labels: (Map of String) Map of string keys and values that can be used to organize and categorize (scope and select). May match selectors of replication controllers and services.
            limits: (Map of String) Requests is the maximum amount of compute resources allowed. Valid resource keys are "memory" and "cpu"
            liveness_probe: '(Block List, Max: 1) Specification of the desired behavior of the VirtualMachineInstance on the host. (see below for nested schema)'
            match_expressions: (Block List) List of node selector requirements. The requirements are ANDed. (see below for nested schema)
            match_labels: (Map of String) A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of match_expressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
            memory: '(Block List, Max: 1) Memory allows specifying the vmi memory features. (see below for nested schema)'
            message: (String) Condition message.
            metadata: '(Block List, Min: 1, Max: 1) Standard DataVolume''s metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata (see below for nested schema)'
            model: (String) Represents the method which will be used to connect the interface to the guest.
            multus: '(Block List, Max: 1) Multus network. (see below for nested schema)'
            name: (String) Name of the virtual machine, must be unique. Cannot be updated.
            nameservers: (List of String) A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
            namespace: (String) Namespace defines the space within, Name must be unique.
            namespaces: (Set of String) namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
            network: (Block List) List of networks that can be attached to a vm's virtual interface. (see below for nested schema)
            network_data: (String) NetworkData contains config drive inline cloud-init networkdata.
            network_data_base64: (String) NetworkDataBase64 contains config drive cloud-init networkdata as a base64 encoded string.
            network_data_secret_ref: '(Block List, Max: 1) NetworkDataSecretRef references a k8s secret that contains config drive networkdata. (see below for nested schema)'
            network_name: '(String) References to a NetworkAttachmentDefinition CRD object. Format: , /. If namespace is not specified, VMI namespace is assumed.'
            network_source: '(Block List, Max: 1) NetworkSource represents the network type and the source interface that should be connected to the virtual machine. (see below for nested schema)'
            node_affinity: '(Block List, Max: 1) Node affinity scheduling rules for the pod. (see below for nested schema)'
            node_selector: (Map of String) NodeSelector is a selector which must be true for the vmi to fit on a node. Selector which must match a node's labels for the vmi to be scheduled on that node.
            node_selector_term: (Block List) List of node selector terms. The terms are ORed. (see below for nested schema)
            operator: (String) Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
            option: (Block List) A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy. (see below for nested schema)
            over_commit_guest_overhead: (Boolean) Don't ask the scheduler to take the guest-management overhead into account. Instead put the overhead only into the container's memory limit. This can lead to crashes if all memory is in use on a node. Defaults to false.
            path: (String) Path of the disk.
            pci_address: '(String) If specified, the virtual disk will be placed on the guests pci address with the specifed PCI address. For example: 0000:81:01.10'
            persistent_volume_claim: '(Block List, Max: 1) PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. (see below for nested schema)'
            pod: '(Block List, Max: 1) Pod network. (see below for nested schema)'
            pod_affinity: '(Block List, Max: 1) Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.) (see below for nested schema)'
            pod_affinity_term: '(Block List, Min: 1, Max: 1) A pod affinity term, associated with the corresponding weight (see below for nested schema)'
            pod_anti_affinity: '(Block List, Max: 1) Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.) (see below for nested schema)'
            pod_dns_config: '(Block List, Max: 1) Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty (see below for nested schema)'
            preference: '(Block List, Min: 1, Max: 1) A node selector term, associated with the corresponding weight. (see below for nested schema)'
            preferred_during_scheduling_ignored_during_execution: (Block List) The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred. (see below for nested schema)
            priority_class_name: (String) If specified, indicates the pod's priority. If not specified, the pod priority will be default or zero if there is no default.
            pvc: '(Block List, Min: 1, Max: 1) PVC is a pointer to the PVC Spec we want to use. (see below for nested schema)'
            read_only: (Boolean) ReadOnly. Defaults to false.
            readiness_probe: '(Block List, Max: 1) Specification of the desired behavior of the VirtualMachineInstance on the host. (see below for nested schema)'
            ready: (Boolean) Ready indicates if the virtual machine is running and ready.
            reason: (String) Condition reason.
            registry: '(Block List, Max: 1) DataVolumeSourceRegistry provides the parameters to create a Data Volume from an existing PVC. (see below for nested schema)'
            requests: (Map of String) Requests is a description of the initial vmi resources.
            required_during_scheduling_ignored_during_execution: '(Block List, Max: 1) If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node. (see below for nested schema)'
            resource_version: (String) An opaque value that represents the internal version of this VM that can be used by clients to determine when VM has changed.
            resources: '(Block List, Min: 1, Max: 1) Resources describes the Compute Resources required by this vmi. (see below for nested schema)'
            run_on_launch: (Boolean) If set to true, the virtual machine will be started when the cluster is launched. Default value is true.
            run_strategy: (String) Running state indicates the requested running state of the VirtualMachineInstance, mutually exclusive with Running.
            scheduler_name: (String) If specified, the VMI will be dispatched by specified scheduler. If not specified, the VMI will be dispatched by default scheduler.
            searches: (List of String) A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
            secret_ref: (String) Secret_ref provides the secret reference needed to access the HTTP source.
            selector: '(Block List, Max: 1) A label query over volumes to consider for binding. (see below for nested schema)'
            self_link: (String) A URL representing this VM.
            serial: (String) Serial provides the ability to specify a serial number for the disk device.
            service_account: '(Block List, Max: 1) ServiceAccountVolumeSource represents a reference to a service account. (see below for nested schema)'
            service_account_name: (String) Name of the service account in the pod's namespace to use.
            sockets: (Number) Sockets is the number of sockets inside the vmi. Must be a value greater or equal 1.
            source: '(Block List, Max: 1) Source is the src of the data for the requested DataVolume. (see below for nested schema)'
            spec: '(Block List, Min: 1, Max: 1) DataVolumeSpec defines our specification for a DataVolume type (see below for nested schema)'
            state_change_requests: '(Block List, Min: 1) StateChangeRequests indicates a list of actions that should be taken on a VMI. (see below for nested schema)'
            status: '(Block List, Max: 1) VirtualMachineStatus represents the status returned by the controller to describe how the VirtualMachine is doing. (see below for nested schema)'
            storage_class_name: (String) Name of the storage class requested by the claim
            subdomain: (String) If specified, the fully qualified vmi hostname will be "...svc.".
            termination_grace_period_seconds: (Number) Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force terminated.
            threads: (Number) Threads is the number of threads inside the vmi. Must be a value greater or equal 1.
            timeouts: (Block, Optional) (see below for nested schema)
            toleration_seconds: (String) TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
            tolerations: '(Block List) If specified, the pod''s toleration. Optional: Defaults to empty (see below for nested schema)'
            topology_key: (String) empty topology key is interpreted by the scheduler as 'all topologies'
            type: (String) VirtualMachineConditionType represent the type of the VM as concluded from its VMi status.
            uid: (String) The unique in time and space value for this VM.
            url: (String) url is the URL of the http source.
            user_data: (String) UserData contains config drive inline cloud-init userdata.
            user_data_base64: (String) UserDataBase64 contains config drive cloud-init userdata as a base64 encoded string.
            user_data_secret_ref: '(Block List, Max: 1) UserDataSecretRef references a k8s secret that contains config drive userdata. (see below for nested schema)'
            value: '(String) Value of the option. Optional: Defaults to empty.'
            values: (Set of String) Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
            vm_action: '(String) The action to be performed on the virtual machine. Valid values are: start, stop, restart, pause, resume, migrate. Default value is start.'
            vm_network_cidr: (String) CIDR for vm network.
            volume: (Block List) Specification of the desired behavior of the VirtualMachineInstance on the host. (see below for nested schema)
            volume_mode: (String) volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
            volume_name: (String) The binding reference to the PersistentVolume backing this claim.
            volume_source: '(Block List, Min: 1, Max: 1) VolumeSource represents the location and type of the mounted volume. Defaults to Disk, if no type is specified. (see below for nested schema)'
            weight: (Number) weight is in the range 1-100
        importStatements: []
    spectrocloud_workspace:
        subCategory: ""
        name: spectrocloud_workspace
        title: spectrocloud_workspace Resource - terraform-provider-spectrocloud
        examples:
            - name: workspace
              manifest: |-
                {
                  "backup_policy": [
                    {
                      "backup_location_id": "${data.spectrocloud_backup_storage_location.bsl.id}",
                      "cluster_uids": [
                        "${data.spectrocloud_cluster.cluster1.id}"
                      ],
                      "expiry_in_hour": 7200,
                      "include_all_clusters": true,
                      "include_cluster_resources": true,
                      "include_disks": false,
                      "prefix": "prod-backup",
                      "schedule": "0 0 * * SUN"
                    }
                  ],
                  "cluster_rbac_binding": [
                    {
                      "role": {
                        "kind": "ClusterRole",
                        "name": "testrole3"
                      },
                      "subjects": [
                        {
                          "name": "testRoleUser4",
                          "type": "User"
                        },
                        {
                          "name": "testRoleGroup4",
                          "type": "Group"
                        },
                        {
                          "name": "testrolesubject3",
                          "namespace": "testrolenamespace",
                          "type": "ServiceAccount"
                        }
                      ],
                      "type": "ClusterRoleBinding"
                    },
                    {
                      "namespace": "test5ns",
                      "role": {
                        "kind": "Role",
                        "name": "testrolefromns3"
                      },
                      "subjects": [
                        {
                          "name": "testUserRoleFromNS3",
                          "type": "User"
                        },
                        {
                          "name": "testGroupFromNS3",
                          "type": "Group"
                        },
                        {
                          "name": "testrolesubject3",
                          "namespace": "testrolenamespace",
                          "type": "ServiceAccount"
                        }
                      ],
                      "type": "RoleBinding"
                    }
                  ],
                  "clusters": [
                    {
                      "uid": "${data.spectrocloud_cluster.cluster1.id}"
                    }
                  ],
                  "name": "wsp-tf",
                  "namespaces": [
                    {
                      "images_blacklist": [
                        "1",
                        "2",
                        "3"
                      ],
                      "name": "test5ns",
                      "resource_allocation": {
                        "cpu_cores": "2",
                        "memory_MiB": "2048"
                      }
                    }
                  ]
                }
              references:
                backup_policy.backup_location_id: data.spectrocloud_backup_storage_location.bsl.id
                clusters.uid: data.spectrocloud_cluster.cluster1.id
        argumentDocs:
            backup_location_id: (String) The ID of the backup location to use for the backup.
            backup_policy: '(Block List, Max: 1) The backup policy for the cluster. If not specified, no backups will be taken. (see below for nested schema)'
            cluster_rbac_binding: (Block List) The RBAC binding for the cluster. (see below for nested schema)
            cluster_uids: (Set of String) The list of cluster UIDs to include in the backup. If include_all_clusters is set to true, then all clusters will be included.
            clusters: '(Block Set, Min: 1) (see below for nested schema)'
            description: (String)
            expiry_in_hour: (Number) The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
            id: (String) The ID of this resource.
            images_blacklist: (List of String) List of images to disallow for the namespace. For example, ['nginx:latest', 'redis:latest']
            include_all_clusters: (Boolean) Whether to include all clusters in the backup. If set to false, only the clusters specified in cluster_uids will be included.
            include_cluster_resources: '(Boolean) Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)'
            include_cluster_resources_mode: (String) Specifies whether to include the cluster resources in the backup. Supported values are always, never, and auto.
            include_disks: (Boolean) Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
            name: (String)
            namespace: (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            namespaces: (Block List) The namespaces for the cluster. (see below for nested schema)
            prefix: (String) Prefix for the backup name. The backup name will be of the format --.
            resource_allocation: '(Map of String) Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, {cpu_cores: ''2'', memory_MiB: ''2048''}'
            role: (Map of String) The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
            schedule: (String) The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to 0 1 * * *.
            subjects: (Block List) (see below for nested schema)
            tags: (Set of String)
            type: '(String) The type of the RBAC binding. Can be one of the following values: RoleBinding, or ClusterRoleBinding.'
            uid: (String)
        importStatements: []
