---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: machines.virtual.palette.crossplane.io
spec:
  group: virtual.palette.crossplane.io
  names:
    categories:
    - crossplane
    - managed
    - palette
    kind: Machine
    listKind: MachineList
    plural: machines
    singular: machine
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Machine is the Schema for the Machines API. <no value>
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachineSpec defines the desired state of Machine
            properties:
              deletionPolicy:
                default: Delete
                description: DeletionPolicy specifies what will happen to the underlying
                  external when this managed resource is deleted - either "Delete"
                  or "Orphan" the external resource.
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                properties:
                  annotations:
                    additionalProperties:
                      type: string
                    description: The annotations of the virtual machine.
                    type: object
                  baseVmName:
                    description: The name of the source virtual machine that a clone
                      will be created of.
                    type: string
                  cloudInitUserData:
                    description: 'The cloud-init user data to be used for the virtual
                      machine. Default value is `#cloud-config ssh_pwauth: True chpasswd:
                      { expire: False } password: spectro disable_root: false `.'
                    type: string
                  clusterUid:
                    description: The cluster UID to which the virtual machine belongs
                      to.
                    type: string
                  cpuCores:
                    description: The number of CPU cores to be allocated to the virtual
                      machine. Default value is `1`.
                    type: number
                  devices:
                    items:
                      properties:
                        disk:
                          items:
                            properties:
                              bus:
                                description: The bus type of the disk. This is the
                                  name that will be used to identify the disk in the
                                  guest OS.
                                type: string
                              name:
                                description: The name of the disk. This is the name
                                  that will be used to identify the disk in the guest
                                  OS.
                                type: string
                            required:
                            - bus
                            - name
                            type: object
                          type: array
                        interface:
                          items:
                            properties:
                              name:
                                description: The name of the interface. This is the
                                  name that will be used to identify the device interface
                                  in the guest OS.
                                type: string
                            required:
                            - name
                            type: object
                          type: array
                      required:
                      - disk
                      - interface
                      type: object
                    type: array
                  imageUrl:
                    description: The URL of the VM template image to be used for the
                      virtual machine.
                    type: string
                  labels:
                    description: The labels of the virtual machine.
                    items:
                      type: string
                    type: array
                  memory:
                    description: The amount of memory to be allocated to the virtual
                      machine. Default value is `2G`.
                    type: string
                  namespace:
                    description: The namespace of the virtual machine.
                    type: string
                  networkSpec:
                    items:
                      properties:
                        network:
                          description: The network specification for the virtual machine.
                          items:
                            properties:
                              name:
                                description: The name of the network to be attached
                                  to the virtual machine.
                                type: string
                            required:
                            - name
                            type: object
                          type: array
                      type: object
                    type: array
                  runOnLaunch:
                    description: If set to `true`, the virtual machine will be started
                      when the cluster is launched. Default value is `true`.
                    type: boolean
                  vmAction:
                    description: 'The action to be performed on the virtual machine.
                      Valid values are: `start`, `stop`, `restart`, `pause`, `resume`,
                      `migrate`. Default value is `start`.'
                    type: string
                  vmState:
                    description: 'The state of the virtual machine.  The virtual machine
                      can be in one of the following states: `running`, `stopped`,
                      `paused`, `migrating`, `error`, `unknown`.'
                    type: string
                  volumeSpec:
                    description: The volume specification for the virtual machine.
                    items:
                      properties:
                        volume:
                          items:
                            properties:
                              cloudInitNoCloud:
                                description: Used to specify a cloud-init `noCloud`
                                  image. The image is expected to contain a disk image
                                  in a supported format. The disk image is extracted
                                  from the cloud-init `noCloud `image and used as
                                  the disk for the VM
                                items:
                                  properties:
                                    userData:
                                      description: The user data to use for the cloud-init
                                        no cloud disk. This can be a local file path,
                                        a remote URL, or a registry URL.
                                      type: string
                                  required:
                                  - userData
                                  type: object
                                type: array
                              containerDisk:
                                description: A container disk is a disk that is backed
                                  by a container image. The container image is expected
                                  to contain a disk image in a supported format. The
                                  disk image is extracted from the container image
                                  and used as the disk for the VM.
                                items:
                                  properties:
                                    imageUrl:
                                      description: The URL of the container image
                                        to use as the disk. This can be a local file
                                        path, a remote URL, or a registry URL.
                                      type: string
                                  required:
                                  - imageUrl
                                  type: object
                                type: array
                              name:
                                type: string
                            required:
                            - name
                            type: object
                          type: array
                      type: object
                    type: array
                required:
                - clusterUid
                - namespace
                type: object
              providerConfigRef:
                default:
                  name: default
                description: ProviderConfigReference specifies how the provider that
                  will be used to create, observe, update, and delete this managed
                  resource should be configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              providerRef:
                description: 'ProviderReference specifies the provider that will be
                  used to create, observe, update, and delete this managed resource.
                  Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`'
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: PublishConnectionDetailsTo specifies the connection secret
                  config which contains a name, metadata and a reference to secret
                  store config to which any connection details for this managed resource
                  should be written. Connection details frequently include the endpoint,
                  username, and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: SecretStoreConfigRef specifies which secret store
                      config should be used for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations are the annotations to be added to
                          connection secret. - For Kubernetes secrets, this will be
                          used as "metadata.annotations". - It is up to Secret Store
                          implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels are the labels/tags to be added to connection
                          secret. - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store
                          types.
                        type: object
                      type:
                        description: Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: WriteConnectionSecretToReference specifies the namespace
                  and name of a Secret to which any connection details for this managed
                  resource should be written. Connection details frequently include
                  the endpoint, username, and password required to connect to the
                  managed resource. This field is planned to be replaced in a future
                  release in favor of PublishConnectionDetailsTo. Currently, both
                  could be set independently and connection details would be published
                  to both without affecting each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
          status:
            description: MachineStatus defines the observed state of Machine.
            properties:
              atProvider:
                properties:
                  id:
                    type: string
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition
                        transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's
                        last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition
                        type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
