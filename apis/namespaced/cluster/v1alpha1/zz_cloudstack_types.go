/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type CloudstackBackupPolicyInitParameters struct {

	// The ID of the backup location to use for the backup.
	BackupLocationID *string `json:"backupLocationId,omitempty" tf:"backup_location_id,omitempty"`

	// The list of cluster UIDs to include in the backup. If `include_all_clusters` is set to `true`, then all clusters will be included.
	// +listType=set
	ClusterUids []*string `json:"clusterUids,omitempty" tf:"cluster_uids,omitempty"`

	// The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
	ExpiryInHour *float64 `json:"expiryInHour,omitempty" tf:"expiry_in_hour,omitempty"`

	// Whether to include all clusters in the backup. If set to false, only the clusters specified in `cluster_uids` will be included.
	IncludeAllClusters *bool `json:"includeAllClusters,omitempty" tf:"include_all_clusters,omitempty"`

	// Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)
	IncludeClusterResources *bool `json:"includeClusterResources,omitempty" tf:"include_cluster_resources,omitempty"`

	// Specifies whether to include the cluster resources in the backup. Supported values are `always`, `never`, and `auto`.
	IncludeClusterResourcesMode *string `json:"includeClusterResourcesMode,omitempty" tf:"include_cluster_resources_mode,omitempty"`

	// Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
	IncludeDisks *bool `json:"includeDisks,omitempty" tf:"include_disks,omitempty"`

	// The list of Kubernetes namespaces to include in the backup. If not specified, all namespaces will be included.
	// +listType=set
	Namespaces []*string `json:"namespaces,omitempty" tf:"namespaces,omitempty"`

	// Prefix for the backup name. The backup name will be of the format <prefix>-<cluster-name>-<timestamp>.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to `0 1 * * *`.
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`
}

type CloudstackBackupPolicyObservation struct {

	// The ID of the backup location to use for the backup.
	BackupLocationID *string `json:"backupLocationId,omitempty" tf:"backup_location_id,omitempty"`

	// The list of cluster UIDs to include in the backup. If `include_all_clusters` is set to `true`, then all clusters will be included.
	// +listType=set
	ClusterUids []*string `json:"clusterUids,omitempty" tf:"cluster_uids,omitempty"`

	// The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
	ExpiryInHour *float64 `json:"expiryInHour,omitempty" tf:"expiry_in_hour,omitempty"`

	// Whether to include all clusters in the backup. If set to false, only the clusters specified in `cluster_uids` will be included.
	IncludeAllClusters *bool `json:"includeAllClusters,omitempty" tf:"include_all_clusters,omitempty"`

	// Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)
	IncludeClusterResources *bool `json:"includeClusterResources,omitempty" tf:"include_cluster_resources,omitempty"`

	// Specifies whether to include the cluster resources in the backup. Supported values are `always`, `never`, and `auto`.
	IncludeClusterResourcesMode *string `json:"includeClusterResourcesMode,omitempty" tf:"include_cluster_resources_mode,omitempty"`

	// Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
	IncludeDisks *bool `json:"includeDisks,omitempty" tf:"include_disks,omitempty"`

	// The list of Kubernetes namespaces to include in the backup. If not specified, all namespaces will be included.
	// +listType=set
	Namespaces []*string `json:"namespaces,omitempty" tf:"namespaces,omitempty"`

	// Prefix for the backup name. The backup name will be of the format <prefix>-<cluster-name>-<timestamp>.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to `0 1 * * *`.
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`
}

type CloudstackBackupPolicyParameters struct {

	// The ID of the backup location to use for the backup.
	// +kubebuilder:validation:Optional
	BackupLocationID *string `json:"backupLocationId" tf:"backup_location_id,omitempty"`

	// The list of cluster UIDs to include in the backup. If `include_all_clusters` is set to `true`, then all clusters will be included.
	// +kubebuilder:validation:Optional
	// +listType=set
	ClusterUids []*string `json:"clusterUids,omitempty" tf:"cluster_uids,omitempty"`

	// The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
	// +kubebuilder:validation:Optional
	ExpiryInHour *float64 `json:"expiryInHour" tf:"expiry_in_hour,omitempty"`

	// Whether to include all clusters in the backup. If set to false, only the clusters specified in `cluster_uids` will be included.
	// +kubebuilder:validation:Optional
	IncludeAllClusters *bool `json:"includeAllClusters,omitempty" tf:"include_all_clusters,omitempty"`

	// Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)
	// +kubebuilder:validation:Optional
	IncludeClusterResources *bool `json:"includeClusterResources,omitempty" tf:"include_cluster_resources,omitempty"`

	// Specifies whether to include the cluster resources in the backup. Supported values are `always`, `never`, and `auto`.
	// +kubebuilder:validation:Optional
	IncludeClusterResourcesMode *string `json:"includeClusterResourcesMode,omitempty" tf:"include_cluster_resources_mode,omitempty"`

	// Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
	// +kubebuilder:validation:Optional
	IncludeDisks *bool `json:"includeDisks,omitempty" tf:"include_disks,omitempty"`

	// The list of Kubernetes namespaces to include in the backup. If not specified, all namespaces will be included.
	// +kubebuilder:validation:Optional
	// +listType=set
	Namespaces []*string `json:"namespaces,omitempty" tf:"namespaces,omitempty"`

	// Prefix for the backup name. The backup name will be of the format <prefix>-<cluster-name>-<timestamp>.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix" tf:"prefix,omitempty"`

	// The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to `0 1 * * *`.
	// +kubebuilder:validation:Optional
	Schedule *string `json:"schedule" tf:"schedule,omitempty"`
}

type CloudstackCloudConfigInitParameters struct {

	// Endpoint IP to be used for the API server. Should only be set for static CloudStack networks.
	ControlPlaneEndpoint *string `json:"controlPlaneEndpoint,omitempty" tf:"control_plane_endpoint,omitempty"`

	// CloudStack domain name in which the cluster will be provisioned.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// CloudStack project name (optional). If not specified, the cluster will be created in the domain's default project.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// SSH key name for accessing cluster nodes.
	SSHKeyName *string `json:"sshKeyName,omitempty" tf:"ssh_key_name,omitempty"`

	// Determines if an external managed CKS (CloudStack Kubernetes Service) cluster should be created. Default is `false`.
	SyncWithCks *bool `json:"syncWithCks,omitempty" tf:"sync_with_cks,omitempty"`

	// List of CloudStack zones for multi-AZ deployments. If only one zone is specified, it will be treated as single-zone deployment.
	Zone []ZoneInitParameters `json:"zone,omitempty" tf:"zone,omitempty"`
}

type CloudstackCloudConfigObservation struct {

	// Endpoint IP to be used for the API server. Should only be set for static CloudStack networks.
	ControlPlaneEndpoint *string `json:"controlPlaneEndpoint,omitempty" tf:"control_plane_endpoint,omitempty"`

	// CloudStack domain name in which the cluster will be provisioned.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// CloudStack project name (optional). If not specified, the cluster will be created in the domain's default project.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// SSH key name for accessing cluster nodes.
	SSHKeyName *string `json:"sshKeyName,omitempty" tf:"ssh_key_name,omitempty"`

	// Determines if an external managed CKS (CloudStack Kubernetes Service) cluster should be created. Default is `false`.
	SyncWithCks *bool `json:"syncWithCks,omitempty" tf:"sync_with_cks,omitempty"`

	// List of CloudStack zones for multi-AZ deployments. If only one zone is specified, it will be treated as single-zone deployment.
	Zone []ZoneObservation `json:"zone,omitempty" tf:"zone,omitempty"`
}

type CloudstackCloudConfigParameters struct {

	// Endpoint IP to be used for the API server. Should only be set for static CloudStack networks.
	// +kubebuilder:validation:Optional
	ControlPlaneEndpoint *string `json:"controlPlaneEndpoint,omitempty" tf:"control_plane_endpoint,omitempty"`

	// CloudStack domain name in which the cluster will be provisioned.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// CloudStack project name (optional). If not specified, the cluster will be created in the domain's default project.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// SSH key name for accessing cluster nodes.
	// +kubebuilder:validation:Optional
	SSHKeyName *string `json:"sshKeyName,omitempty" tf:"ssh_key_name,omitempty"`

	// Determines if an external managed CKS (CloudStack Kubernetes Service) cluster should be created. Default is `false`.
	// +kubebuilder:validation:Optional
	SyncWithCks *bool `json:"syncWithCks,omitempty" tf:"sync_with_cks,omitempty"`

	// List of CloudStack zones for multi-AZ deployments. If only one zone is specified, it will be treated as single-zone deployment.
	// +kubebuilder:validation:Optional
	Zone []ZoneParameters `json:"zone" tf:"zone,omitempty"`
}

type CloudstackClusterProfileInitParameters struct {

	// The ID of the cluster profile.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// For packs of type `spectro`, `helm`, and `manifest`, at least one pack must be specified.
	Pack []CloudstackClusterProfilePackInitParameters `json:"pack,omitempty" tf:"pack,omitempty"`

	// A map of cluster profile variables, specified as key-value pairs. For example: `priority = "5"`.
	// +mapType=granular
	Variables map[string]*string `json:"variables,omitempty" tf:"variables,omitempty"`
}

type CloudstackClusterProfileObservation struct {

	// The ID of the cluster profile.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// For packs of type `spectro`, `helm`, and `manifest`, at least one pack must be specified.
	Pack []CloudstackClusterProfilePackObservation `json:"pack,omitempty" tf:"pack,omitempty"`

	// A map of cluster profile variables, specified as key-value pairs. For example: `priority = "5"`.
	// +mapType=granular
	Variables map[string]*string `json:"variables,omitempty" tf:"variables,omitempty"`
}

type CloudstackClusterProfilePackInitParameters struct {
	Manifest []CloudstackClusterProfilePackManifestInitParameters `json:"manifest,omitempty" tf:"manifest,omitempty"`

	// The name of the pack. The name must be unique within the cluster profile.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The registry name of the pack. The registry name is the human-readable name of the registry. This attribute can be used instead of `registry_uid` for better readability. If `uid` is not provided, this field can be used along with `name` and `tag` to resolve the pack UID internally. Either `registry_uid` or `registry_name` can be specified, but not both.
	RegistryName *string `json:"registryName,omitempty" tf:"registry_name,omitempty"`

	// The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name. If `uid` is not provided, this field is required along with `name` and `tag` to resolve the pack UID internally. Either `registry_uid` or `registry_name` can be specified, but not both.
	RegistryUID *string `json:"registryUid,omitempty" tf:"registry_uid,omitempty"`

	// The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is `spectro` or `helm`. If `uid` is not provided, this field is required along with `name` and `registry_uid` (or `registry_name`) to resolve the pack UID internally.
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// The type of the pack. Allowed values are `spectro`, `manifest`, `helm`, or `oci`. The default value is spectro. If using an OCI registry for pack, set the type to `oci`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The unique identifier of the pack. The value can be looked up using the [`spectrocloud_pack`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs/data-sources/pack) data source. This value is required if the pack type is `spectro` and for `helm` if the chart is from a public helm registry. If not provided, all of `name`, `tag`, and `registry_uid` must be specified to resolve the pack UID internally.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
	Values *string `json:"values,omitempty" tf:"values,omitempty"`
}

type CloudstackClusterProfilePackManifestInitParameters struct {

	// The content of the manifest. The content is the YAML content of the manifest.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The name of the manifest. The name must be unique within the pack.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CloudstackClusterProfilePackManifestObservation struct {

	// The content of the manifest. The content is the YAML content of the manifest.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The name of the manifest. The name must be unique within the pack.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type CloudstackClusterProfilePackManifestParameters struct {

	// The content of the manifest. The content is the YAML content of the manifest.
	// +kubebuilder:validation:Optional
	Content *string `json:"content" tf:"content,omitempty"`

	// The name of the manifest. The name must be unique within the pack.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type CloudstackClusterProfilePackObservation struct {
	Manifest []CloudstackClusterProfilePackManifestObservation `json:"manifest,omitempty" tf:"manifest,omitempty"`

	// The name of the pack. The name must be unique within the cluster profile.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The registry name of the pack. The registry name is the human-readable name of the registry. This attribute can be used instead of `registry_uid` for better readability. If `uid` is not provided, this field can be used along with `name` and `tag` to resolve the pack UID internally. Either `registry_uid` or `registry_name` can be specified, but not both.
	RegistryName *string `json:"registryName,omitempty" tf:"registry_name,omitempty"`

	// The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name. If `uid` is not provided, this field is required along with `name` and `tag` to resolve the pack UID internally. Either `registry_uid` or `registry_name` can be specified, but not both.
	RegistryUID *string `json:"registryUid,omitempty" tf:"registry_uid,omitempty"`

	// The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is `spectro` or `helm`. If `uid` is not provided, this field is required along with `name` and `registry_uid` (or `registry_name`) to resolve the pack UID internally.
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// The type of the pack. Allowed values are `spectro`, `manifest`, `helm`, or `oci`. The default value is spectro. If using an OCI registry for pack, set the type to `oci`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The unique identifier of the pack. The value can be looked up using the [`spectrocloud_pack`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs/data-sources/pack) data source. This value is required if the pack type is `spectro` and for `helm` if the chart is from a public helm registry. If not provided, all of `name`, `tag`, and `registry_uid` must be specified to resolve the pack UID internally.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
	Values *string `json:"values,omitempty" tf:"values,omitempty"`
}

type CloudstackClusterProfilePackParameters struct {

	// +kubebuilder:validation:Optional
	Manifest []CloudstackClusterProfilePackManifestParameters `json:"manifest,omitempty" tf:"manifest,omitempty"`

	// The name of the pack. The name must be unique within the cluster profile.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The registry name of the pack. The registry name is the human-readable name of the registry. This attribute can be used instead of `registry_uid` for better readability. If `uid` is not provided, this field can be used along with `name` and `tag` to resolve the pack UID internally. Either `registry_uid` or `registry_name` can be specified, but not both.
	// +kubebuilder:validation:Optional
	RegistryName *string `json:"registryName,omitempty" tf:"registry_name,omitempty"`

	// The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name. If `uid` is not provided, this field is required along with `name` and `tag` to resolve the pack UID internally. Either `registry_uid` or `registry_name` can be specified, but not both.
	// +kubebuilder:validation:Optional
	RegistryUID *string `json:"registryUid,omitempty" tf:"registry_uid,omitempty"`

	// The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is `spectro` or `helm`. If `uid` is not provided, this field is required along with `name` and `registry_uid` (or `registry_name`) to resolve the pack UID internally.
	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// The type of the pack. Allowed values are `spectro`, `manifest`, `helm`, or `oci`. The default value is spectro. If using an OCI registry for pack, set the type to `oci`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The unique identifier of the pack. The value can be looked up using the [`spectrocloud_pack`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs/data-sources/pack) data source. This value is required if the pack type is `spectro` and for `helm` if the chart is from a public helm registry. If not provided, all of `name`, `tag`, and `registry_uid` must be specified to resolve the pack UID internally.
	// +kubebuilder:validation:Optional
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
	// +kubebuilder:validation:Optional
	Values *string `json:"values,omitempty" tf:"values,omitempty"`
}

type CloudstackClusterProfileParameters struct {

	// The ID of the cluster profile.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// For packs of type `spectro`, `helm`, and `manifest`, at least one pack must be specified.
	// +kubebuilder:validation:Optional
	Pack []CloudstackClusterProfilePackParameters `json:"pack,omitempty" tf:"pack,omitempty"`

	// A map of cluster profile variables, specified as key-value pairs. For example: `priority = "5"`.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Variables map[string]*string `json:"variables,omitempty" tf:"variables,omitempty"`
}

type CloudstackClusterRbacBindingInitParameters struct {

	// The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	// +mapType=granular
	Role map[string]*string `json:"role,omitempty" tf:"role,omitempty"`

	Subjects []CloudstackClusterRbacBindingSubjectsInitParameters `json:"subjects,omitempty" tf:"subjects,omitempty"`

	// The type of the RBAC binding. Can be one of the following values: `RoleBinding`, or `ClusterRoleBinding`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CloudstackClusterRbacBindingObservation struct {

	// The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	// +mapType=granular
	Role map[string]*string `json:"role,omitempty" tf:"role,omitempty"`

	Subjects []CloudstackClusterRbacBindingSubjectsObservation `json:"subjects,omitempty" tf:"subjects,omitempty"`

	// The type of the RBAC binding. Can be one of the following values: `RoleBinding`, or `ClusterRoleBinding`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CloudstackClusterRbacBindingParameters struct {

	// The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Role map[string]*string `json:"role,omitempty" tf:"role,omitempty"`

	// +kubebuilder:validation:Optional
	Subjects []CloudstackClusterRbacBindingSubjectsParameters `json:"subjects,omitempty" tf:"subjects,omitempty"`

	// The type of the RBAC binding. Can be one of the following values: `RoleBinding`, or `ClusterRoleBinding`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type CloudstackClusterRbacBindingSubjectsInitParameters struct {

	// The name of the subject. Required if 'type' is set to 'User' or 'Group'.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The Kubernetes namespace of the subject. Required if 'type' is set to 'ServiceAccount'.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The type of the subject. Can be one of the following values: `User`, `Group`, or `ServiceAccount`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CloudstackClusterRbacBindingSubjectsObservation struct {

	// The name of the subject. Required if 'type' is set to 'User' or 'Group'.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The Kubernetes namespace of the subject. Required if 'type' is set to 'ServiceAccount'.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The type of the subject. Can be one of the following values: `User`, `Group`, or `ServiceAccount`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CloudstackClusterRbacBindingSubjectsParameters struct {

	// The name of the subject. Required if 'type' is set to 'User' or 'Group'.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The Kubernetes namespace of the subject. Required if 'type' is set to 'ServiceAccount'.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The type of the subject. Can be one of the following values: `User`, `Group`, or `ServiceAccount`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type CloudstackHostConfigInitParameters struct {

	// The external traffic policy for the cluster.
	ExternalTrafficPolicy *string `json:"externalTrafficPolicy,omitempty" tf:"external_traffic_policy,omitempty"`

	// The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
	HostEndpointType *string `json:"hostEndpointType,omitempty" tf:"host_endpoint_type,omitempty"`

	// The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
	IngressHost *string `json:"ingressHost,omitempty" tf:"ingress_host,omitempty"`

	// The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
	LoadBalancerSourceRanges *string `json:"loadBalancerSourceRanges,omitempty" tf:"load_balancer_source_ranges,omitempty"`
}

type CloudstackHostConfigObservation struct {

	// The external traffic policy for the cluster.
	ExternalTrafficPolicy *string `json:"externalTrafficPolicy,omitempty" tf:"external_traffic_policy,omitempty"`

	// The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
	HostEndpointType *string `json:"hostEndpointType,omitempty" tf:"host_endpoint_type,omitempty"`

	// The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
	IngressHost *string `json:"ingressHost,omitempty" tf:"ingress_host,omitempty"`

	// The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
	LoadBalancerSourceRanges *string `json:"loadBalancerSourceRanges,omitempty" tf:"load_balancer_source_ranges,omitempty"`
}

type CloudstackHostConfigParameters struct {

	// The external traffic policy for the cluster.
	// +kubebuilder:validation:Optional
	ExternalTrafficPolicy *string `json:"externalTrafficPolicy,omitempty" tf:"external_traffic_policy,omitempty"`

	// The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
	// +kubebuilder:validation:Optional
	HostEndpointType *string `json:"hostEndpointType,omitempty" tf:"host_endpoint_type,omitempty"`

	// The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
	// +kubebuilder:validation:Optional
	IngressHost *string `json:"ingressHost,omitempty" tf:"ingress_host,omitempty"`

	// The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
	// +kubebuilder:validation:Optional
	LoadBalancerSourceRanges *string `json:"loadBalancerSourceRanges,omitempty" tf:"load_balancer_source_ranges,omitempty"`
}

type CloudstackInitParameters struct {

	// The setting to apply the cluster profile. `DownloadAndInstall` will download and install packs in one action. `DownloadAndInstallLater` will only download artifact and postpone install for later. Default value is `DownloadAndInstall`.
	ApplySetting *string `json:"applySetting,omitempty" tf:"apply_setting,omitempty"`

	// The backup policy for the cluster. If not specified, no backups will be taken.
	BackupPolicy []CloudstackBackupPolicyInitParameters `json:"backupPolicy,omitempty" tf:"backup_policy,omitempty"`

	// ID of the CloudStack cloud account used for the cluster. This cloud account must be of type `cloudstack`.
	CloudAccountID *string `json:"cloudAccountId,omitempty" tf:"cloud_account_id,omitempty"`

	// CloudStack cluster configuration.
	CloudConfig []CloudstackCloudConfigInitParameters `json:"cloudConfig,omitempty" tf:"cloud_config,omitempty"`

	// `cluster_meta_attribute` can be used to set additional cluster metadata information, eg `{'nic_name': 'test', 'env': 'stage'}`
	ClusterMetaAttribute *string `json:"clusterMetaAttribute,omitempty" tf:"cluster_meta_attribute,omitempty"`

	ClusterProfile []CloudstackClusterProfileInitParameters `json:"clusterProfile,omitempty" tf:"cluster_profile,omitempty"`

	// The RBAC binding for the cluster.
	ClusterRbacBinding []CloudstackClusterRbacBindingInitParameters `json:"clusterRbacBinding,omitempty" tf:"cluster_rbac_binding,omitempty"`

	// The context of the CloudStack configuration. Allowed values are `project` or `tenant`. Default is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// The description of the cluster. Default value is empty string.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The host configuration for the cluster.
	HostConfig []CloudstackHostConfigInitParameters `json:"hostConfig,omitempty" tf:"host_config,omitempty"`

	// Machine pool configuration for the cluster.
	MachinePool []CloudstackMachinePoolInitParameters `json:"machinePool,omitempty" tf:"machine_pool,omitempty"`

	// The namespaces for the cluster.
	Namespaces []CloudstackNamespacesInitParameters `json:"namespaces,omitempty" tf:"namespaces,omitempty"`

	// The date and time after which to patch the cluster. Prefix the time value with the respective RFC. Ex: `RFC3339: 2006-01-02T15:04:05Z07:00`
	OsPatchAfter *string `json:"osPatchAfter,omitempty" tf:"os_patch_after,omitempty"`

	// Whether to apply OS patch on boot. Default is `false`.
	OsPatchOnBoot *bool `json:"osPatchOnBoot,omitempty" tf:"os_patch_on_boot,omitempty"`

	// Cron schedule for OS patching. This must be in the form of `0 0 * * *`.
	OsPatchSchedule *string `json:"osPatchSchedule,omitempty" tf:"os_patch_schedule,omitempty"`

	// The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is `unlock`, meaning upgrades occur automatically. Setting it to `lock` pauses automatic agent upgrades for the cluster.
	PauseAgentUpgrades *string `json:"pauseAgentUpgrades,omitempty" tf:"pause_agent_upgrades,omitempty"`

	// To authorize the cluster repave, set the value to `Approved` for approval and `""` to decline. Default value is `""`.
	ReviewRepaveState *string `json:"reviewRepaveState,omitempty" tf:"review_repave_state,omitempty"`

	// The scan policy for the cluster.
	ScanPolicy []CloudstackScanPolicyInitParameters `json:"scanPolicy,omitempty" tf:"scan_policy,omitempty"`

	// A list of tags to be applied to the cluster. Tags must be in the form of `key:value`.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type CloudstackLocationConfigInitParameters struct {
}

type CloudstackLocationConfigObservation struct {
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	CountryName *string `json:"countryName,omitempty" tf:"country_name,omitempty"`

	Latitude *float64 `json:"latitude,omitempty" tf:"latitude,omitempty"`

	Longitude *float64 `json:"longitude,omitempty" tf:"longitude,omitempty"`

	RegionCode *string `json:"regionCode,omitempty" tf:"region_code,omitempty"`

	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`
}

type CloudstackLocationConfigParameters struct {
}

type CloudstackMachinePoolInitParameters struct {

	// Additional labels to be applied to the machine pool. Labels must be in the form of `key:value`.
	// +mapType=granular
	AdditionalLabels map[string]*string `json:"additionalLabels,omitempty" tf:"additional_labels,omitempty"`

	// List of affinity group IDs for VM placement (optional).
	// +listType=set
	AffinityGroupIds []*string `json:"affinityGroupIds,omitempty" tf:"affinity_group_ids,omitempty"`

	// Whether this machine pool is a control plane. Defaults to `false`.
	ControlPlane *bool `json:"controlPlane,omitempty" tf:"control_plane,omitempty"`

	// Whether this machine pool is a control plane and a worker. Defaults to `false`.
	ControlPlaneAsWorker *bool `json:"controlPlaneAsWorker,omitempty" tf:"control_plane_as_worker,omitempty"`

	// Number of nodes in the machine pool.
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// Additional details for instance creation as key-value pairs.
	// +mapType=granular
	Details map[string]*string `json:"details,omitempty" tf:"details,omitempty"`

	// CloudStack disk offering name for root disk (optional).
	DiskOffering *string `json:"diskOffering,omitempty" tf:"disk_offering,omitempty"`

	// Maximum number of nodes in the machine pool. This is used for autoscaling.
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// Minimum number of nodes in the machine pool. This is used for autoscaling.
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`

	// Name of the machine pool.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network configuration for the machine pool instances.
	Network []MachinePoolNetworkInitParameters `json:"network,omitempty" tf:"network,omitempty"`

	Node []CloudstackMachinePoolNodeInitParameters `json:"node,omitempty" tf:"node,omitempty"`

	// CloudStack compute offering (instance type/size) name.
	Offering *string `json:"offering,omitempty" tf:"offering,omitempty"`

	// Root disk size in GB (optional).
	RootDiskSizeGb *float64 `json:"rootDiskSizeGb,omitempty" tf:"root_disk_size_gb,omitempty"`

	Taints []CloudstackMachinePoolTaintsInitParameters `json:"taints,omitempty" tf:"taints,omitempty"`

	// Update strategy for the machine pool. Valid values are `RollingUpdateScaleOut` and `RollingUpdateScaleIn`.
	UpdateStrategy *string `json:"updateStrategy,omitempty" tf:"update_strategy,omitempty"`
}

type CloudstackMachinePoolNodeInitParameters struct {

	// The action to perform on the node. Valid values are: `cordon`, `uncordon`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The node_id of the node, For example `i-07f899a33dee624f7`
	NodeID *string `json:"nodeId,omitempty" tf:"node_id,omitempty"`
}

type CloudstackMachinePoolNodeObservation struct {

	// The action to perform on the node. Valid values are: `cordon`, `uncordon`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The node_id of the node, For example `i-07f899a33dee624f7`
	NodeID *string `json:"nodeId,omitempty" tf:"node_id,omitempty"`
}

type CloudstackMachinePoolNodeParameters struct {

	// The action to perform on the node. Valid values are: `cordon`, `uncordon`.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// The node_id of the node, For example `i-07f899a33dee624f7`
	// +kubebuilder:validation:Optional
	NodeID *string `json:"nodeId" tf:"node_id,omitempty"`
}

type CloudstackMachinePoolObservation struct {

	// Additional labels to be applied to the machine pool. Labels must be in the form of `key:value`.
	// +mapType=granular
	AdditionalLabels map[string]*string `json:"additionalLabels,omitempty" tf:"additional_labels,omitempty"`

	// List of affinity group IDs for VM placement (optional).
	// +listType=set
	AffinityGroupIds []*string `json:"affinityGroupIds,omitempty" tf:"affinity_group_ids,omitempty"`

	// Whether this machine pool is a control plane. Defaults to `false`.
	ControlPlane *bool `json:"controlPlane,omitempty" tf:"control_plane,omitempty"`

	// Whether this machine pool is a control plane and a worker. Defaults to `false`.
	ControlPlaneAsWorker *bool `json:"controlPlaneAsWorker,omitempty" tf:"control_plane_as_worker,omitempty"`

	// Number of nodes in the machine pool.
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// Additional details for instance creation as key-value pairs.
	// +mapType=granular
	Details map[string]*string `json:"details,omitempty" tf:"details,omitempty"`

	// CloudStack disk offering name for root disk (optional).
	DiskOffering *string `json:"diskOffering,omitempty" tf:"disk_offering,omitempty"`

	// Maximum number of nodes in the machine pool. This is used for autoscaling.
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// Minimum number of nodes in the machine pool. This is used for autoscaling.
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`

	// Name of the machine pool.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network configuration for the machine pool instances.
	Network []MachinePoolNetworkObservation `json:"network,omitempty" tf:"network,omitempty"`

	Node []CloudstackMachinePoolNodeObservation `json:"node,omitempty" tf:"node,omitempty"`

	// CloudStack compute offering (instance type/size) name.
	Offering *string `json:"offering,omitempty" tf:"offering,omitempty"`

	// Root disk size in GB (optional).
	RootDiskSizeGb *float64 `json:"rootDiskSizeGb,omitempty" tf:"root_disk_size_gb,omitempty"`

	Taints []CloudstackMachinePoolTaintsObservation `json:"taints,omitempty" tf:"taints,omitempty"`

	// Update strategy for the machine pool. Valid values are `RollingUpdateScaleOut` and `RollingUpdateScaleIn`.
	UpdateStrategy *string `json:"updateStrategy,omitempty" tf:"update_strategy,omitempty"`
}

type CloudstackMachinePoolParameters struct {

	// Additional labels to be applied to the machine pool. Labels must be in the form of `key:value`.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	AdditionalLabels map[string]*string `json:"additionalLabels,omitempty" tf:"additional_labels,omitempty"`

	// List of affinity group IDs for VM placement (optional).
	// +kubebuilder:validation:Optional
	// +listType=set
	AffinityGroupIds []*string `json:"affinityGroupIds,omitempty" tf:"affinity_group_ids,omitempty"`

	// Whether this machine pool is a control plane. Defaults to `false`.
	// +kubebuilder:validation:Optional
	ControlPlane *bool `json:"controlPlane,omitempty" tf:"control_plane,omitempty"`

	// Whether this machine pool is a control plane and a worker. Defaults to `false`.
	// +kubebuilder:validation:Optional
	ControlPlaneAsWorker *bool `json:"controlPlaneAsWorker,omitempty" tf:"control_plane_as_worker,omitempty"`

	// Number of nodes in the machine pool.
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count" tf:"count,omitempty"`

	// Additional details for instance creation as key-value pairs.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Details map[string]*string `json:"details,omitempty" tf:"details,omitempty"`

	// CloudStack disk offering name for root disk (optional).
	// +kubebuilder:validation:Optional
	DiskOffering *string `json:"diskOffering,omitempty" tf:"disk_offering,omitempty"`

	// Maximum number of nodes in the machine pool. This is used for autoscaling.
	// +kubebuilder:validation:Optional
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// Minimum number of nodes in the machine pool. This is used for autoscaling.
	// +kubebuilder:validation:Optional
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`

	// Name of the machine pool.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Network configuration for the machine pool instances.
	// +kubebuilder:validation:Optional
	Network []MachinePoolNetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// +kubebuilder:validation:Optional
	Node []CloudstackMachinePoolNodeParameters `json:"node,omitempty" tf:"node,omitempty"`

	// CloudStack compute offering (instance type/size) name.
	// +kubebuilder:validation:Optional
	Offering *string `json:"offering" tf:"offering,omitempty"`

	// Root disk size in GB (optional).
	// +kubebuilder:validation:Optional
	RootDiskSizeGb *float64 `json:"rootDiskSizeGb,omitempty" tf:"root_disk_size_gb,omitempty"`

	// +kubebuilder:validation:Optional
	Taints []CloudstackMachinePoolTaintsParameters `json:"taints,omitempty" tf:"taints,omitempty"`

	// Update strategy for the machine pool. Valid values are `RollingUpdateScaleOut` and `RollingUpdateScaleIn`.
	// +kubebuilder:validation:Optional
	UpdateStrategy *string `json:"updateStrategy,omitempty" tf:"update_strategy,omitempty"`
}

type CloudstackMachinePoolTaintsInitParameters struct {

	// The effect of the taint. Allowed values are: `NoSchedule`, `PreferNoSchedule` or `NoExecute`.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// The key of the taint.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The value of the taint.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CloudstackMachinePoolTaintsObservation struct {

	// The effect of the taint. Allowed values are: `NoSchedule`, `PreferNoSchedule` or `NoExecute`.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// The key of the taint.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The value of the taint.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CloudstackMachinePoolTaintsParameters struct {

	// The effect of the taint. Allowed values are: `NoSchedule`, `PreferNoSchedule` or `NoExecute`.
	// +kubebuilder:validation:Optional
	Effect *string `json:"effect" tf:"effect,omitempty"`

	// The key of the taint.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// The value of the taint.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type CloudstackNamespacesInitParameters struct {

	// Name of the namespace. This is the name of the Kubernetes namespace in the cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, `{cpu_cores: '2', memory_MiB: '2048', gpu_limit: '1', gpu_provider: 'nvidia'}`
	// +mapType=granular
	ResourceAllocation map[string]*string `json:"resourceAllocation,omitempty" tf:"resource_allocation,omitempty"`
}

type CloudstackNamespacesObservation struct {

	// Name of the namespace. This is the name of the Kubernetes namespace in the cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, `{cpu_cores: '2', memory_MiB: '2048', gpu_limit: '1', gpu_provider: 'nvidia'}`
	// +mapType=granular
	ResourceAllocation map[string]*string `json:"resourceAllocation,omitempty" tf:"resource_allocation,omitempty"`
}

type CloudstackNamespacesParameters struct {

	// Name of the namespace. This is the name of the Kubernetes namespace in the cluster.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, `{cpu_cores: '2', memory_MiB: '2048', gpu_limit: '1', gpu_provider: 'nvidia'}`
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ResourceAllocation map[string]*string `json:"resourceAllocation" tf:"resource_allocation,omitempty"`
}

type CloudstackObservation struct {

	// Admin Kube-config for the cluster. This can be used to connect to the cluster using `kubectl`, With admin privilege.
	AdminKubeConfig *string `json:"adminKubeConfig,omitempty" tf:"admin_kube_config,omitempty"`

	// The setting to apply the cluster profile. `DownloadAndInstall` will download and install packs in one action. `DownloadAndInstallLater` will only download artifact and postpone install for later. Default value is `DownloadAndInstall`.
	ApplySetting *string `json:"applySetting,omitempty" tf:"apply_setting,omitempty"`

	// The backup policy for the cluster. If not specified, no backups will be taken.
	BackupPolicy []CloudstackBackupPolicyObservation `json:"backupPolicy,omitempty" tf:"backup_policy,omitempty"`

	// ID of the CloudStack cloud account used for the cluster. This cloud account must be of type `cloudstack`.
	CloudAccountID *string `json:"cloudAccountId,omitempty" tf:"cloud_account_id,omitempty"`

	// CloudStack cluster configuration.
	CloudConfig []CloudstackCloudConfigObservation `json:"cloudConfig,omitempty" tf:"cloud_config,omitempty"`

	// ID of the cloud config used for the cluster. This cloud config must be of type `cloudstack`.
	CloudConfigID *string `json:"cloudConfigId,omitempty" tf:"cloud_config_id,omitempty"`

	// `cluster_meta_attribute` can be used to set additional cluster metadata information, eg `{'nic_name': 'test', 'env': 'stage'}`
	ClusterMetaAttribute *string `json:"clusterMetaAttribute,omitempty" tf:"cluster_meta_attribute,omitempty"`

	ClusterProfile []CloudstackClusterProfileObservation `json:"clusterProfile,omitempty" tf:"cluster_profile,omitempty"`

	// The RBAC binding for the cluster.
	ClusterRbacBinding []CloudstackClusterRbacBindingObservation `json:"clusterRbacBinding,omitempty" tf:"cluster_rbac_binding,omitempty"`

	// The context of the CloudStack configuration. Allowed values are `project` or `tenant`. Default is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// The description of the cluster. Default value is empty string.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The host configuration for the cluster.
	HostConfig []CloudstackHostConfigObservation `json:"hostConfig,omitempty" tf:"host_config,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Kubeconfig for the cluster. This can be used to connect to the cluster using `kubectl`.
	Kubeconfig *string `json:"kubeconfig,omitempty" tf:"kubeconfig,omitempty"`

	// The location of the cluster.
	LocationConfig []CloudstackLocationConfigObservation `json:"locationConfig,omitempty" tf:"location_config,omitempty"`

	// Machine pool configuration for the cluster.
	MachinePool []CloudstackMachinePoolObservation `json:"machinePool,omitempty" tf:"machine_pool,omitempty"`

	// The namespaces for the cluster.
	Namespaces []CloudstackNamespacesObservation `json:"namespaces,omitempty" tf:"namespaces,omitempty"`

	// The date and time after which to patch the cluster. Prefix the time value with the respective RFC. Ex: `RFC3339: 2006-01-02T15:04:05Z07:00`
	OsPatchAfter *string `json:"osPatchAfter,omitempty" tf:"os_patch_after,omitempty"`

	// Whether to apply OS patch on boot. Default is `false`.
	OsPatchOnBoot *bool `json:"osPatchOnBoot,omitempty" tf:"os_patch_on_boot,omitempty"`

	// Cron schedule for OS patching. This must be in the form of `0 0 * * *`.
	OsPatchSchedule *string `json:"osPatchSchedule,omitempty" tf:"os_patch_schedule,omitempty"`

	// The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is `unlock`, meaning upgrades occur automatically. Setting it to `lock` pauses automatic agent upgrades for the cluster.
	PauseAgentUpgrades *string `json:"pauseAgentUpgrades,omitempty" tf:"pause_agent_upgrades,omitempty"`

	// To authorize the cluster repave, set the value to `Approved` for approval and `""` to decline. Default value is `""`.
	ReviewRepaveState *string `json:"reviewRepaveState,omitempty" tf:"review_repave_state,omitempty"`

	// The scan policy for the cluster.
	ScanPolicy []CloudstackScanPolicyObservation `json:"scanPolicy,omitempty" tf:"scan_policy,omitempty"`

	// A list of tags to be applied to the cluster. Tags must be in the form of `key:value`.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type CloudstackParameters struct {

	// The setting to apply the cluster profile. `DownloadAndInstall` will download and install packs in one action. `DownloadAndInstallLater` will only download artifact and postpone install for later. Default value is `DownloadAndInstall`.
	// +kubebuilder:validation:Optional
	ApplySetting *string `json:"applySetting,omitempty" tf:"apply_setting,omitempty"`

	// The backup policy for the cluster. If not specified, no backups will be taken.
	// +kubebuilder:validation:Optional
	BackupPolicy []CloudstackBackupPolicyParameters `json:"backupPolicy,omitempty" tf:"backup_policy,omitempty"`

	// ID of the CloudStack cloud account used for the cluster. This cloud account must be of type `cloudstack`.
	// +kubebuilder:validation:Optional
	CloudAccountID *string `json:"cloudAccountId,omitempty" tf:"cloud_account_id,omitempty"`

	// CloudStack cluster configuration.
	// +kubebuilder:validation:Optional
	CloudConfig []CloudstackCloudConfigParameters `json:"cloudConfig,omitempty" tf:"cloud_config,omitempty"`

	// `cluster_meta_attribute` can be used to set additional cluster metadata information, eg `{'nic_name': 'test', 'env': 'stage'}`
	// +kubebuilder:validation:Optional
	ClusterMetaAttribute *string `json:"clusterMetaAttribute,omitempty" tf:"cluster_meta_attribute,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterProfile []CloudstackClusterProfileParameters `json:"clusterProfile,omitempty" tf:"cluster_profile,omitempty"`

	// The RBAC binding for the cluster.
	// +kubebuilder:validation:Optional
	ClusterRbacBinding []CloudstackClusterRbacBindingParameters `json:"clusterRbacBinding,omitempty" tf:"cluster_rbac_binding,omitempty"`

	// The context of the CloudStack configuration. Allowed values are `project` or `tenant`. Default is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	// +kubebuilder:validation:Optional
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// The description of the cluster. Default value is empty string.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The host configuration for the cluster.
	// +kubebuilder:validation:Optional
	HostConfig []CloudstackHostConfigParameters `json:"hostConfig,omitempty" tf:"host_config,omitempty"`

	// Machine pool configuration for the cluster.
	// +kubebuilder:validation:Optional
	MachinePool []CloudstackMachinePoolParameters `json:"machinePool,omitempty" tf:"machine_pool,omitempty"`

	// The namespaces for the cluster.
	// +kubebuilder:validation:Optional
	Namespaces []CloudstackNamespacesParameters `json:"namespaces,omitempty" tf:"namespaces,omitempty"`

	// The date and time after which to patch the cluster. Prefix the time value with the respective RFC. Ex: `RFC3339: 2006-01-02T15:04:05Z07:00`
	// +kubebuilder:validation:Optional
	OsPatchAfter *string `json:"osPatchAfter,omitempty" tf:"os_patch_after,omitempty"`

	// Whether to apply OS patch on boot. Default is `false`.
	// +kubebuilder:validation:Optional
	OsPatchOnBoot *bool `json:"osPatchOnBoot,omitempty" tf:"os_patch_on_boot,omitempty"`

	// Cron schedule for OS patching. This must be in the form of `0 0 * * *`.
	// +kubebuilder:validation:Optional
	OsPatchSchedule *string `json:"osPatchSchedule,omitempty" tf:"os_patch_schedule,omitempty"`

	// The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is `unlock`, meaning upgrades occur automatically. Setting it to `lock` pauses automatic agent upgrades for the cluster.
	// +kubebuilder:validation:Optional
	PauseAgentUpgrades *string `json:"pauseAgentUpgrades,omitempty" tf:"pause_agent_upgrades,omitempty"`

	// To authorize the cluster repave, set the value to `Approved` for approval and `""` to decline. Default value is `""`.
	// +kubebuilder:validation:Optional
	ReviewRepaveState *string `json:"reviewRepaveState,omitempty" tf:"review_repave_state,omitempty"`

	// The scan policy for the cluster.
	// +kubebuilder:validation:Optional
	ScanPolicy []CloudstackScanPolicyParameters `json:"scanPolicy,omitempty" tf:"scan_policy,omitempty"`

	// A list of tags to be applied to the cluster. Tags must be in the form of `key:value`.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type CloudstackScanPolicyInitParameters struct {

	// The schedule for configuration scan.
	ConfigurationScanSchedule *string `json:"configurationScanSchedule,omitempty" tf:"configuration_scan_schedule,omitempty"`

	// The schedule for conformance scan.
	ConformanceScanSchedule *string `json:"conformanceScanSchedule,omitempty" tf:"conformance_scan_schedule,omitempty"`

	// The schedule for penetration scan.
	PenetrationScanSchedule *string `json:"penetrationScanSchedule,omitempty" tf:"penetration_scan_schedule,omitempty"`
}

type CloudstackScanPolicyObservation struct {

	// The schedule for configuration scan.
	ConfigurationScanSchedule *string `json:"configurationScanSchedule,omitempty" tf:"configuration_scan_schedule,omitempty"`

	// The schedule for conformance scan.
	ConformanceScanSchedule *string `json:"conformanceScanSchedule,omitempty" tf:"conformance_scan_schedule,omitempty"`

	// The schedule for penetration scan.
	PenetrationScanSchedule *string `json:"penetrationScanSchedule,omitempty" tf:"penetration_scan_schedule,omitempty"`
}

type CloudstackScanPolicyParameters struct {

	// The schedule for configuration scan.
	// +kubebuilder:validation:Optional
	ConfigurationScanSchedule *string `json:"configurationScanSchedule" tf:"configuration_scan_schedule,omitempty"`

	// The schedule for conformance scan.
	// +kubebuilder:validation:Optional
	ConformanceScanSchedule *string `json:"conformanceScanSchedule" tf:"conformance_scan_schedule,omitempty"`

	// The schedule for penetration scan.
	// +kubebuilder:validation:Optional
	PenetrationScanSchedule *string `json:"penetrationScanSchedule" tf:"penetration_scan_schedule,omitempty"`
}

type MachinePoolNetworkInitParameters struct {

	// Static IP address to assign. **DEPRECATED**: This field is no longer supported by CloudStack and will be ignored.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Network name to attach to the machine pool.
	NetworkName *string `json:"networkName,omitempty" tf:"network_name,omitempty"`
}

type MachinePoolNetworkObservation struct {

	// Static IP address to assign. **DEPRECATED**: This field is no longer supported by CloudStack and will be ignored.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Network name to attach to the machine pool.
	NetworkName *string `json:"networkName,omitempty" tf:"network_name,omitempty"`
}

type MachinePoolNetworkParameters struct {

	// Static IP address to assign. **DEPRECATED**: This field is no longer supported by CloudStack and will be ignored.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Network name to attach to the machine pool.
	// +kubebuilder:validation:Optional
	NetworkName *string `json:"networkName" tf:"network_name,omitempty"`
}

type NetworkInitParameters struct {

	// Gateway IP address for the network.
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// Network name in this zone.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network mask for the network.
	Netmask *string `json:"netmask,omitempty" tf:"netmask,omitempty"`

	// Network offering name to use when creating the network. Optional for advanced network configurations.
	Offering *string `json:"offering,omitempty" tf:"offering,omitempty"`

	// Routing mode for the network (e.g., Static, Dynamic). Optional, defaults to CloudStack's default routing mode.
	RoutingMode *string `json:"routingMode,omitempty" tf:"routing_mode,omitempty"`

	// Network type: Isolated, Shared, etc.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// VPC configuration for VPC-based network deployments. Optional, only needed when deploying in a VPC.
	VPC []VPCInitParameters `json:"vpc,omitempty" tf:"vpc,omitempty"`
}

type NetworkObservation struct {

	// Gateway IP address for the network.
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// Network name in this zone.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network mask for the network.
	Netmask *string `json:"netmask,omitempty" tf:"netmask,omitempty"`

	// Network offering name to use when creating the network. Optional for advanced network configurations.
	Offering *string `json:"offering,omitempty" tf:"offering,omitempty"`

	// Routing mode for the network (e.g., Static, Dynamic). Optional, defaults to CloudStack's default routing mode.
	RoutingMode *string `json:"routingMode,omitempty" tf:"routing_mode,omitempty"`

	// Network type: Isolated, Shared, etc.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// VPC configuration for VPC-based network deployments. Optional, only needed when deploying in a VPC.
	VPC []VPCObservation `json:"vpc,omitempty" tf:"vpc,omitempty"`
}

type NetworkParameters struct {

	// Gateway IP address for the network.
	// +kubebuilder:validation:Optional
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// Network name in this zone.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Network mask for the network.
	// +kubebuilder:validation:Optional
	Netmask *string `json:"netmask,omitempty" tf:"netmask,omitempty"`

	// Network offering name to use when creating the network. Optional for advanced network configurations.
	// +kubebuilder:validation:Optional
	Offering *string `json:"offering,omitempty" tf:"offering,omitempty"`

	// Routing mode for the network (e.g., Static, Dynamic). Optional, defaults to CloudStack's default routing mode.
	// +kubebuilder:validation:Optional
	RoutingMode *string `json:"routingMode,omitempty" tf:"routing_mode,omitempty"`

	// Network type: Isolated, Shared, etc.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// VPC configuration for VPC-based network deployments. Optional, only needed when deploying in a VPC.
	// +kubebuilder:validation:Optional
	VPC []VPCParameters `json:"vpc,omitempty" tf:"vpc,omitempty"`
}

type VPCInitParameters struct {

	// CIDR block for the VPC (e.g., 10.0.0.0/16).
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// VPC name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// VPC offering name.
	Offering *string `json:"offering,omitempty" tf:"offering,omitempty"`
}

type VPCObservation struct {

	// CIDR block for the VPC (e.g., 10.0.0.0/16).
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// VPC name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// VPC offering name.
	Offering *string `json:"offering,omitempty" tf:"offering,omitempty"`
}

type VPCParameters struct {

	// CIDR block for the VPC (e.g., 10.0.0.0/16).
	// +kubebuilder:validation:Optional
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// VPC name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// VPC offering name.
	// +kubebuilder:validation:Optional
	Offering *string `json:"offering,omitempty" tf:"offering,omitempty"`
}

type ZoneInitParameters struct {

	// CloudStack zone name where the cluster will be deployed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network configuration for this zone.
	Network []NetworkInitParameters `json:"network,omitempty" tf:"network,omitempty"`
}

type ZoneObservation struct {

	// CloudStack zone name where the cluster will be deployed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network configuration for this zone.
	Network []NetworkObservation `json:"network,omitempty" tf:"network,omitempty"`
}

type ZoneParameters struct {

	// CloudStack zone name where the cluster will be deployed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Network configuration for this zone.
	// +kubebuilder:validation:Optional
	Network []NetworkParameters `json:"network,omitempty" tf:"network,omitempty"`
}

// CloudstackSpec defines the desired state of Cloudstack
type CloudstackSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            CloudstackParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CloudstackInitParameters `json:"initProvider,omitempty"`
}

// CloudstackStatus defines the observed state of Cloudstack.
type CloudstackStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CloudstackObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Cloudstack is the Schema for the Cloudstacks API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,palette}
type Cloudstack struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cloudAccountId) || (has(self.initProvider) && has(self.initProvider.cloudAccountId))",message="spec.forProvider.cloudAccountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cloudConfig) || (has(self.initProvider) && has(self.initProvider.cloudConfig))",message="spec.forProvider.cloudConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.machinePool) || (has(self.initProvider) && has(self.initProvider.machinePool))",message="spec.forProvider.machinePool is a required parameter"
	Spec   CloudstackSpec   `json:"spec"`
	Status CloudstackStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudstackList contains a list of Cloudstacks
type CloudstackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cloudstack `json:"items"`
}

// Repository type metadata.
var (
	Cloudstack_Kind             = "Cloudstack"
	Cloudstack_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cloudstack_Kind}.String()
	Cloudstack_KindAPIVersion   = Cloudstack_Kind + "." + CRDGroupVersion.String()
	Cloudstack_GroupVersionKind = CRDGroupVersion.WithKind(Cloudstack_Kind)
)

func init() {
	SchemeBuilder.Register(&Cloudstack{}, &CloudstackList{})
}
