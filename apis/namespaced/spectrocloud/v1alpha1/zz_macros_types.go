/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type MacrosInitParameters struct {

	// (String) The context of the cluster profile. Allowed values are project or tenant. Default value is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
	// The context of the cluster profile. Allowed values are `project` or `tenant`. Default value is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// value mapping includes the macro name and its corresponding value, representing either a macro or a service variable output.
	// The key-value mapping includes the macro name and its corresponding value, representing either a macro or a service variable output.
	// +mapType=granular
	Macros map[string]*string `json:"macros,omitempty" tf:"macros,omitempty"`
}

type MacrosObservation struct {

	// (String) The context of the cluster profile. Allowed values are project or tenant. Default value is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
	// The context of the cluster profile. Allowed values are `project` or `tenant`. Default value is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// value mapping includes the macro name and its corresponding value, representing either a macro or a service variable output.
	// The key-value mapping includes the macro name and its corresponding value, representing either a macro or a service variable output.
	// +mapType=granular
	Macros map[string]*string `json:"macros,omitempty" tf:"macros,omitempty"`
}

type MacrosParameters struct {

	// (String) The context of the cluster profile. Allowed values are project or tenant. Default value is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
	// The context of the cluster profile. Allowed values are `project` or `tenant`. Default value is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	// +kubebuilder:validation:Optional
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// value mapping includes the macro name and its corresponding value, representing either a macro or a service variable output.
	// The key-value mapping includes the macro name and its corresponding value, representing either a macro or a service variable output.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Macros map[string]*string `json:"macros,omitempty" tf:"macros,omitempty"`
}

// MacrosSpec defines the desired state of Macros
type MacrosSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            MacrosParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MacrosInitParameters `json:"initProvider,omitempty"`
}

// MacrosStatus defines the observed state of Macros.
type MacrosStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MacrosObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Macros is the Schema for the Macross API. A resource for creating and managing service output variables and macros.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,palette}
type Macros struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.macros) || (has(self.initProvider) && has(self.initProvider.macros))",message="spec.forProvider.macros is a required parameter"
	Spec   MacrosSpec   `json:"spec"`
	Status MacrosStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MacrosList contains a list of Macross
type MacrosList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Macros `json:"items"`
}

// Repository type metadata.
var (
	Macros_Kind             = "Macros"
	Macros_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Macros_Kind}.String()
	Macros_KindAPIVersion   = Macros_Kind + "." + CRDGroupVersion.String()
	Macros_GroupVersionKind = CRDGroupVersion.WithKind(Macros_Kind)
)

func init() {
	SchemeBuilder.Register(&Macros{}, &MacrosList{})
}
