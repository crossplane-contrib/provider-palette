/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type OciCredentialsInitParameters struct {

	// (String) The access key for accessing the registry. Required if 'credential_type' is set to 'secret'.
	// The access key for accessing the registry. Required if 'credential_type' is set to 'secret'.
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`

	// based authentication. Required if 'credential_type' is 'sts'.
	// The Amazon Resource Name (ARN) used for AWS-based authentication. Required if 'credential_type' is 'sts'.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// (String) The type of authentication used for accessing the registry. Supported values are 'secret', 'sts', 'basic', and 'noAuth'.
	// The type of authentication used for accessing the registry. Supported values are 'secret', 'sts', 'basic', and 'noAuth'.
	CredentialType *string `json:"credentialType,omitempty" tf:"credential_type,omitempty"`

	// (String) The external ID used for AWS STS (Security Token Service) authentication. Required if 'credential_type' is 'sts'.
	// The external ID used for AWS STS (Security Token Service) authentication. Required if 'credential_type' is 'sts'.
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// (String, Sensitive) The password for basic authentication. Required if 'credential_type' is 'basic'.
	// The password for basic authentication. Required if 'credential_type' is 'basic'.
	PasswordSecretRef *v1.LocalSecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (String, Sensitive) The secret key for accessing the registry. Required if 'credential_type' is set to 'secret'.
	// The secret key for accessing the registry. Required if 'credential_type' is set to 'secret'.
	SecretKeySecretRef *v1.LocalSecretKeySelector `json:"secretKeySecretRef,omitempty" tf:"-"`

	// (Block List, Max: 1) TLS configuration for the registry. (see below for nested schema)
	// TLS configuration for the registry.
	TLSConfig []TLSConfigInitParameters `json:"tlsConfig,omitempty" tf:"tls_config,omitempty"`

	// (String) The username for basic authentication. Required if 'credential_type' is 'basic'.
	// The username for basic authentication. Required if 'credential_type' is 'basic'.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type OciCredentialsObservation struct {

	// (String) The access key for accessing the registry. Required if 'credential_type' is set to 'secret'.
	// The access key for accessing the registry. Required if 'credential_type' is set to 'secret'.
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`

	// based authentication. Required if 'credential_type' is 'sts'.
	// The Amazon Resource Name (ARN) used for AWS-based authentication. Required if 'credential_type' is 'sts'.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// (String) The type of authentication used for accessing the registry. Supported values are 'secret', 'sts', 'basic', and 'noAuth'.
	// The type of authentication used for accessing the registry. Supported values are 'secret', 'sts', 'basic', and 'noAuth'.
	CredentialType *string `json:"credentialType,omitempty" tf:"credential_type,omitempty"`

	// (String) The external ID used for AWS STS (Security Token Service) authentication. Required if 'credential_type' is 'sts'.
	// The external ID used for AWS STS (Security Token Service) authentication. Required if 'credential_type' is 'sts'.
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// (Block List, Max: 1) TLS configuration for the registry. (see below for nested schema)
	// TLS configuration for the registry.
	TLSConfig []TLSConfigObservation `json:"tlsConfig,omitempty" tf:"tls_config,omitempty"`

	// (String) The username for basic authentication. Required if 'credential_type' is 'basic'.
	// The username for basic authentication. Required if 'credential_type' is 'basic'.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type OciCredentialsParameters struct {

	// (String) The access key for accessing the registry. Required if 'credential_type' is set to 'secret'.
	// The access key for accessing the registry. Required if 'credential_type' is set to 'secret'.
	// +kubebuilder:validation:Optional
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`

	// based authentication. Required if 'credential_type' is 'sts'.
	// The Amazon Resource Name (ARN) used for AWS-based authentication. Required if 'credential_type' is 'sts'.
	// +kubebuilder:validation:Optional
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// (String) The type of authentication used for accessing the registry. Supported values are 'secret', 'sts', 'basic', and 'noAuth'.
	// The type of authentication used for accessing the registry. Supported values are 'secret', 'sts', 'basic', and 'noAuth'.
	// +kubebuilder:validation:Optional
	CredentialType *string `json:"credentialType" tf:"credential_type,omitempty"`

	// (String) The external ID used for AWS STS (Security Token Service) authentication. Required if 'credential_type' is 'sts'.
	// The external ID used for AWS STS (Security Token Service) authentication. Required if 'credential_type' is 'sts'.
	// +kubebuilder:validation:Optional
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// (String, Sensitive) The password for basic authentication. Required if 'credential_type' is 'basic'.
	// The password for basic authentication. Required if 'credential_type' is 'basic'.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.LocalSecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (String, Sensitive) The secret key for accessing the registry. Required if 'credential_type' is set to 'secret'.
	// The secret key for accessing the registry. Required if 'credential_type' is set to 'secret'.
	// +kubebuilder:validation:Optional
	SecretKeySecretRef *v1.LocalSecretKeySelector `json:"secretKeySecretRef,omitempty" tf:"-"`

	// (Block List, Max: 1) TLS configuration for the registry. (see below for nested schema)
	// TLS configuration for the registry.
	// +kubebuilder:validation:Optional
	TLSConfig []TLSConfigParameters `json:"tlsConfig,omitempty" tf:"tls_config,omitempty"`

	// (String) The username for basic authentication. Required if 'credential_type' is 'basic'.
	// The username for basic authentication. Required if 'credential_type' is 'basic'.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type OciInitParameters struct {

	// (String) The relative path to the endpoint specified.
	// The relative path to the endpoint specified.
	BaseContentPath *string `json:"baseContentPath,omitempty" tf:"base_content_path,omitempty"`

	// (Block List, Min: 1, Max: 1) Authentication credentials to access the private OCI registry. Required if is_private is set to true (see below for nested schema)
	// Authentication credentials to access the private OCI registry. Required if `is_private` is set to `true`
	Credentials []OciCredentialsInitParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// (String) The URL endpoint of the OCI registry. This is where the container images are hosted and accessed.
	// The URL endpoint of the OCI registry. This is where the container images are hosted and accessed.
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// (String) Specifies a suffix to append to the endpoint. This field is optional, but some registries (e.g., JFrog) may require it. The final registry URL is constructed by appending this suffix to the endpoint.
	// Specifies a suffix to append to the endpoint. This field is optional, but some registries (e.g., JFrog) may require it. The final registry URL is constructed by appending this suffix to the endpoint.
	EndpointSuffix *string `json:"endpointSuffix,omitempty" tf:"endpoint_suffix,omitempty"`

	// (Boolean) Specifies whether the registry is private or public. Private registries require authentication to access.
	// Specifies whether the registry is private or public. Private registries require authentication to access.
	IsPrivate *bool `json:"isPrivate,omitempty" tf:"is_private,omitempty"`

	// (Boolean) Specifies whether the registry is synchronized.
	// Specifies whether the registry is synchronized.
	IsSynchronization *bool `json:"isSynchronization,omitempty" tf:"is_synchronization,omitempty"`

	// (String) The name of the OCI registry.
	// The name of the OCI registry.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The type of provider used for interacting with the registry. Supported value's are helm, zarf and pack, The default is 'helm'. zarf is allowed with type="basic"
	// The type of provider used for interacting with the registry. Supported value's are `helm`, `zarf` and `pack`, The default is 'helm'. `zarf` is allowed with `type="basic"`
	ProviderType *string `json:"providerType,omitempty" tf:"provider_type,omitempty"`

	// (String) The type of the registry. Possible values are 'ecr' (Amazon Elastic Container Registry) or 'basic' (for other types of OCI registries).
	// The type of the registry. Possible values are 'ecr' (Amazon Elastic Container Registry) or 'basic' (for other types of OCI registries).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type OciObservation struct {

	// (String) The relative path to the endpoint specified.
	// The relative path to the endpoint specified.
	BaseContentPath *string `json:"baseContentPath,omitempty" tf:"base_content_path,omitempty"`

	// (Block List, Min: 1, Max: 1) Authentication credentials to access the private OCI registry. Required if is_private is set to true (see below for nested schema)
	// Authentication credentials to access the private OCI registry. Required if `is_private` is set to `true`
	Credentials []OciCredentialsObservation `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// (String) The URL endpoint of the OCI registry. This is where the container images are hosted and accessed.
	// The URL endpoint of the OCI registry. This is where the container images are hosted and accessed.
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// (String) Specifies a suffix to append to the endpoint. This field is optional, but some registries (e.g., JFrog) may require it. The final registry URL is constructed by appending this suffix to the endpoint.
	// Specifies a suffix to append to the endpoint. This field is optional, but some registries (e.g., JFrog) may require it. The final registry URL is constructed by appending this suffix to the endpoint.
	EndpointSuffix *string `json:"endpointSuffix,omitempty" tf:"endpoint_suffix,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Specifies whether the registry is private or public. Private registries require authentication to access.
	// Specifies whether the registry is private or public. Private registries require authentication to access.
	IsPrivate *bool `json:"isPrivate,omitempty" tf:"is_private,omitempty"`

	// (Boolean) Specifies whether the registry is synchronized.
	// Specifies whether the registry is synchronized.
	IsSynchronization *bool `json:"isSynchronization,omitempty" tf:"is_synchronization,omitempty"`

	// (String) The name of the OCI registry.
	// The name of the OCI registry.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The type of provider used for interacting with the registry. Supported value's are helm, zarf and pack, The default is 'helm'. zarf is allowed with type="basic"
	// The type of provider used for interacting with the registry. Supported value's are `helm`, `zarf` and `pack`, The default is 'helm'. `zarf` is allowed with `type="basic"`
	ProviderType *string `json:"providerType,omitempty" tf:"provider_type,omitempty"`

	// (String) The type of the registry. Possible values are 'ecr' (Amazon Elastic Container Registry) or 'basic' (for other types of OCI registries).
	// The type of the registry. Possible values are 'ecr' (Amazon Elastic Container Registry) or 'basic' (for other types of OCI registries).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type OciParameters struct {

	// (String) The relative path to the endpoint specified.
	// The relative path to the endpoint specified.
	// +kubebuilder:validation:Optional
	BaseContentPath *string `json:"baseContentPath,omitempty" tf:"base_content_path,omitempty"`

	// (Block List, Min: 1, Max: 1) Authentication credentials to access the private OCI registry. Required if is_private is set to true (see below for nested schema)
	// Authentication credentials to access the private OCI registry. Required if `is_private` is set to `true`
	// +kubebuilder:validation:Optional
	Credentials []OciCredentialsParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// (String) The URL endpoint of the OCI registry. This is where the container images are hosted and accessed.
	// The URL endpoint of the OCI registry. This is where the container images are hosted and accessed.
	// +kubebuilder:validation:Optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// (String) Specifies a suffix to append to the endpoint. This field is optional, but some registries (e.g., JFrog) may require it. The final registry URL is constructed by appending this suffix to the endpoint.
	// Specifies a suffix to append to the endpoint. This field is optional, but some registries (e.g., JFrog) may require it. The final registry URL is constructed by appending this suffix to the endpoint.
	// +kubebuilder:validation:Optional
	EndpointSuffix *string `json:"endpointSuffix,omitempty" tf:"endpoint_suffix,omitempty"`

	// (Boolean) Specifies whether the registry is private or public. Private registries require authentication to access.
	// Specifies whether the registry is private or public. Private registries require authentication to access.
	// +kubebuilder:validation:Optional
	IsPrivate *bool `json:"isPrivate,omitempty" tf:"is_private,omitempty"`

	// (Boolean) Specifies whether the registry is synchronized.
	// Specifies whether the registry is synchronized.
	// +kubebuilder:validation:Optional
	IsSynchronization *bool `json:"isSynchronization,omitempty" tf:"is_synchronization,omitempty"`

	// (String) The name of the OCI registry.
	// The name of the OCI registry.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The type of provider used for interacting with the registry. Supported value's are helm, zarf and pack, The default is 'helm'. zarf is allowed with type="basic"
	// The type of provider used for interacting with the registry. Supported value's are `helm`, `zarf` and `pack`, The default is 'helm'. `zarf` is allowed with `type="basic"`
	// +kubebuilder:validation:Optional
	ProviderType *string `json:"providerType,omitempty" tf:"provider_type,omitempty"`

	// (String) The type of the registry. Possible values are 'ecr' (Amazon Elastic Container Registry) or 'basic' (for other types of OCI registries).
	// The type of the registry. Possible values are 'ecr' (Amazon Elastic Container Registry) or 'basic' (for other types of OCI registries).
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TLSConfigInitParameters struct {

	// (String) Specifies the TLS certificate used for secure communication. Required for enabling SSL/TLS encryption.
	// Specifies the TLS certificate used for secure communication. Required for enabling SSL/TLS encryption.
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// in-the-middle attacks. Only use this when connecting to registries with self-signed certificates in trusted networks.
	// Disables TLS certificate verification when set to true. ⚠️ WARNING: Setting this to true disables SSL certificate verification and makes connections vulnerable to man-in-the-middle attacks. Only use this when connecting to registries with self-signed certificates in trusted networks.
	InsecureSkipVerify *bool `json:"insecureSkipVerify,omitempty" tf:"insecure_skip_verify,omitempty"`
}

type TLSConfigObservation struct {

	// (String) Specifies the TLS certificate used for secure communication. Required for enabling SSL/TLS encryption.
	// Specifies the TLS certificate used for secure communication. Required for enabling SSL/TLS encryption.
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// in-the-middle attacks. Only use this when connecting to registries with self-signed certificates in trusted networks.
	// Disables TLS certificate verification when set to true. ⚠️ WARNING: Setting this to true disables SSL certificate verification and makes connections vulnerable to man-in-the-middle attacks. Only use this when connecting to registries with self-signed certificates in trusted networks.
	InsecureSkipVerify *bool `json:"insecureSkipVerify,omitempty" tf:"insecure_skip_verify,omitempty"`
}

type TLSConfigParameters struct {

	// (String) Specifies the TLS certificate used for secure communication. Required for enabling SSL/TLS encryption.
	// Specifies the TLS certificate used for secure communication. Required for enabling SSL/TLS encryption.
	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// in-the-middle attacks. Only use this when connecting to registries with self-signed certificates in trusted networks.
	// Disables TLS certificate verification when set to true. ⚠️ WARNING: Setting this to true disables SSL certificate verification and makes connections vulnerable to man-in-the-middle attacks. Only use this when connecting to registries with self-signed certificates in trusted networks.
	// +kubebuilder:validation:Optional
	InsecureSkipVerify *bool `json:"insecureSkipVerify,omitempty" tf:"insecure_skip_verify,omitempty"`
}

// OciSpec defines the desired state of Oci
type OciSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            OciParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OciInitParameters `json:"initProvider,omitempty"`
}

// OciStatus defines the observed state of Oci.
type OciStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OciObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Oci is the Schema for the Ocis API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,palette}
type Oci struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.credentials) || (has(self.initProvider) && has(self.initProvider.credentials))",message="spec.forProvider.credentials is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endpoint) || (has(self.initProvider) && has(self.initProvider.endpoint))",message="spec.forProvider.endpoint is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.isPrivate) || (has(self.initProvider) && has(self.initProvider.isPrivate))",message="spec.forProvider.isPrivate is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   OciSpec   `json:"spec"`
	Status OciStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OciList contains a list of Ocis
type OciList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Oci `json:"items"`
}

// Repository type metadata.
var (
	Oci_Kind             = "Oci"
	Oci_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Oci_Kind}.String()
	Oci_KindAPIVersion   = Oci_Kind + "." + CRDGroupVersion.String()
	Oci_GroupVersionKind = CRDGroupVersion.WithKind(Oci_Kind)
)

func init() {
	SchemeBuilder.Register(&Oci{}, &OciList{})
}
