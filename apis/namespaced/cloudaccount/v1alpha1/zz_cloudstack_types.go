/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type CloudstackInitParameters struct {

	// The API key for CloudStack authentication.
	APIKeySecretRef v1.LocalSecretKeySelector `json:"apiKeySecretRef" tf:"-"`

	// The API URL of the CloudStack management server. For example: https://cloudstack.example.com:8080/client/api
	APIURL *string `json:"apiUrl,omitempty" tf:"api_url,omitempty"`

	// The CA certificate for SSL verification (optional).
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`

	// The context of the CloudStack configuration. Allowed values are `project` or `tenant`. Default value is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// Skip SSL certificate verification. Default is `false`.
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// ID of the private cloud gateway that is used to connect to the CloudStack cloud.
	PrivateCloudGatewayID *string `json:"privateCloudGatewayId,omitempty" tf:"private_cloud_gateway_id,omitempty"`

	// The secret key for CloudStack authentication.
	SecretKeySecretRef v1.LocalSecretKeySelector `json:"secretKeySecretRef" tf:"-"`
}

type CloudstackObservation struct {

	// The API URL of the CloudStack management server. For example: https://cloudstack.example.com:8080/client/api
	APIURL *string `json:"apiUrl,omitempty" tf:"api_url,omitempty"`

	// The CA certificate for SSL verification (optional).
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`

	// The context of the CloudStack configuration. Allowed values are `project` or `tenant`. Default value is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Skip SSL certificate verification. Default is `false`.
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// ID of the private cloud gateway that is used to connect to the CloudStack cloud.
	PrivateCloudGatewayID *string `json:"privateCloudGatewayId,omitempty" tf:"private_cloud_gateway_id,omitempty"`
}

type CloudstackParameters struct {

	// The API key for CloudStack authentication.
	// +kubebuilder:validation:Optional
	APIKeySecretRef v1.LocalSecretKeySelector `json:"apiKeySecretRef" tf:"-"`

	// The API URL of the CloudStack management server. For example: https://cloudstack.example.com:8080/client/api
	// +kubebuilder:validation:Optional
	APIURL *string `json:"apiUrl,omitempty" tf:"api_url,omitempty"`

	// The CA certificate for SSL verification (optional).
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`

	// The context of the CloudStack configuration. Allowed values are `project` or `tenant`. Default value is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	// +kubebuilder:validation:Optional
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// Skip SSL certificate verification. Default is `false`.
	// +kubebuilder:validation:Optional
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// ID of the private cloud gateway that is used to connect to the CloudStack cloud.
	// +kubebuilder:validation:Optional
	PrivateCloudGatewayID *string `json:"privateCloudGatewayId,omitempty" tf:"private_cloud_gateway_id,omitempty"`

	// The secret key for CloudStack authentication.
	// +kubebuilder:validation:Optional
	SecretKeySecretRef v1.LocalSecretKeySelector `json:"secretKeySecretRef" tf:"-"`
}

// CloudstackSpec defines the desired state of Cloudstack
type CloudstackSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            CloudstackParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CloudstackInitParameters `json:"initProvider,omitempty"`
}

// CloudstackStatus defines the observed state of Cloudstack.
type CloudstackStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CloudstackObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Cloudstack is the Schema for the Cloudstacks API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,palette}
type Cloudstack struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.apiKeySecretRef)",message="spec.forProvider.apiKeySecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.apiUrl) || (has(self.initProvider) && has(self.initProvider.apiUrl))",message="spec.forProvider.apiUrl is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.privateCloudGatewayId) || (has(self.initProvider) && has(self.initProvider.privateCloudGatewayId))",message="spec.forProvider.privateCloudGatewayId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.secretKeySecretRef)",message="spec.forProvider.secretKeySecretRef is a required parameter"
	Spec   CloudstackSpec   `json:"spec"`
	Status CloudstackStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudstackList contains a list of Cloudstacks
type CloudstackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cloudstack `json:"items"`
}

// Repository type metadata.
var (
	Cloudstack_Kind             = "Cloudstack"
	Cloudstack_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cloudstack_Kind}.String()
	Cloudstack_KindAPIVersion   = Cloudstack_Kind + "." + CRDGroupVersion.String()
	Cloudstack_GroupVersionKind = CRDGroupVersion.WithKind(Cloudstack_Kind)
)

func init() {
	SchemeBuilder.Register(&Cloudstack{}, &CloudstackList{})
}
