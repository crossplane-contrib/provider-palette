/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OciCredentialsObservation struct {
}

type OciCredentialsParameters struct {

	// +kubebuilder:validation:Optional
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// +kubebuilder:validation:Required
	CredentialType *string `json:"credentialType" tf:"credential_type,omitempty"`

	// +kubebuilder:validation:Optional
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`
}

type OciObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type OciParameters struct {

	// +kubebuilder:validation:Required
	Credentials []OciCredentialsParameters `json:"credentials" tf:"credentials,omitempty"`

	// +kubebuilder:validation:Required
	Endpoint *string `json:"endpoint" tf:"endpoint,omitempty"`

	// +kubebuilder:validation:Required
	IsPrivate *bool `json:"isPrivate" tf:"is_private,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// OciSpec defines the desired state of Oci
type OciSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OciParameters `json:"forProvider"`
}

// OciStatus defines the observed state of Oci.
type OciStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OciObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Oci is the Schema for the Ocis API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,jet-palette}
type Oci struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OciSpec   `json:"spec"`
	Status            OciStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OciList contains a list of Ocis
type OciList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Oci `json:"items"`
}

// Repository type metadata.
var (
	Oci_Kind             = "Oci"
	Oci_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Oci_Kind}.String()
	Oci_KindAPIVersion   = Oci_Kind + "." + CRDGroupVersion.String()
	Oci_GroupVersionKind = CRDGroupVersion.WithKind(Oci_Kind)
)

func init() {
	SchemeBuilder.Register(&Oci{}, &OciList{})
}
