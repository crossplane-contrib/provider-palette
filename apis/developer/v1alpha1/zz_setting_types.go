/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SettingInitParameters struct {

	// (Number) Defines the number of CPU cores allocated to the cluster.
	// Defines the number of CPU cores allocated to the cluster.
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// (Boolean) If set to true, hides the system cluster.
	// If set to `true`, hides the system cluster.
	HideSystemClusterGroup *bool `json:"hideSystemClusterGroup,omitempty" tf:"hide_system_cluster_group,omitempty"`

	// (Number) Specifies the amount of memory (in GiB) allocated to the cluster.
	// Specifies the amount of memory (in GiB) allocated to the cluster.
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// (Number) Defines the storage capacity (in GiB) allocated to the cluster.
	// Defines the storage capacity (in GiB) allocated to the cluster.
	Storage *float64 `json:"storage,omitempty" tf:"storage,omitempty"`

	// (Number) Specifies the number of virtual clusters to be created.
	// Specifies the number of virtual clusters to be created.
	VirtualClustersLimit *float64 `json:"virtualClustersLimit,omitempty" tf:"virtual_clusters_limit,omitempty"`
}

type SettingObservation struct {

	// (Number) Defines the number of CPU cores allocated to the cluster.
	// Defines the number of CPU cores allocated to the cluster.
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// (Boolean) If set to true, hides the system cluster.
	// If set to `true`, hides the system cluster.
	HideSystemClusterGroup *bool `json:"hideSystemClusterGroup,omitempty" tf:"hide_system_cluster_group,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) Specifies the amount of memory (in GiB) allocated to the cluster.
	// Specifies the amount of memory (in GiB) allocated to the cluster.
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// (Number) Defines the storage capacity (in GiB) allocated to the cluster.
	// Defines the storage capacity (in GiB) allocated to the cluster.
	Storage *float64 `json:"storage,omitempty" tf:"storage,omitempty"`

	// (Number) Specifies the number of virtual clusters to be created.
	// Specifies the number of virtual clusters to be created.
	VirtualClustersLimit *float64 `json:"virtualClustersLimit,omitempty" tf:"virtual_clusters_limit,omitempty"`
}

type SettingParameters struct {

	// (Number) Defines the number of CPU cores allocated to the cluster.
	// Defines the number of CPU cores allocated to the cluster.
	// +kubebuilder:validation:Optional
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// (Boolean) If set to true, hides the system cluster.
	// If set to `true`, hides the system cluster.
	// +kubebuilder:validation:Optional
	HideSystemClusterGroup *bool `json:"hideSystemClusterGroup,omitempty" tf:"hide_system_cluster_group,omitempty"`

	// (Number) Specifies the amount of memory (in GiB) allocated to the cluster.
	// Specifies the amount of memory (in GiB) allocated to the cluster.
	// +kubebuilder:validation:Optional
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// (Number) Defines the storage capacity (in GiB) allocated to the cluster.
	// Defines the storage capacity (in GiB) allocated to the cluster.
	// +kubebuilder:validation:Optional
	Storage *float64 `json:"storage,omitempty" tf:"storage,omitempty"`

	// (Number) Specifies the number of virtual clusters to be created.
	// Specifies the number of virtual clusters to be created.
	// +kubebuilder:validation:Optional
	VirtualClustersLimit *float64 `json:"virtualClustersLimit,omitempty" tf:"virtual_clusters_limit,omitempty"`
}

// SettingSpec defines the desired state of Setting
type SettingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SettingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SettingInitParameters `json:"initProvider,omitempty"`
}

// SettingStatus defines the observed state of Setting.
type SettingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SettingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Setting is the Schema for the Settings API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,palette}
type Setting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SettingSpec   `json:"spec"`
	Status            SettingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SettingList contains a list of Settings
type SettingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Setting `json:"items"`
}

// Repository type metadata.
var (
	Setting_Kind             = "Setting"
	Setting_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Setting_Kind}.String()
	Setting_KindAPIVersion   = Setting_Kind + "." + CRDGroupVersion.String()
	Setting_GroupVersionKind = CRDGroupVersion.WithKind(Setting_Kind)
)

func init() {
	SchemeBuilder.Register(&Setting{}, &SettingList{})
}
