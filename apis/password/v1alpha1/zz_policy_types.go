/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyInitParameters struct {

	// (Number) The number of days before the password expiry to send the first reminder to the user. Default is 5 days before expiry.
	// The number of days before the password expiry to send the first reminder to the user. Default is `5` days before expiry.
	FirstReminderDays *float64 `json:"firstReminderDays,omitempty" tf:"first_reminder_days,omitempty"`

	// 9) required in the password. Ensures that passwords contain numerical characters. Minimum length of digit should be 1.
	// The minimum number of numeric digits (0-9) required in the password. Ensures that passwords contain numerical characters. Minimum length of digit should be `1`.
	MinDigits *float64 `json:"minDigits,omitempty" tf:"min_digits,omitempty"`

	// z) required in the password. Ensures that lowercase characters are included for password complexity. Minimum length of lower case should be 1.
	// The minimum number of lowercase letters (a-z) required in the password. Ensures that lowercase characters are included for password complexity. Minimum length of lower case should be `1`.
	MinLowercaseLetters *float64 `json:"minLowercaseLetters,omitempty" tf:"min_lowercase_letters,omitempty"`

	// (Number) The minimum length required for the password. Enforces a stronger password policy by ensuring a minimum number of characters.  Default minimum length is 6.
	// The minimum length required for the password. Enforces a stronger password policy by ensuring a minimum number of characters.  Default minimum length is `6`.
	MinPasswordLength *float64 `json:"minPasswordLength,omitempty" tf:"min_password_length,omitempty"`

	// (Number) The minimum number of special characters (e.g., !, @, #, $, %) required in the password. This increases the password's security level by including symbols. Minimum special characters should be 1.
	// The minimum number of special characters (e.g., !, @, #, $, %) required in the password. This increases the password's security level by including symbols. Minimum special characters should be `1`.
	MinSpecialCharacters *float64 `json:"minSpecialCharacters,omitempty" tf:"min_special_characters,omitempty"`

	// Z) required in the password. Helps ensure password complexity with a mix of case-sensitive characters. Minimum length of upper case should be 1.
	// The minimum number of uppercase letters (A-Z) required in the password. Helps ensure password complexity with a mix of case-sensitive characters. Minimum length of upper case should be `1`.
	MinUppercaseLetters *float64 `json:"minUppercaseLetters,omitempty" tf:"min_uppercase_letters,omitempty"`

	// (Number) The number of days before the password expires. Must be between 1 and 1000 days. Defines how often passwords must be changed.  Default is 999 days for expiry. Conflicts with min_password_length, min_uppercase_letters, min_digits, min_lowercase_letters, min_special_characters
	// The number of days before the password expires. Must be between 1 and 1000 days. Defines how often passwords must be changed.  Default is `999` days for expiry. Conflicts with `min_password_length`, `min_uppercase_letters`, `min_digits`, `min_lowercase_letters`, `min_special_characters`
	PasswordExpiryDays *float64 `json:"passwordExpiryDays,omitempty" tf:"password_expiry_days,omitempty"`

	// (String) A regular expression (regex) to define custom password patterns, such as enforcing specific characters or sequences in the password.
	// A regular expression (regex) to define custom password patterns, such as enforcing specific characters or sequences in the password.
	PasswordRegex *string `json:"passwordRegex,omitempty" tf:"password_regex,omitempty"`
}

type PolicyObservation struct {

	// (Number) The number of days before the password expiry to send the first reminder to the user. Default is 5 days before expiry.
	// The number of days before the password expiry to send the first reminder to the user. Default is `5` days before expiry.
	FirstReminderDays *float64 `json:"firstReminderDays,omitempty" tf:"first_reminder_days,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// 9) required in the password. Ensures that passwords contain numerical characters. Minimum length of digit should be 1.
	// The minimum number of numeric digits (0-9) required in the password. Ensures that passwords contain numerical characters. Minimum length of digit should be `1`.
	MinDigits *float64 `json:"minDigits,omitempty" tf:"min_digits,omitempty"`

	// z) required in the password. Ensures that lowercase characters are included for password complexity. Minimum length of lower case should be 1.
	// The minimum number of lowercase letters (a-z) required in the password. Ensures that lowercase characters are included for password complexity. Minimum length of lower case should be `1`.
	MinLowercaseLetters *float64 `json:"minLowercaseLetters,omitempty" tf:"min_lowercase_letters,omitempty"`

	// (Number) The minimum length required for the password. Enforces a stronger password policy by ensuring a minimum number of characters.  Default minimum length is 6.
	// The minimum length required for the password. Enforces a stronger password policy by ensuring a minimum number of characters.  Default minimum length is `6`.
	MinPasswordLength *float64 `json:"minPasswordLength,omitempty" tf:"min_password_length,omitempty"`

	// (Number) The minimum number of special characters (e.g., !, @, #, $, %) required in the password. This increases the password's security level by including symbols. Minimum special characters should be 1.
	// The minimum number of special characters (e.g., !, @, #, $, %) required in the password. This increases the password's security level by including symbols. Minimum special characters should be `1`.
	MinSpecialCharacters *float64 `json:"minSpecialCharacters,omitempty" tf:"min_special_characters,omitempty"`

	// Z) required in the password. Helps ensure password complexity with a mix of case-sensitive characters. Minimum length of upper case should be 1.
	// The minimum number of uppercase letters (A-Z) required in the password. Helps ensure password complexity with a mix of case-sensitive characters. Minimum length of upper case should be `1`.
	MinUppercaseLetters *float64 `json:"minUppercaseLetters,omitempty" tf:"min_uppercase_letters,omitempty"`

	// (Number) The number of days before the password expires. Must be between 1 and 1000 days. Defines how often passwords must be changed.  Default is 999 days for expiry. Conflicts with min_password_length, min_uppercase_letters, min_digits, min_lowercase_letters, min_special_characters
	// The number of days before the password expires. Must be between 1 and 1000 days. Defines how often passwords must be changed.  Default is `999` days for expiry. Conflicts with `min_password_length`, `min_uppercase_letters`, `min_digits`, `min_lowercase_letters`, `min_special_characters`
	PasswordExpiryDays *float64 `json:"passwordExpiryDays,omitempty" tf:"password_expiry_days,omitempty"`

	// (String) A regular expression (regex) to define custom password patterns, such as enforcing specific characters or sequences in the password.
	// A regular expression (regex) to define custom password patterns, such as enforcing specific characters or sequences in the password.
	PasswordRegex *string `json:"passwordRegex,omitempty" tf:"password_regex,omitempty"`
}

type PolicyParameters struct {

	// (Number) The number of days before the password expiry to send the first reminder to the user. Default is 5 days before expiry.
	// The number of days before the password expiry to send the first reminder to the user. Default is `5` days before expiry.
	// +kubebuilder:validation:Optional
	FirstReminderDays *float64 `json:"firstReminderDays,omitempty" tf:"first_reminder_days,omitempty"`

	// 9) required in the password. Ensures that passwords contain numerical characters. Minimum length of digit should be 1.
	// The minimum number of numeric digits (0-9) required in the password. Ensures that passwords contain numerical characters. Minimum length of digit should be `1`.
	// +kubebuilder:validation:Optional
	MinDigits *float64 `json:"minDigits,omitempty" tf:"min_digits,omitempty"`

	// z) required in the password. Ensures that lowercase characters are included for password complexity. Minimum length of lower case should be 1.
	// The minimum number of lowercase letters (a-z) required in the password. Ensures that lowercase characters are included for password complexity. Minimum length of lower case should be `1`.
	// +kubebuilder:validation:Optional
	MinLowercaseLetters *float64 `json:"minLowercaseLetters,omitempty" tf:"min_lowercase_letters,omitempty"`

	// (Number) The minimum length required for the password. Enforces a stronger password policy by ensuring a minimum number of characters.  Default minimum length is 6.
	// The minimum length required for the password. Enforces a stronger password policy by ensuring a minimum number of characters.  Default minimum length is `6`.
	// +kubebuilder:validation:Optional
	MinPasswordLength *float64 `json:"minPasswordLength,omitempty" tf:"min_password_length,omitempty"`

	// (Number) The minimum number of special characters (e.g., !, @, #, $, %) required in the password. This increases the password's security level by including symbols. Minimum special characters should be 1.
	// The minimum number of special characters (e.g., !, @, #, $, %) required in the password. This increases the password's security level by including symbols. Minimum special characters should be `1`.
	// +kubebuilder:validation:Optional
	MinSpecialCharacters *float64 `json:"minSpecialCharacters,omitempty" tf:"min_special_characters,omitempty"`

	// Z) required in the password. Helps ensure password complexity with a mix of case-sensitive characters. Minimum length of upper case should be 1.
	// The minimum number of uppercase letters (A-Z) required in the password. Helps ensure password complexity with a mix of case-sensitive characters. Minimum length of upper case should be `1`.
	// +kubebuilder:validation:Optional
	MinUppercaseLetters *float64 `json:"minUppercaseLetters,omitempty" tf:"min_uppercase_letters,omitempty"`

	// (Number) The number of days before the password expires. Must be between 1 and 1000 days. Defines how often passwords must be changed.  Default is 999 days for expiry. Conflicts with min_password_length, min_uppercase_letters, min_digits, min_lowercase_letters, min_special_characters
	// The number of days before the password expires. Must be between 1 and 1000 days. Defines how often passwords must be changed.  Default is `999` days for expiry. Conflicts with `min_password_length`, `min_uppercase_letters`, `min_digits`, `min_lowercase_letters`, `min_special_characters`
	// +kubebuilder:validation:Optional
	PasswordExpiryDays *float64 `json:"passwordExpiryDays,omitempty" tf:"password_expiry_days,omitempty"`

	// (String) A regular expression (regex) to define custom password patterns, such as enforcing specific characters or sequences in the password.
	// A regular expression (regex) to define custom password patterns, such as enforcing specific characters or sequences in the password.
	// +kubebuilder:validation:Optional
	PasswordRegex *string `json:"passwordRegex,omitempty" tf:"password_regex,omitempty"`
}

// PolicySpec defines the desired state of Policy
type PolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyInitParameters `json:"initProvider,omitempty"`
}

// PolicyStatus defines the observed state of Policy.
type PolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Policy is the Schema for the Policys API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,palette}
type Policy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicySpec   `json:"spec"`
	Status            PolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyList contains a list of Policys
type PolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Policy `json:"items"`
}

// Repository type metadata.
var (
	Policy_Kind             = "Policy"
	Policy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Policy_Kind}.String()
	Policy_KindAPIVersion   = Policy_Kind + "." + CRDGroupVersion.String()
	Policy_GroupVersionKind = CRDGroupVersion.WithKind(Policy_Kind)
)

func init() {
	SchemeBuilder.Register(&Policy{}, &PolicyList{})
}
