/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LoginBannerInitParameters struct {

	// (String) Specify the message displayed in the login banner.
	// Specify the message displayed in the login banner.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) Specify the title of the login banner.
	// Specify the title of the login banner.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type LoginBannerObservation struct {

	// (String) Specify the message displayed in the login banner.
	// Specify the message displayed in the login banner.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) Specify the title of the login banner.
	// Specify the title of the login banner.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type LoginBannerParameters struct {

	// (String) Specify the message displayed in the login banner.
	// Specify the message displayed in the login banner.
	// +kubebuilder:validation:Optional
	Message *string `json:"message" tf:"message,omitempty"`

	// (String) Specify the title of the login banner.
	// Specify the title of the login banner.
	// +kubebuilder:validation:Optional
	Title *string `json:"title" tf:"title,omitempty"`
}

type SettingInitParameters struct {

	// provisioned clusters by replacing them with new nodes. Disabling this feature prevents auto-remediation. Not applicable to EKS, AKS, or TKE clusters.
	// Enables automatic remediation for unhealthy nodes in Palette-provisioned clusters by replacing them with new nodes. Disabling this feature prevents auto-remediation. Not applicable to `EKS`, `AKS`, or `TKE` clusters.
	ClusterAutoRemediation *bool `json:"clusterAutoRemediation,omitempty" tf:"cluster_auto_remediation,omitempty"`

	// (String) Defines the scope of the platform setting. Valid values are project or tenant. By default, it is set to tenant. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
	// Defines the scope of the platform setting. Valid values are `project` or `tenant`. By default, it is set to `tenant`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (Boolean) Enables automatic remediation. set only with `project' context
	// Enables automatic remediation. set only with `project' context
	EnableAutoRemediation *bool `json:"enableAutoRemediation,omitempty" tf:"enable_auto_remediation,omitempty"`

	// (Block List, Max: 1) Configure a login banner that users must acknowledge before signing in. Allowed only for tenant context (see below for nested schema)
	// Configure a login banner that users must acknowledge before signing in. Allowed only for `tenant` context
	LoginBanner []LoginBannerInitParameters `json:"loginBanner,omitempty" tf:"login_banner,omitempty"`

	// FIPS-compliant addon packs when creating cluster profiles. The non_fips_addon_pack only supported in palette vertex environment. Allowed only for tenant context
	// Allows users in this tenant to use non-FIPS-compliant addon packs when creating cluster profiles. The `non_fips_addon_pack` only supported in palette vertex environment. Allowed only for `tenant` context
	NonFipsAddonPack *bool `json:"nonFipsAddonPack,omitempty" tf:"non_fips_addon_pack,omitempty"`

	// compliant.  The non_fips_cluster_import only supported in palette vertex environment. Allowed only for tenant context
	// Allows users in this tenant to import clusters, but the imported clusters may not be FIPS-compliant.  The `non_fips_cluster_import` only supported in palette vertex environment. Allowed only for `tenant` context
	NonFipsClusterImport *bool `json:"nonFipsClusterImport,omitempty" tf:"non_fips_cluster_import,omitempty"`

	// FIPS-compliant features such as backup, restore, and scans. The non_fips_features only supported in palette vertex environment. Allowed only for tenant context
	// Allows users in this tenant to access non-FIPS-compliant features such as backup, restore, and scans. The `non_fips_features` only supported in palette vertex environment. Allowed only for `tenant` context
	NonFipsFeatures *bool `json:"nonFipsFeatures,omitempty" tf:"non_fips_features,omitempty"`

	// (String) Controls automatic upgrades for Palette components and agents in clusters deployed under a tenant or project. Setting it to lock disables automatic upgrades, while unlock (default) allows automatic upgrades.
	// Controls automatic upgrades for Palette components and agents in clusters deployed under a tenant or project. Setting it to `lock` disables automatic upgrades, while `unlock` (default) allows automatic upgrades.
	PauseAgentUpgrades *string `json:"pauseAgentUpgrades,omitempty" tf:"pause_agent_upgrades,omitempty"`

	// (Number) Specifies the duration (in minutes) of inactivity before a user is automatically logged out. The default is 240 minutes allowed in Palette. Allowed only for tenant context
	// Specifies the duration (in minutes) of inactivity before a user is automatically logged out. The default is 240 minutes allowed in Palette. Allowed only for `tenant` context
	SessionTimeout *float64 `json:"sessionTimeout,omitempty" tf:"session_timeout,omitempty"`
}

type SettingObservation struct {

	// provisioned clusters by replacing them with new nodes. Disabling this feature prevents auto-remediation. Not applicable to EKS, AKS, or TKE clusters.
	// Enables automatic remediation for unhealthy nodes in Palette-provisioned clusters by replacing them with new nodes. Disabling this feature prevents auto-remediation. Not applicable to `EKS`, `AKS`, or `TKE` clusters.
	ClusterAutoRemediation *bool `json:"clusterAutoRemediation,omitempty" tf:"cluster_auto_remediation,omitempty"`

	// (String) Defines the scope of the platform setting. Valid values are project or tenant. By default, it is set to tenant. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
	// Defines the scope of the platform setting. Valid values are `project` or `tenant`. By default, it is set to `tenant`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (Boolean) Enables automatic remediation. set only with `project' context
	// Enables automatic remediation. set only with `project' context
	EnableAutoRemediation *bool `json:"enableAutoRemediation,omitempty" tf:"enable_auto_remediation,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List, Max: 1) Configure a login banner that users must acknowledge before signing in. Allowed only for tenant context (see below for nested schema)
	// Configure a login banner that users must acknowledge before signing in. Allowed only for `tenant` context
	LoginBanner []LoginBannerObservation `json:"loginBanner,omitempty" tf:"login_banner,omitempty"`

	// FIPS-compliant addon packs when creating cluster profiles. The non_fips_addon_pack only supported in palette vertex environment. Allowed only for tenant context
	// Allows users in this tenant to use non-FIPS-compliant addon packs when creating cluster profiles. The `non_fips_addon_pack` only supported in palette vertex environment. Allowed only for `tenant` context
	NonFipsAddonPack *bool `json:"nonFipsAddonPack,omitempty" tf:"non_fips_addon_pack,omitempty"`

	// compliant.  The non_fips_cluster_import only supported in palette vertex environment. Allowed only for tenant context
	// Allows users in this tenant to import clusters, but the imported clusters may not be FIPS-compliant.  The `non_fips_cluster_import` only supported in palette vertex environment. Allowed only for `tenant` context
	NonFipsClusterImport *bool `json:"nonFipsClusterImport,omitempty" tf:"non_fips_cluster_import,omitempty"`

	// FIPS-compliant features such as backup, restore, and scans. The non_fips_features only supported in palette vertex environment. Allowed only for tenant context
	// Allows users in this tenant to access non-FIPS-compliant features such as backup, restore, and scans. The `non_fips_features` only supported in palette vertex environment. Allowed only for `tenant` context
	NonFipsFeatures *bool `json:"nonFipsFeatures,omitempty" tf:"non_fips_features,omitempty"`

	// (String) Controls automatic upgrades for Palette components and agents in clusters deployed under a tenant or project. Setting it to lock disables automatic upgrades, while unlock (default) allows automatic upgrades.
	// Controls automatic upgrades for Palette components and agents in clusters deployed under a tenant or project. Setting it to `lock` disables automatic upgrades, while `unlock` (default) allows automatic upgrades.
	PauseAgentUpgrades *string `json:"pauseAgentUpgrades,omitempty" tf:"pause_agent_upgrades,omitempty"`

	// (Number) Specifies the duration (in minutes) of inactivity before a user is automatically logged out. The default is 240 minutes allowed in Palette. Allowed only for tenant context
	// Specifies the duration (in minutes) of inactivity before a user is automatically logged out. The default is 240 minutes allowed in Palette. Allowed only for `tenant` context
	SessionTimeout *float64 `json:"sessionTimeout,omitempty" tf:"session_timeout,omitempty"`
}

type SettingParameters struct {

	// provisioned clusters by replacing them with new nodes. Disabling this feature prevents auto-remediation. Not applicable to EKS, AKS, or TKE clusters.
	// Enables automatic remediation for unhealthy nodes in Palette-provisioned clusters by replacing them with new nodes. Disabling this feature prevents auto-remediation. Not applicable to `EKS`, `AKS`, or `TKE` clusters.
	// +kubebuilder:validation:Optional
	ClusterAutoRemediation *bool `json:"clusterAutoRemediation,omitempty" tf:"cluster_auto_remediation,omitempty"`

	// (String) Defines the scope of the platform setting. Valid values are project or tenant. By default, it is set to tenant. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
	// Defines the scope of the platform setting. Valid values are `project` or `tenant`. By default, it is set to `tenant`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	// +kubebuilder:validation:Optional
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (Boolean) Enables automatic remediation. set only with `project' context
	// Enables automatic remediation. set only with `project' context
	// +kubebuilder:validation:Optional
	EnableAutoRemediation *bool `json:"enableAutoRemediation,omitempty" tf:"enable_auto_remediation,omitempty"`

	// (Block List, Max: 1) Configure a login banner that users must acknowledge before signing in. Allowed only for tenant context (see below for nested schema)
	// Configure a login banner that users must acknowledge before signing in. Allowed only for `tenant` context
	// +kubebuilder:validation:Optional
	LoginBanner []LoginBannerParameters `json:"loginBanner,omitempty" tf:"login_banner,omitempty"`

	// FIPS-compliant addon packs when creating cluster profiles. The non_fips_addon_pack only supported in palette vertex environment. Allowed only for tenant context
	// Allows users in this tenant to use non-FIPS-compliant addon packs when creating cluster profiles. The `non_fips_addon_pack` only supported in palette vertex environment. Allowed only for `tenant` context
	// +kubebuilder:validation:Optional
	NonFipsAddonPack *bool `json:"nonFipsAddonPack,omitempty" tf:"non_fips_addon_pack,omitempty"`

	// compliant.  The non_fips_cluster_import only supported in palette vertex environment. Allowed only for tenant context
	// Allows users in this tenant to import clusters, but the imported clusters may not be FIPS-compliant.  The `non_fips_cluster_import` only supported in palette vertex environment. Allowed only for `tenant` context
	// +kubebuilder:validation:Optional
	NonFipsClusterImport *bool `json:"nonFipsClusterImport,omitempty" tf:"non_fips_cluster_import,omitempty"`

	// FIPS-compliant features such as backup, restore, and scans. The non_fips_features only supported in palette vertex environment. Allowed only for tenant context
	// Allows users in this tenant to access non-FIPS-compliant features such as backup, restore, and scans. The `non_fips_features` only supported in palette vertex environment. Allowed only for `tenant` context
	// +kubebuilder:validation:Optional
	NonFipsFeatures *bool `json:"nonFipsFeatures,omitempty" tf:"non_fips_features,omitempty"`

	// (String) Controls automatic upgrades for Palette components and agents in clusters deployed under a tenant or project. Setting it to lock disables automatic upgrades, while unlock (default) allows automatic upgrades.
	// Controls automatic upgrades for Palette components and agents in clusters deployed under a tenant or project. Setting it to `lock` disables automatic upgrades, while `unlock` (default) allows automatic upgrades.
	// +kubebuilder:validation:Optional
	PauseAgentUpgrades *string `json:"pauseAgentUpgrades,omitempty" tf:"pause_agent_upgrades,omitempty"`

	// (Number) Specifies the duration (in minutes) of inactivity before a user is automatically logged out. The default is 240 minutes allowed in Palette. Allowed only for tenant context
	// Specifies the duration (in minutes) of inactivity before a user is automatically logged out. The default is 240 minutes allowed in Palette. Allowed only for `tenant` context
	// +kubebuilder:validation:Optional
	SessionTimeout *float64 `json:"sessionTimeout,omitempty" tf:"session_timeout,omitempty"`
}

// SettingSpec defines the desired state of Setting
type SettingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SettingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SettingInitParameters `json:"initProvider,omitempty"`
}

// SettingStatus defines the observed state of Setting.
type SettingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SettingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Setting is the Schema for the Settings API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,palette}
type Setting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SettingSpec   `json:"spec"`
	Status            SettingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SettingList contains a list of Settings
type SettingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Setting `json:"items"`
}

// Repository type metadata.
var (
	Setting_Kind             = "Setting"
	Setting_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Setting_Kind}.String()
	Setting_KindAPIVersion   = Setting_Kind + "." + CRDGroupVersion.String()
	Setting_GroupVersionKind = CRDGroupVersion.WithKind(Setting_Kind)
)

func init() {
	SchemeBuilder.Register(&Setting{}, &SettingList{})
}
