/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VsphereObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VsphereParameters struct {

	// Context of the cloud account. This can be either project or tenant. If not specified, the default value is project.
	// +kubebuilder:validation:Optional
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// ID of the private cloud gateway. This is the ID of the private cloud gateway that is used to connect to the vSphere cloud.
	// +kubebuilder:validation:Required
	PrivateCloudGatewayID *string `json:"privateCloudGatewayId" tf:"private_cloud_gateway_id,omitempty"`

	// Ignore insecure error. This is a boolean value that indicates whether to ignore the insecure error or not. If not specified, the default value is false.
	// +kubebuilder:validation:Optional
	VsphereIgnoreInsecureError *bool `json:"vsphereIgnoreInsecureError,omitempty" tf:"vsphere_ignore_insecure_error,omitempty"`

	// Password of the vSphere cloud. This is the password of the vSphere cloud that is used to connect to the vSphere cloud.
	// +kubebuilder:validation:Required
	VspherePasswordSecretRef v1.SecretKeySelector `json:"vspherePasswordSecretRef" tf:"-"`

	// Username of the vSphere cloud. This is the username of the vSphere cloud that is used to connect to the vSphere cloud.
	// +kubebuilder:validation:Required
	VsphereUsername *string `json:"vsphereUsername" tf:"vsphere_username,omitempty"`

	// vCenter server address. This is the address of the vCenter server that is used to connect to the vSphere cloud.
	// +kubebuilder:validation:Required
	VsphereVcenter *string `json:"vsphereVcenter" tf:"vsphere_vcenter,omitempty"`
}

// VsphereSpec defines the desired state of Vsphere
type VsphereSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VsphereParameters `json:"forProvider"`
}

// VsphereStatus defines the observed state of Vsphere.
type VsphereStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VsphereObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Vsphere is the Schema for the Vspheres API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,palette}
type Vsphere struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VsphereSpec   `json:"spec"`
	Status            VsphereStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VsphereList contains a list of Vspheres
type VsphereList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Vsphere `json:"items"`
}

// Repository type metadata.
var (
	Vsphere_Kind             = "Vsphere"
	Vsphere_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Vsphere_Kind}.String()
	Vsphere_KindAPIVersion   = Vsphere_Kind + "." + CRDGroupVersion.String()
	Vsphere_GroupVersionKind = CRDGroupVersion.WithKind(Vsphere_Kind)
)

func init() {
	SchemeBuilder.Register(&Vsphere{}, &VsphereList{})
}
