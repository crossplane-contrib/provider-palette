/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OpenstackObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type OpenstackParameters struct {

	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`

	// +kubebuilder:validation:Required
	DefaultDomain *string `json:"defaultDomain" tf:"default_domain,omitempty"`

	// +kubebuilder:validation:Required
	DefaultProject *string `json:"defaultProject" tf:"default_project,omitempty"`

	// +kubebuilder:validation:Required
	IdentityEndpoint *string `json:"identityEndpoint" tf:"identity_endpoint,omitempty"`

	// +kubebuilder:validation:Optional
	OpenstackAllowInsecure *bool `json:"openstackAllowInsecure,omitempty" tf:"openstack_allow_insecure,omitempty"`

	// +kubebuilder:validation:Required
	OpenstackPasswordSecretRef v1.SecretKeySelector `json:"openstackPasswordSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	OpenstackUsername *string `json:"openstackUsername" tf:"openstack_username,omitempty"`

	// +kubebuilder:validation:Required
	ParentRegion *string `json:"parentRegion" tf:"parent_region,omitempty"`

	// +kubebuilder:validation:Required
	PrivateCloudGatewayID *string `json:"privateCloudGatewayId" tf:"private_cloud_gateway_id,omitempty"`
}

// OpenstackSpec defines the desired state of Openstack
type OpenstackSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OpenstackParameters `json:"forProvider"`
}

// OpenstackStatus defines the observed state of Openstack.
type OpenstackStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OpenstackObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Openstack is the Schema for the Openstacks API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,jet-palette}
type Openstack struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OpenstackSpec   `json:"spec"`
	Status            OpenstackStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OpenstackList contains a list of Openstacks
type OpenstackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Openstack `json:"items"`
}

// Repository type metadata.
var (
	Openstack_Kind             = "Openstack"
	Openstack_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Openstack_Kind}.String()
	Openstack_KindAPIVersion   = Openstack_Kind + "." + CRDGroupVersion.String()
	Openstack_GroupVersionKind = CRDGroupVersion.WithKind(Openstack_Kind)
)

func init() {
	SchemeBuilder.Register(&Openstack{}, &OpenstackList{})
}
