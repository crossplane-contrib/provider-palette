// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomInitParameters struct {

	// (String) The cloud provider name.
	// The cloud provider name.
	Cloud *string `json:"cloud,omitempty" tf:"cloud,omitempty"`

	// (String) The context of the custom cloud configuration. Allowed values are project or tenant. Default value is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
	// The context of the custom cloud configuration. Allowed values are `project` or `tenant`. Default value is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) ID of the private cloud gateway, which serves as the connection point to establish connectivity with the cloud infrastructure.
	// ID of the private cloud gateway, which serves as the connection point to establish connectivity with the cloud infrastructure.
	PrivateCloudGatewayID *string `json:"privateCloudGatewayId,omitempty" tf:"private_cloud_gateway_id,omitempty"`
}

type CustomObservation struct {

	// (String) The cloud provider name.
	// The cloud provider name.
	Cloud *string `json:"cloud,omitempty" tf:"cloud,omitempty"`

	// (String) The context of the custom cloud configuration. Allowed values are project or tenant. Default value is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
	// The context of the custom cloud configuration. Allowed values are `project` or `tenant`. Default value is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) ID of the private cloud gateway, which serves as the connection point to establish connectivity with the cloud infrastructure.
	// ID of the private cloud gateway, which serves as the connection point to establish connectivity with the cloud infrastructure.
	PrivateCloudGatewayID *string `json:"privateCloudGatewayId,omitempty" tf:"private_cloud_gateway_id,omitempty"`
}

type CustomParameters struct {

	// (String) The cloud provider name.
	// The cloud provider name.
	// +kubebuilder:validation:Optional
	Cloud *string `json:"cloud,omitempty" tf:"cloud,omitempty"`

	// (String) The context of the custom cloud configuration. Allowed values are project or tenant. Default value is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
	// The context of the custom cloud configuration. Allowed values are `project` or `tenant`. Default value is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	// +kubebuilder:validation:Optional
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (Map of String, Sensitive) The credentials required for accessing the cloud.
	// The credentials required for accessing the cloud.
	// +kubebuilder:validation:Optional
	CredentialsSecretRef v1.SecretReference `json:"credentialsSecretRef" tf:"-"`

	// (String) ID of the private cloud gateway, which serves as the connection point to establish connectivity with the cloud infrastructure.
	// ID of the private cloud gateway, which serves as the connection point to establish connectivity with the cloud infrastructure.
	// +kubebuilder:validation:Optional
	PrivateCloudGatewayID *string `json:"privateCloudGatewayId,omitempty" tf:"private_cloud_gateway_id,omitempty"`
}

// CustomSpec defines the desired state of Custom
type CustomSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CustomParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CustomInitParameters `json:"initProvider,omitempty"`
}

// CustomStatus defines the observed state of Custom.
type CustomStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CustomObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Custom is the Schema for the Customs API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,palette}
type Custom struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cloud) || (has(self.initProvider) && has(self.initProvider.cloud))",message="spec.forProvider.cloud is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.credentialsSecretRef)",message="spec.forProvider.credentialsSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.privateCloudGatewayId) || (has(self.initProvider) && has(self.initProvider.privateCloudGatewayId))",message="spec.forProvider.privateCloudGatewayId is a required parameter"
	Spec   CustomSpec   `json:"spec"`
	Status CustomStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CustomList contains a list of Customs
type CustomList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Custom `json:"items"`
}

// Repository type metadata.
var (
	Custom_Kind             = "Custom"
	Custom_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Custom_Kind}.String()
	Custom_KindAPIVersion   = Custom_Kind + "." + CRDGroupVersion.String()
	Custom_GroupVersionKind = CRDGroupVersion.WithKind(Custom_Kind)
)

func init() {
	SchemeBuilder.Register(&Custom{}, &CustomList{})
}
