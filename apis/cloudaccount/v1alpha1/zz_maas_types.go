/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MaasObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MaasParameters struct {

	// +kubebuilder:validation:Optional
	MaasAPIEndpoint *string `json:"maasApiEndpoint,omitempty" tf:"maas_api_endpoint,omitempty"`

	// +kubebuilder:validation:Optional
	MaasAPIKeySecretRef *v1.SecretKeySelector `json:"maasApiKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PrivateCloudGatewayID *string `json:"privateCloudGatewayId,omitempty" tf:"private_cloud_gateway_id,omitempty"`
}

// MaasSpec defines the desired state of Maas
type MaasSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MaasParameters `json:"forProvider"`
}

// MaasStatus defines the observed state of Maas.
type MaasStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MaasObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Maas is the Schema for the Maass API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,jet-palette}
type Maas struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MaasSpec   `json:"spec"`
	Status            MaasStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MaasList contains a list of Maass
type MaasList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Maas `json:"items"`
}

// Repository type metadata.
var (
	Maas_Kind             = "Maas"
	Maas_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Maas_Kind}.String()
	Maas_KindAPIVersion   = Maas_Kind + "." + CRDGroupVersion.String()
	Maas_GroupVersionKind = CRDGroupVersion.WithKind(Maas_Kind)
)

func init() {
	SchemeBuilder.Register(&Maas{}, &MaasList{})
}
