/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IppoolObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IppoolParameters struct {

	// +kubebuilder:validation:Required
	Gateway *string `json:"gateway" tf:"gateway,omitempty"`

	// +kubebuilder:validation:Optional
	IPEndRange *string `json:"ipEndRange,omitempty" tf:"ip_end_range,omitempty"`

	// +kubebuilder:validation:Optional
	IPStartRange *string `json:"ipStartRange,omitempty" tf:"ip_start_range,omitempty"`

	// +kubebuilder:validation:Optional
	NameserverAddresses []*string `json:"nameserverAddresses,omitempty" tf:"nameserver_addresses,omitempty"`

	// +kubebuilder:validation:Optional
	NameserverSearchSuffix []*string `json:"nameserverSearchSuffix,omitempty" tf:"nameserver_search_suffix,omitempty"`

	// +kubebuilder:validation:Required
	NetworkType *string `json:"networkType" tf:"network_type,omitempty"`

	// +kubebuilder:validation:Required
	Prefix *float64 `json:"prefix" tf:"prefix,omitempty"`

	// +kubebuilder:validation:Required
	PrivateCloudGatewayID *string `json:"privateCloudGatewayId" tf:"private_cloud_gateway_id,omitempty"`

	// +kubebuilder:validation:Optional
	RestrictToSingleCluster *bool `json:"restrictToSingleCluster,omitempty" tf:"restrict_to_single_cluster,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetCidr *string `json:"subnetCidr,omitempty" tf:"subnet_cidr,omitempty"`
}

// IppoolSpec defines the desired state of Ippool
type IppoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IppoolParameters `json:"forProvider"`
}

// IppoolStatus defines the observed state of Ippool.
type IppoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IppoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Ippool is the Schema for the Ippools API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,jet-palette}
type Ippool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IppoolSpec   `json:"spec"`
	Status            IppoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IppoolList contains a list of Ippools
type IppoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Ippool `json:"items"`
}

// Repository type metadata.
var (
	Ippool_Kind             = "Ippool"
	Ippool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Ippool_Kind}.String()
	Ippool_KindAPIVersion   = Ippool_Kind + "." + CRDGroupVersion.String()
	Ippool_GroupVersionKind = CRDGroupVersion.WithKind(Ippool_Kind)
)

func init() {
	SchemeBuilder.Register(&Ippool{}, &IppoolList{})
}
