/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AzureStorageConfigInitParameters struct {

	// (String) Unique client Id from Azure console.
	// Unique client Id from Azure console.
	AzureClientID *string `json:"azureClientId,omitempty" tf:"azure_client_id,omitempty"`

	// (String, Sensitive) Azure secret for authentication.
	// Azure secret for authentication.
	AzureClientSecretSecretRef v1.SecretKeySelector `json:"azureClientSecretSecretRef" tf:"-"`

	// (String) Unique tenant Id from Azure console.
	// Unique tenant Id from Azure console.
	AzureTenantID *string `json:"azureTenantId,omitempty" tf:"azure_tenant_id,omitempty"`

	// (String) The container name.
	// The container name.
	ContainerName *string `json:"containerName,omitempty" tf:"container_name,omitempty"`

	// (String) The resource group name.
	// The resource group name.
	ResourceGroup *string `json:"resourceGroup,omitempty" tf:"resource_group,omitempty"`

	// keeping unit. eg: Standard_LRS
	// The stop-keeping unit. eg: `Standard_LRS`
	StockKeepingUnit *string `json:"stockKeepingUnit,omitempty" tf:"stock_keeping_unit,omitempty"`

	// (String) The storage name.
	// The storage name.
	StorageName *string `json:"storageName,omitempty" tf:"storage_name,omitempty"`

	// (String) Unique subscription Id from Azure console.
	// Unique subscription Id from Azure console.
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`
}

type AzureStorageConfigObservation struct {

	// (String) Unique client Id from Azure console.
	// Unique client Id from Azure console.
	AzureClientID *string `json:"azureClientId,omitempty" tf:"azure_client_id,omitempty"`

	// (String) Unique tenant Id from Azure console.
	// Unique tenant Id from Azure console.
	AzureTenantID *string `json:"azureTenantId,omitempty" tf:"azure_tenant_id,omitempty"`

	// (String) The container name.
	// The container name.
	ContainerName *string `json:"containerName,omitempty" tf:"container_name,omitempty"`

	// (String) The resource group name.
	// The resource group name.
	ResourceGroup *string `json:"resourceGroup,omitempty" tf:"resource_group,omitempty"`

	// keeping unit. eg: Standard_LRS
	// The stop-keeping unit. eg: `Standard_LRS`
	StockKeepingUnit *string `json:"stockKeepingUnit,omitempty" tf:"stock_keeping_unit,omitempty"`

	// (String) The storage name.
	// The storage name.
	StorageName *string `json:"storageName,omitempty" tf:"storage_name,omitempty"`

	// (String) Unique subscription Id from Azure console.
	// Unique subscription Id from Azure console.
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`
}

type AzureStorageConfigParameters struct {

	// (String) Unique client Id from Azure console.
	// Unique client Id from Azure console.
	// +kubebuilder:validation:Optional
	AzureClientID *string `json:"azureClientId" tf:"azure_client_id,omitempty"`

	// (String, Sensitive) Azure secret for authentication.
	// Azure secret for authentication.
	// +kubebuilder:validation:Optional
	AzureClientSecretSecretRef v1.SecretKeySelector `json:"azureClientSecretSecretRef" tf:"-"`

	// (String) Unique tenant Id from Azure console.
	// Unique tenant Id from Azure console.
	// +kubebuilder:validation:Optional
	AzureTenantID *string `json:"azureTenantId" tf:"azure_tenant_id,omitempty"`

	// (String) The container name.
	// The container name.
	// +kubebuilder:validation:Optional
	ContainerName *string `json:"containerName" tf:"container_name,omitempty"`

	// (String) The resource group name.
	// The resource group name.
	// +kubebuilder:validation:Optional
	ResourceGroup *string `json:"resourceGroup" tf:"resource_group,omitempty"`

	// keeping unit. eg: Standard_LRS
	// The stop-keeping unit. eg: `Standard_LRS`
	// +kubebuilder:validation:Optional
	StockKeepingUnit *string `json:"stockKeepingUnit" tf:"stock_keeping_unit,omitempty"`

	// (String) The storage name.
	// The storage name.
	// +kubebuilder:validation:Optional
	StorageName *string `json:"storageName" tf:"storage_name,omitempty"`

	// (String) Unique subscription Id from Azure console.
	// Unique subscription Id from Azure console.
	// +kubebuilder:validation:Optional
	SubscriptionID *string `json:"subscriptionId" tf:"subscription_id,omitempty"`
}

type GCPStorageConfigInitParameters struct {

	// (String, Sensitive) The GCP credentials in JSON format. These credentials are required to authenticate and manage.
	// The GCP credentials in JSON format. These credentials are required to authenticate and manage.
	GCPJSONCredentials *string `json:"gcpJsonCredentials,omitempty" tf:"gcp_json_credentials,omitempty"`

	// (String) The GCP project ID.
	// The GCP project ID.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type GCPStorageConfigObservation struct {

	// (String, Sensitive) The GCP credentials in JSON format. These credentials are required to authenticate and manage.
	// The GCP credentials in JSON format. These credentials are required to authenticate and manage.
	GCPJSONCredentials *string `json:"gcpJsonCredentials,omitempty" tf:"gcp_json_credentials,omitempty"`

	// (String) The GCP project ID.
	// The GCP project ID.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type GCPStorageConfigParameters struct {

	// (String, Sensitive) The GCP credentials in JSON format. These credentials are required to authenticate and manage.
	// The GCP credentials in JSON format. These credentials are required to authenticate and manage.
	// +kubebuilder:validation:Optional
	GCPJSONCredentials *string `json:"gcpJsonCredentials" tf:"gcp_json_credentials,omitempty"`

	// (String) The GCP project ID.
	// The GCP project ID.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`
}

type S3InitParameters struct {

	// (String) The access key for S3 authentication, required if 'credential_type' is set to 'secret'.
	// The access key for S3 authentication, required if 'credential_type' is set to 'secret'.
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`

	// (String) The Amazon Resource Name (ARN) of the IAM role to assume for accessing S3 when using 'sts' credentials.
	// The Amazon Resource Name (ARN) of the IAM role to assume for accessing S3 when using 'sts' credentials.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// based credentials.
	// The type of credentials used to access the S3 storage. Supported values are 'secret' for static credentials and 'sts' for temporary, token-based credentials.
	CredentialType *string `json:"credentialType,omitempty" tf:"credential_type,omitempty"`

	// account access to the S3 storage when using 'sts' credentials.
	// An external ID used for cross-account access to the S3 storage when using 'sts' credentials.
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// style URL for accessing S3.
	// A boolean flag indicating whether to enforce the path-style URL for accessing S3.
	S3ForcePathStyle *bool `json:"s3ForcePathStyle,omitempty" tf:"s3_force_path_style,omitempty"`

	// (String) The S3 URL endpoint.
	// The S3 URL endpoint.
	S3URL *string `json:"s3Url,omitempty" tf:"s3_url,omitempty"`

	// (String) The secret key for S3 authentication, required if 'credential_type' is set to 'secret'.
	// The secret key for S3 authentication, required if 'credential_type' is set to 'secret'.
	SecretKey *string `json:"secretKey,omitempty" tf:"secret_key,omitempty"`
}

type S3Observation struct {

	// (String) The access key for S3 authentication, required if 'credential_type' is set to 'secret'.
	// The access key for S3 authentication, required if 'credential_type' is set to 'secret'.
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`

	// (String) The Amazon Resource Name (ARN) of the IAM role to assume for accessing S3 when using 'sts' credentials.
	// The Amazon Resource Name (ARN) of the IAM role to assume for accessing S3 when using 'sts' credentials.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// based credentials.
	// The type of credentials used to access the S3 storage. Supported values are 'secret' for static credentials and 'sts' for temporary, token-based credentials.
	CredentialType *string `json:"credentialType,omitempty" tf:"credential_type,omitempty"`

	// account access to the S3 storage when using 'sts' credentials.
	// An external ID used for cross-account access to the S3 storage when using 'sts' credentials.
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// style URL for accessing S3.
	// A boolean flag indicating whether to enforce the path-style URL for accessing S3.
	S3ForcePathStyle *bool `json:"s3ForcePathStyle,omitempty" tf:"s3_force_path_style,omitempty"`

	// (String) The S3 URL endpoint.
	// The S3 URL endpoint.
	S3URL *string `json:"s3Url,omitempty" tf:"s3_url,omitempty"`

	// (String) The secret key for S3 authentication, required if 'credential_type' is set to 'secret'.
	// The secret key for S3 authentication, required if 'credential_type' is set to 'secret'.
	SecretKey *string `json:"secretKey,omitempty" tf:"secret_key,omitempty"`
}

type S3Parameters struct {

	// (String) The access key for S3 authentication, required if 'credential_type' is set to 'secret'.
	// The access key for S3 authentication, required if 'credential_type' is set to 'secret'.
	// +kubebuilder:validation:Optional
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`

	// (String) The Amazon Resource Name (ARN) of the IAM role to assume for accessing S3 when using 'sts' credentials.
	// The Amazon Resource Name (ARN) of the IAM role to assume for accessing S3 when using 'sts' credentials.
	// +kubebuilder:validation:Optional
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// based credentials.
	// The type of credentials used to access the S3 storage. Supported values are 'secret' for static credentials and 'sts' for temporary, token-based credentials.
	// +kubebuilder:validation:Optional
	CredentialType *string `json:"credentialType" tf:"credential_type,omitempty"`

	// account access to the S3 storage when using 'sts' credentials.
	// An external ID used for cross-account access to the S3 storage when using 'sts' credentials.
	// +kubebuilder:validation:Optional
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// style URL for accessing S3.
	// A boolean flag indicating whether to enforce the path-style URL for accessing S3.
	// +kubebuilder:validation:Optional
	S3ForcePathStyle *bool `json:"s3ForcePathStyle,omitempty" tf:"s3_force_path_style,omitempty"`

	// (String) The S3 URL endpoint.
	// The S3 URL endpoint.
	// +kubebuilder:validation:Optional
	S3URL *string `json:"s3Url,omitempty" tf:"s3_url,omitempty"`

	// (String) The secret key for S3 authentication, required if 'credential_type' is set to 'secret'.
	// The secret key for S3 authentication, required if 'credential_type' is set to 'secret'.
	// +kubebuilder:validation:Optional
	SecretKey *string `json:"secretKey,omitempty" tf:"secret_key,omitempty"`
}

type StorageLocationInitParameters struct {

	// (Block List, Max: 1) Azure storage settings for configuring the backup storage location. (see below for nested schema)
	// Azure storage settings for configuring the backup storage location.
	AzureStorageConfig []AzureStorageConfigInitParameters `json:"azureStorageConfig,omitempty" tf:"azure_storage_config,omitempty"`

	// compatible(minio) or gcp storage services.
	// The name of the storage bucket where backups are stored. This is relevant for S3 or S3-compatible(minio) or gcp storage services.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// compatible(minio) storage services.
	// An optional CA certificate used for SSL connections to ensure secure communication with the storage provider. This is relevant for S3 or S3-compatible(minio) storage services.
	CACert *string `json:"caCert,omitempty" tf:"ca_cert,omitempty"`

	// (String) The context of the backup storage location. Allowed values are project or tenant. Default value is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
	// The context of the backup storage location. Allowed values are `project` or `tenant`. Default value is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (Block List, Max: 1) GCP storage settings for configuring the backup storage location. (see below for nested schema)
	// GCP storage settings for configuring the backup storage location.
	GCPStorageConfig []GCPStorageConfigInitParameters `json:"gcpStorageConfig,omitempty" tf:"gcp_storage_config,omitempty"`

	// (Boolean) Specifies if this backup storage location should be used as the default location for storing backups.
	// Specifies if this backup storage location should be used as the default location for storing backups.
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// (String) The name of the backup storage location. This is a unique identifier for the backup location.
	// The name of the backup storage location. This is a unique identifier for the backup location.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// compatible(minio) storage services.
	// The region where the backup storage is located, typically corresponding to the region of the cloud provider. This is relevant for S3 or S3-compatible(minio) storage services.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// specific settings for configuring the backup storage location. (see below for nested schema)
	// S3-specific settings for configuring the backup storage location.
	S3 []S3InitParameters `json:"s3,omitempty" tf:"s3,omitempty"`

	// (String) The storage location provider for backup storage. Allowed values are aws or minio or gcp or azure. Default value is aws.
	// The storage location provider for backup storage. Allowed values are `aws` or `minio` or `gcp` or `azure`. Default value is `aws`.
	StorageProvider *string `json:"storageProvider,omitempty" tf:"storage_provider,omitempty"`
}

type StorageLocationObservation struct {

	// (Block List, Max: 1) Azure storage settings for configuring the backup storage location. (see below for nested schema)
	// Azure storage settings for configuring the backup storage location.
	AzureStorageConfig []AzureStorageConfigObservation `json:"azureStorageConfig,omitempty" tf:"azure_storage_config,omitempty"`

	// compatible(minio) or gcp storage services.
	// The name of the storage bucket where backups are stored. This is relevant for S3 or S3-compatible(minio) or gcp storage services.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// compatible(minio) storage services.
	// An optional CA certificate used for SSL connections to ensure secure communication with the storage provider. This is relevant for S3 or S3-compatible(minio) storage services.
	CACert *string `json:"caCert,omitempty" tf:"ca_cert,omitempty"`

	// (String) The context of the backup storage location. Allowed values are project or tenant. Default value is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
	// The context of the backup storage location. Allowed values are `project` or `tenant`. Default value is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (Block List, Max: 1) GCP storage settings for configuring the backup storage location. (see below for nested schema)
	// GCP storage settings for configuring the backup storage location.
	GCPStorageConfig []GCPStorageConfigObservation `json:"gcpStorageConfig,omitempty" tf:"gcp_storage_config,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Specifies if this backup storage location should be used as the default location for storing backups.
	// Specifies if this backup storage location should be used as the default location for storing backups.
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// (String) The name of the backup storage location. This is a unique identifier for the backup location.
	// The name of the backup storage location. This is a unique identifier for the backup location.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// compatible(minio) storage services.
	// The region where the backup storage is located, typically corresponding to the region of the cloud provider. This is relevant for S3 or S3-compatible(minio) storage services.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// specific settings for configuring the backup storage location. (see below for nested schema)
	// S3-specific settings for configuring the backup storage location.
	S3 []S3Observation `json:"s3,omitempty" tf:"s3,omitempty"`

	// (String) The storage location provider for backup storage. Allowed values are aws or minio or gcp or azure. Default value is aws.
	// The storage location provider for backup storage. Allowed values are `aws` or `minio` or `gcp` or `azure`. Default value is `aws`.
	StorageProvider *string `json:"storageProvider,omitempty" tf:"storage_provider,omitempty"`
}

type StorageLocationParameters struct {

	// (Block List, Max: 1) Azure storage settings for configuring the backup storage location. (see below for nested schema)
	// Azure storage settings for configuring the backup storage location.
	// +kubebuilder:validation:Optional
	AzureStorageConfig []AzureStorageConfigParameters `json:"azureStorageConfig,omitempty" tf:"azure_storage_config,omitempty"`

	// compatible(minio) or gcp storage services.
	// The name of the storage bucket where backups are stored. This is relevant for S3 or S3-compatible(minio) or gcp storage services.
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// compatible(minio) storage services.
	// An optional CA certificate used for SSL connections to ensure secure communication with the storage provider. This is relevant for S3 or S3-compatible(minio) storage services.
	// +kubebuilder:validation:Optional
	CACert *string `json:"caCert,omitempty" tf:"ca_cert,omitempty"`

	// (String) The context of the backup storage location. Allowed values are project or tenant. Default value is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
	// The context of the backup storage location. Allowed values are `project` or `tenant`. Default value is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	// +kubebuilder:validation:Optional
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (Block List, Max: 1) GCP storage settings for configuring the backup storage location. (see below for nested schema)
	// GCP storage settings for configuring the backup storage location.
	// +kubebuilder:validation:Optional
	GCPStorageConfig []GCPStorageConfigParameters `json:"gcpStorageConfig,omitempty" tf:"gcp_storage_config,omitempty"`

	// (Boolean) Specifies if this backup storage location should be used as the default location for storing backups.
	// Specifies if this backup storage location should be used as the default location for storing backups.
	// +kubebuilder:validation:Optional
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// (String) The name of the backup storage location. This is a unique identifier for the backup location.
	// The name of the backup storage location. This is a unique identifier for the backup location.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// compatible(minio) storage services.
	// The region where the backup storage is located, typically corresponding to the region of the cloud provider. This is relevant for S3 or S3-compatible(minio) storage services.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// specific settings for configuring the backup storage location. (see below for nested schema)
	// S3-specific settings for configuring the backup storage location.
	// +kubebuilder:validation:Optional
	S3 []S3Parameters `json:"s3,omitempty" tf:"s3,omitempty"`

	// (String) The storage location provider for backup storage. Allowed values are aws or minio or gcp or azure. Default value is aws.
	// The storage location provider for backup storage. Allowed values are `aws` or `minio` or `gcp` or `azure`. Default value is `aws`.
	// +kubebuilder:validation:Optional
	StorageProvider *string `json:"storageProvider,omitempty" tf:"storage_provider,omitempty"`
}

// StorageLocationSpec defines the desired state of StorageLocation
type StorageLocationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageLocationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StorageLocationInitParameters `json:"initProvider,omitempty"`
}

// StorageLocationStatus defines the observed state of StorageLocation.
type StorageLocationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageLocationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// StorageLocation is the Schema for the StorageLocations API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,palette}
type StorageLocation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   StorageLocationSpec   `json:"spec"`
	Status StorageLocationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageLocationList contains a list of StorageLocations
type StorageLocationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageLocation `json:"items"`
}

// Repository type metadata.
var (
	StorageLocation_Kind             = "StorageLocation"
	StorageLocation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageLocation_Kind}.String()
	StorageLocation_KindAPIVersion   = StorageLocation_Kind + "." + CRDGroupVersion.String()
	StorageLocation_GroupVersionKind = CRDGroupVersion.WithKind(StorageLocation_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageLocation{}, &StorageLocationList{})
}
