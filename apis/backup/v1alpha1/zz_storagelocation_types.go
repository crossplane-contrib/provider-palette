/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type S3Observation struct {
}

type S3Parameters struct {

	// +kubebuilder:validation:Optional
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`

	// +kubebuilder:validation:Optional
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// +kubebuilder:validation:Required
	CredentialType *string `json:"credentialType" tf:"credential_type,omitempty"`

	// +kubebuilder:validation:Optional
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// +kubebuilder:validation:Optional
	S3ForcePathStyle *bool `json:"s3ForcePathStyle,omitempty" tf:"s3_force_path_style,omitempty"`

	// +kubebuilder:validation:Optional
	S3URL *string `json:"s3Url,omitempty" tf:"s3_url,omitempty"`

	// +kubebuilder:validation:Optional
	SecretKey *string `json:"secretKey,omitempty" tf:"secret_key,omitempty"`
}

type StorageLocationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type StorageLocationParameters struct {

	// +kubebuilder:validation:Required
	BucketName *string `json:"bucketName" tf:"bucket_name,omitempty"`

	// +kubebuilder:validation:Optional
	CACert *string `json:"caCert,omitempty" tf:"ca_cert,omitempty"`

	// +kubebuilder:validation:Required
	IsDefault *bool `json:"isDefault" tf:"is_default,omitempty"`

	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	S3 []S3Parameters `json:"s3" tf:"s3,omitempty"`
}

// StorageLocationSpec defines the desired state of StorageLocation
type StorageLocationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageLocationParameters `json:"forProvider"`
}

// StorageLocationStatus defines the observed state of StorageLocation.
type StorageLocationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageLocationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageLocation is the Schema for the StorageLocations API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,jet-palette}
type StorageLocation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageLocationSpec   `json:"spec"`
	Status            StorageLocationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageLocationList contains a list of StorageLocations
type StorageLocationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageLocation `json:"items"`
}

// Repository type metadata.
var (
	StorageLocation_Kind             = "StorageLocation"
	StorageLocation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageLocation_Kind}.String()
	StorageLocation_KindAPIVersion   = StorageLocation_Kind + "." + CRDGroupVersion.String()
	StorageLocation_GroupVersionKind = CRDGroupVersion.WithKind(StorageLocation_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageLocation{}, &StorageLocationList{})
}
