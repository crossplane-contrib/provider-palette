/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplianceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ApplianceParameters struct {

	// +kubebuilder:validation:Optional
	PairingKey *string `json:"pairingKey,omitempty" tf:"pairing_key,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	UID *string `json:"uid" tf:"uid,omitempty"`

	// +kubebuilder:validation:Optional
	Wait *bool `json:"wait,omitempty" tf:"wait,omitempty"`
}

// ApplianceSpec defines the desired state of Appliance
type ApplianceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplianceParameters `json:"forProvider"`
}

// ApplianceStatus defines the observed state of Appliance.
type ApplianceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplianceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Appliance is the Schema for the Appliances API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,jet-palette}
type Appliance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplianceSpec   `json:"spec"`
	Status            ApplianceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplianceList contains a list of Appliances
type ApplianceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Appliance `json:"items"`
}

// Repository type metadata.
var (
	Appliance_Kind             = "Appliance"
	Appliance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Appliance_Kind}.String()
	Appliance_KindAPIVersion   = Appliance_Kind + "." + CRDGroupVersion.String()
	Appliance_GroupVersionKind = CRDGroupVersion.WithKind(Appliance_Kind)
)

func init() {
	SchemeBuilder.Register(&Appliance{}, &ApplianceList{})
}
