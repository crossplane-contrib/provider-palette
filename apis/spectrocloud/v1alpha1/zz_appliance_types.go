// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplianceInitParameters struct {

	// (String)
	PairingKey *string `json:"pairingKey,omitempty" tf:"pairing_key,omitempty"`

	// (Map of String)
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String)
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// (Boolean)
	Wait *bool `json:"wait,omitempty" tf:"wait,omitempty"`
}

type ApplianceObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String)
	PairingKey *string `json:"pairingKey,omitempty" tf:"pairing_key,omitempty"`

	// (Map of String)
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String)
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// (Boolean)
	Wait *bool `json:"wait,omitempty" tf:"wait,omitempty"`
}

type ApplianceParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	PairingKey *string `json:"pairingKey,omitempty" tf:"pairing_key,omitempty"`

	// (Map of String)
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	Wait *bool `json:"wait,omitempty" tf:"wait,omitempty"`
}

// ApplianceSpec defines the desired state of Appliance
type ApplianceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplianceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ApplianceInitParameters `json:"initProvider,omitempty"`
}

// ApplianceStatus defines the observed state of Appliance.
type ApplianceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplianceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Appliance is the Schema for the Appliances API. A resource for creating and managing appliances for Edge Native cluster provisioning.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,palette}
type Appliance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.uid) || (has(self.initProvider) && has(self.initProvider.uid))",message="spec.forProvider.uid is a required parameter"
	Spec   ApplianceSpec   `json:"spec"`
	Status ApplianceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplianceList contains a list of Appliances
type ApplianceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Appliance `json:"items"`
}

// Repository type metadata.
var (
	Appliance_Kind             = "Appliance"
	Appliance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Appliance_Kind}.String()
	Appliance_KindAPIVersion   = Appliance_Kind + "." + CRDGroupVersion.String()
	Appliance_GroupVersionKind = CRDGroupVersion.WithKind(Appliance_Kind)
)

func init() {
	SchemeBuilder.Register(&Appliance{}, &ApplianceList{})
}
