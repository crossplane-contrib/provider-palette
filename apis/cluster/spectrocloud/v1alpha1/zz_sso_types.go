/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type OidcInitParameters struct {

	// (String) Client ID for OIDC authentication.
	// Client ID for OIDC authentication.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String, Sensitive) Client secret for OIDC authentication (sensitive).
	// Client secret for OIDC authentication (sensitive).
	ClientSecretSecretRef v1.SecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// (Set of String) A set of default team IDs assigned to users.
	// A set of default team IDs assigned to users.
	// +listType=set
	DefaultTeamIds []*string `json:"defaultTeamIds,omitempty" tf:"default_team_ids,omitempty"`

	// (String) The name of the claim that returns the user's email address from the identity provider.
	// The name of the claim that returns the user's email address from the identity provider.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (String) The name of the claim that returns the user's first name from the identity provider.
	// The name of the claim that returns the user's first name from the identity provider.
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// (String) Certificate authority (CA) certificate for the identity provider.
	// Certificate authority (CA) certificate for the identity provider.
	IdentityProviderCACertificate *string `json:"identityProviderCaCertificate,omitempty" tf:"identity_provider_ca_certificate,omitempty"`

	// (Boolean) Boolean to skip TLS verification for identity provider communication.
	// Boolean to skip TLS verification for identity provider communication.
	InsecureSkipTLSVerify *bool `json:"insecureSkipTlsVerify,omitempty" tf:"insecure_skip_tls_verify,omitempty"`

	// (String) URL of the OIDC issuer.
	// URL of the OIDC issuer.
	IssuerURL *string `json:"issuerUrl,omitempty" tf:"issuer_url,omitempty"`

	// (String) The name of the claim that returns the user's last name from the identity provider.
	// The name of the claim that returns the user's last name from the identity provider.
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// (Set of String) Scopes requested during OIDC authentication.
	// Scopes requested during OIDC authentication.
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (String) The name of the claim that returns the user's group memberships from the Identity Provider. The values of this claim will map to SpectroCloud teams.
	// The name of the claim that returns the user's group memberships from the Identity Provider. The values of this claim will map to SpectroCloud teams.
	SpectroTeam *string `json:"spectroTeam,omitempty" tf:"spectro_team,omitempty"`

	// (Block List, Max: 1) To allow Palette to query the OIDC userinfo endpoint using the provided Issuer URL. Palette will first attempt to retrieve role and group information from userInfo endpoint. If unavailable, Palette will fall back to using Required Claims as specified above. Use the following fields to specify what Required Claims Palette will include when querying the userinfo endpoint. (see below for nested schema)
	// To allow Palette to query the OIDC userinfo endpoint using the provided Issuer URL. Palette will first attempt to retrieve role and group information from userInfo endpoint. If unavailable, Palette will fall back to using Required Claims as specified above. Use the following fields to specify what Required Claims Palette will include when querying the userinfo endpoint.
	UserInfoEndpoint []UserInfoEndpointInitParameters `json:"userInfoEndpoint,omitempty" tf:"user_info_endpoint,omitempty"`
}

type OidcObservation struct {

	// (String) URL to which the identity provider redirects after authentication.
	// URL to which the identity provider redirects after authentication.
	CallbackURL *string `json:"callbackUrl,omitempty" tf:"callback_url,omitempty"`

	// (String) Client ID for OIDC authentication.
	// Client ID for OIDC authentication.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (Set of String) A set of default team IDs assigned to users.
	// A set of default team IDs assigned to users.
	// +listType=set
	DefaultTeamIds []*string `json:"defaultTeamIds,omitempty" tf:"default_team_ids,omitempty"`

	// (String) The name of the claim that returns the user's email address from the identity provider.
	// The name of the claim that returns the user's email address from the identity provider.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (String) The name of the claim that returns the user's first name from the identity provider.
	// The name of the claim that returns the user's first name from the identity provider.
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// (String) Certificate authority (CA) certificate for the identity provider.
	// Certificate authority (CA) certificate for the identity provider.
	IdentityProviderCACertificate *string `json:"identityProviderCaCertificate,omitempty" tf:"identity_provider_ca_certificate,omitempty"`

	// (Boolean) Boolean to skip TLS verification for identity provider communication.
	// Boolean to skip TLS verification for identity provider communication.
	InsecureSkipTLSVerify *bool `json:"insecureSkipTlsVerify,omitempty" tf:"insecure_skip_tls_verify,omitempty"`

	// (String) URL of the OIDC issuer.
	// URL of the OIDC issuer.
	IssuerURL *string `json:"issuerUrl,omitempty" tf:"issuer_url,omitempty"`

	// (String) The name of the claim that returns the user's last name from the identity provider.
	// The name of the claim that returns the user's last name from the identity provider.
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// (String) URL used for logging out of the OIDC session.
	// URL used for logging out of the OIDC session.
	LogoutURL *string `json:"logoutUrl,omitempty" tf:"logout_url,omitempty"`

	// (Set of String) Scopes requested during OIDC authentication.
	// Scopes requested during OIDC authentication.
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (String) The name of the claim that returns the user's group memberships from the Identity Provider. The values of this claim will map to SpectroCloud teams.
	// The name of the claim that returns the user's group memberships from the Identity Provider. The values of this claim will map to SpectroCloud teams.
	SpectroTeam *string `json:"spectroTeam,omitempty" tf:"spectro_team,omitempty"`

	// (Block List, Max: 1) To allow Palette to query the OIDC userinfo endpoint using the provided Issuer URL. Palette will first attempt to retrieve role and group information from userInfo endpoint. If unavailable, Palette will fall back to using Required Claims as specified above. Use the following fields to specify what Required Claims Palette will include when querying the userinfo endpoint. (see below for nested schema)
	// To allow Palette to query the OIDC userinfo endpoint using the provided Issuer URL. Palette will first attempt to retrieve role and group information from userInfo endpoint. If unavailable, Palette will fall back to using Required Claims as specified above. Use the following fields to specify what Required Claims Palette will include when querying the userinfo endpoint.
	UserInfoEndpoint []UserInfoEndpointObservation `json:"userInfoEndpoint,omitempty" tf:"user_info_endpoint,omitempty"`
}

type OidcParameters struct {

	// (String) Client ID for OIDC authentication.
	// Client ID for OIDC authentication.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId" tf:"client_id,omitempty"`

	// (String, Sensitive) Client secret for OIDC authentication (sensitive).
	// Client secret for OIDC authentication (sensitive).
	// +kubebuilder:validation:Optional
	ClientSecretSecretRef v1.SecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// (Set of String) A set of default team IDs assigned to users.
	// A set of default team IDs assigned to users.
	// +kubebuilder:validation:Optional
	// +listType=set
	DefaultTeamIds []*string `json:"defaultTeamIds,omitempty" tf:"default_team_ids,omitempty"`

	// (String) The name of the claim that returns the user's email address from the identity provider.
	// The name of the claim that returns the user's email address from the identity provider.
	// +kubebuilder:validation:Optional
	Email *string `json:"email" tf:"email,omitempty"`

	// (String) The name of the claim that returns the user's first name from the identity provider.
	// The name of the claim that returns the user's first name from the identity provider.
	// +kubebuilder:validation:Optional
	FirstName *string `json:"firstName" tf:"first_name,omitempty"`

	// (String) Certificate authority (CA) certificate for the identity provider.
	// Certificate authority (CA) certificate for the identity provider.
	// +kubebuilder:validation:Optional
	IdentityProviderCACertificate *string `json:"identityProviderCaCertificate,omitempty" tf:"identity_provider_ca_certificate,omitempty"`

	// (Boolean) Boolean to skip TLS verification for identity provider communication.
	// Boolean to skip TLS verification for identity provider communication.
	// +kubebuilder:validation:Optional
	InsecureSkipTLSVerify *bool `json:"insecureSkipTlsVerify,omitempty" tf:"insecure_skip_tls_verify,omitempty"`

	// (String) URL of the OIDC issuer.
	// URL of the OIDC issuer.
	// +kubebuilder:validation:Optional
	IssuerURL *string `json:"issuerUrl" tf:"issuer_url,omitempty"`

	// (String) The name of the claim that returns the user's last name from the identity provider.
	// The name of the claim that returns the user's last name from the identity provider.
	// +kubebuilder:validation:Optional
	LastName *string `json:"lastName" tf:"last_name,omitempty"`

	// (Set of String) Scopes requested during OIDC authentication.
	// Scopes requested during OIDC authentication.
	// +kubebuilder:validation:Optional
	// +listType=set
	Scopes []*string `json:"scopes" tf:"scopes,omitempty"`

	// (String) The name of the claim that returns the user's group memberships from the Identity Provider. The values of this claim will map to SpectroCloud teams.
	// The name of the claim that returns the user's group memberships from the Identity Provider. The values of this claim will map to SpectroCloud teams.
	// +kubebuilder:validation:Optional
	SpectroTeam *string `json:"spectroTeam" tf:"spectro_team,omitempty"`

	// (Block List, Max: 1) To allow Palette to query the OIDC userinfo endpoint using the provided Issuer URL. Palette will first attempt to retrieve role and group information from userInfo endpoint. If unavailable, Palette will fall back to using Required Claims as specified above. Use the following fields to specify what Required Claims Palette will include when querying the userinfo endpoint. (see below for nested schema)
	// To allow Palette to query the OIDC userinfo endpoint using the provided Issuer URL. Palette will first attempt to retrieve role and group information from userInfo endpoint. If unavailable, Palette will fall back to using Required Claims as specified above. Use the following fields to specify what Required Claims Palette will include when querying the userinfo endpoint.
	// +kubebuilder:validation:Optional
	UserInfoEndpoint []UserInfoEndpointParameters `json:"userInfoEndpoint,omitempty" tf:"user_info_endpoint,omitempty"`
}

type SAMLInitParameters struct {

	// (Set of String) A set of default team IDs assigned to users.
	// A set of default team IDs assigned to users.
	// +listType=set
	DefaultTeamIds []*string `json:"defaultTeamIds,omitempty" tf:"default_team_ids,omitempty"`

	// (String) The name of the claim that returns the user's email address from the identity provider.
	// User's email address retrieved from identity provider.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (Boolean) Boolean to enable SAML single logout feature.
	// Boolean to enable SAML single logout feature.
	EnableSingleLogout *bool `json:"enableSingleLogout,omitempty" tf:"enable_single_logout,omitempty"`

	// (String) The name of the claim that returns the user's first name from the identity provider.
	// User's first name retrieved from identity provider.
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// (String) Metadata XML of the SAML identity provider.
	// Metadata XML of the SAML identity provider.
	IdentityProviderMetadata *string `json:"identityProviderMetadata,omitempty" tf:"identity_provider_metadata,omitempty"`

	// (String) The name of the claim that returns the user's last name from the identity provider.
	// User's last name retrieved from identity provider.
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// (String) Format of the NameID attribute in SAML responses.
	// Format of the NameID attribute in SAML responses.
	NameIDFormat *string `json:"nameIdFormat,omitempty" tf:"name_id_format,omitempty"`

	// (String) The identity provider service used for SAML authentication.
	// The identity provider service used for SAML authentication.
	ServiceProvider *string `json:"serviceProvider,omitempty" tf:"service_provider,omitempty"`

	// (String) The name of the claim that returns the user's group memberships from the Identity Provider. The values of this claim will map to SpectroCloud teams.
	// The SpectroCloud team the user belongs to.
	SpectroTeam *string `json:"spectroTeam,omitempty" tf:"spectro_team,omitempty"`
}

type SAMLObservation struct {

	// (String) Certificate for SAML authentication.
	// Certificate for SAML authentication.
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// (Set of String) A set of default team IDs assigned to users.
	// A set of default team IDs assigned to users.
	// +listType=set
	DefaultTeamIds []*string `json:"defaultTeamIds,omitempty" tf:"default_team_ids,omitempty"`

	// (String) The name of the claim that returns the user's email address from the identity provider.
	// User's email address retrieved from identity provider.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (Boolean) Boolean to enable SAML single logout feature.
	// Boolean to enable SAML single logout feature.
	EnableSingleLogout *bool `json:"enableSingleLogout,omitempty" tf:"enable_single_logout,omitempty"`

	// (String) Entity ID used to identify the service provider.
	// Entity ID used to identify the service provider.
	EntityID *string `json:"entityId,omitempty" tf:"entity_id,omitempty"`

	// (String) The name of the claim that returns the user's first name from the identity provider.
	// User's first name retrieved from identity provider.
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// (String) Metadata XML of the SAML identity provider.
	// Metadata XML of the SAML identity provider.
	IdentityProviderMetadata *string `json:"identityProviderMetadata,omitempty" tf:"identity_provider_metadata,omitempty"`

	// (String) SAML identity provider issuer URL.
	// SAML identity provider issuer URL.
	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	// (String) The name of the claim that returns the user's last name from the identity provider.
	// User's last name retrieved from identity provider.
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// (String) Login URL for the SAML identity provider.
	// Login URL for the SAML identity provider.
	LoginURL *string `json:"loginUrl,omitempty" tf:"login_url,omitempty"`

	// (String) Format of the NameID attribute in SAML responses.
	// Format of the NameID attribute in SAML responses.
	NameIDFormat *string `json:"nameIdFormat,omitempty" tf:"name_id_format,omitempty"`

	// (String) The identity provider service used for SAML authentication.
	// The identity provider service used for SAML authentication.
	ServiceProvider *string `json:"serviceProvider,omitempty" tf:"service_provider,omitempty"`

	// (String) Metadata XML of the SAML service provider.
	// Metadata XML of the SAML service provider.
	ServiceProviderMetadata *string `json:"serviceProviderMetadata,omitempty" tf:"service_provider_metadata,omitempty"`

	// (String) URL used for initiating SAML single logout.
	// URL used for initiating SAML single logout.
	SingleLogoutURL *string `json:"singleLogoutUrl,omitempty" tf:"single_logout_url,omitempty"`

	// (String) The name of the claim that returns the user's group memberships from the Identity Provider. The values of this claim will map to SpectroCloud teams.
	// The SpectroCloud team the user belongs to.
	SpectroTeam *string `json:"spectroTeam,omitempty" tf:"spectro_team,omitempty"`
}

type SAMLParameters struct {

	// (Set of String) A set of default team IDs assigned to users.
	// A set of default team IDs assigned to users.
	// +kubebuilder:validation:Optional
	// +listType=set
	DefaultTeamIds []*string `json:"defaultTeamIds,omitempty" tf:"default_team_ids,omitempty"`

	// (String) The name of the claim that returns the user's email address from the identity provider.
	// User's email address retrieved from identity provider.
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (Boolean) Boolean to enable SAML single logout feature.
	// Boolean to enable SAML single logout feature.
	// +kubebuilder:validation:Optional
	EnableSingleLogout *bool `json:"enableSingleLogout,omitempty" tf:"enable_single_logout,omitempty"`

	// (String) The name of the claim that returns the user's first name from the identity provider.
	// User's first name retrieved from identity provider.
	// +kubebuilder:validation:Optional
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// (String) Metadata XML of the SAML identity provider.
	// Metadata XML of the SAML identity provider.
	// +kubebuilder:validation:Optional
	IdentityProviderMetadata *string `json:"identityProviderMetadata" tf:"identity_provider_metadata,omitempty"`

	// (String) The name of the claim that returns the user's last name from the identity provider.
	// User's last name retrieved from identity provider.
	// +kubebuilder:validation:Optional
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// (String) Format of the NameID attribute in SAML responses.
	// Format of the NameID attribute in SAML responses.
	// +kubebuilder:validation:Optional
	NameIDFormat *string `json:"nameIdFormat" tf:"name_id_format,omitempty"`

	// (String) The identity provider service used for SAML authentication.
	// The identity provider service used for SAML authentication.
	// +kubebuilder:validation:Optional
	ServiceProvider *string `json:"serviceProvider" tf:"service_provider,omitempty"`

	// (String) The name of the claim that returns the user's group memberships from the Identity Provider. The values of this claim will map to SpectroCloud teams.
	// The SpectroCloud team the user belongs to.
	// +kubebuilder:validation:Optional
	SpectroTeam *string `json:"spectroTeam,omitempty" tf:"spectro_team,omitempty"`
}

type SsoInitParameters struct {

	// (Set of String) A set of external authentication providers such as GitHub and Google.
	// A set of external authentication providers such as GitHub and Google.
	// +listType=set
	AuthProviders []*string `json:"authProviders,omitempty" tf:"auth_providers,omitempty"`

	// (Set of String) A set of domains associated with the SSO configuration.
	// A set of domains associated with the SSO configuration.
	// +listType=set
	Domains []*string `json:"domains,omitempty" tf:"domains,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Oidc []OidcInitParameters `json:"oidc,omitempty" tf:"oidc,omitempty"`

	// (Block List, Max: 1) Configuration for Security Assertion Markup Language (SAML) authentication. (see below for nested schema)
	// Configuration for Security Assertion Markup Language (SAML) authentication.
	SAML []SAMLInitParameters `json:"saml,omitempty" tf:"saml,omitempty"`

	// (String) Defines the type of SSO authentication. Supported values: none, saml, oidc.
	// Defines the type of SSO authentication. Supported values: none, saml, oidc.
	SsoAuthType *string `json:"ssoAuthType,omitempty" tf:"sso_auth_type,omitempty"`
}

type SsoObservation struct {

	// (Set of String) A set of external authentication providers such as GitHub and Google.
	// A set of external authentication providers such as GitHub and Google.
	// +listType=set
	AuthProviders []*string `json:"authProviders,omitempty" tf:"auth_providers,omitempty"`

	// (Set of String) A set of domains associated with the SSO configuration.
	// A set of domains associated with the SSO configuration.
	// +listType=set
	Domains []*string `json:"domains,omitempty" tf:"domains,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Oidc []OidcObservation `json:"oidc,omitempty" tf:"oidc,omitempty"`

	// (Block List, Max: 1) Configuration for Security Assertion Markup Language (SAML) authentication. (see below for nested schema)
	// Configuration for Security Assertion Markup Language (SAML) authentication.
	SAML []SAMLObservation `json:"saml,omitempty" tf:"saml,omitempty"`

	// (String) Defines the type of SSO authentication. Supported values: none, saml, oidc.
	// Defines the type of SSO authentication. Supported values: none, saml, oidc.
	SsoAuthType *string `json:"ssoAuthType,omitempty" tf:"sso_auth_type,omitempty"`
}

type SsoParameters struct {

	// (Set of String) A set of external authentication providers such as GitHub and Google.
	// A set of external authentication providers such as GitHub and Google.
	// +kubebuilder:validation:Optional
	// +listType=set
	AuthProviders []*string `json:"authProviders,omitempty" tf:"auth_providers,omitempty"`

	// (Set of String) A set of domains associated with the SSO configuration.
	// A set of domains associated with the SSO configuration.
	// +kubebuilder:validation:Optional
	// +listType=set
	Domains []*string `json:"domains,omitempty" tf:"domains,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Oidc []OidcParameters `json:"oidc,omitempty" tf:"oidc,omitempty"`

	// (Block List, Max: 1) Configuration for Security Assertion Markup Language (SAML) authentication. (see below for nested schema)
	// Configuration for Security Assertion Markup Language (SAML) authentication.
	// +kubebuilder:validation:Optional
	SAML []SAMLParameters `json:"saml,omitempty" tf:"saml,omitempty"`

	// (String) Defines the type of SSO authentication. Supported values: none, saml, oidc.
	// Defines the type of SSO authentication. Supported values: none, saml, oidc.
	// +kubebuilder:validation:Optional
	SsoAuthType *string `json:"ssoAuthType,omitempty" tf:"sso_auth_type,omitempty"`
}

type UserInfoEndpointInitParameters struct {

	// (String) The name of the claim that returns the user's email address from the identity provider.
	// The name of the claim that returns the user's email address from the identity provider.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (String) The name of the claim that returns the user's first name from the identity provider.
	// The name of the claim that returns the user's first name from the identity provider.
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// (String) The name of the claim that returns the user's last name from the identity provider.
	// The name of the claim that returns the user's last name from the identity provider.
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// (String) The name of the claim that returns the user's group memberships from the Identity Provider. The values of this claim will map to SpectroCloud teams.
	// The name of the claim that returns the user's group memberships from the Identity Provider. The values of this claim will map to SpectroCloud teams.
	SpectroTeam *string `json:"spectroTeam,omitempty" tf:"spectro_team,omitempty"`
}

type UserInfoEndpointObservation struct {

	// (String) The name of the claim that returns the user's email address from the identity provider.
	// The name of the claim that returns the user's email address from the identity provider.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (String) The name of the claim that returns the user's first name from the identity provider.
	// The name of the claim that returns the user's first name from the identity provider.
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// (String) The name of the claim that returns the user's last name from the identity provider.
	// The name of the claim that returns the user's last name from the identity provider.
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// (String) The name of the claim that returns the user's group memberships from the Identity Provider. The values of this claim will map to SpectroCloud teams.
	// The name of the claim that returns the user's group memberships from the Identity Provider. The values of this claim will map to SpectroCloud teams.
	SpectroTeam *string `json:"spectroTeam,omitempty" tf:"spectro_team,omitempty"`
}

type UserInfoEndpointParameters struct {

	// (String) The name of the claim that returns the user's email address from the identity provider.
	// The name of the claim that returns the user's email address from the identity provider.
	// +kubebuilder:validation:Optional
	Email *string `json:"email" tf:"email,omitempty"`

	// (String) The name of the claim that returns the user's first name from the identity provider.
	// The name of the claim that returns the user's first name from the identity provider.
	// +kubebuilder:validation:Optional
	FirstName *string `json:"firstName" tf:"first_name,omitempty"`

	// (String) The name of the claim that returns the user's last name from the identity provider.
	// The name of the claim that returns the user's last name from the identity provider.
	// +kubebuilder:validation:Optional
	LastName *string `json:"lastName" tf:"last_name,omitempty"`

	// (String) The name of the claim that returns the user's group memberships from the Identity Provider. The values of this claim will map to SpectroCloud teams.
	// The name of the claim that returns the user's group memberships from the Identity Provider. The values of this claim will map to SpectroCloud teams.
	// +kubebuilder:validation:Optional
	SpectroTeam *string `json:"spectroTeam" tf:"spectro_team,omitempty"`
}

// SsoSpec defines the desired state of Sso
type SsoSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SsoParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SsoInitParameters `json:"initProvider,omitempty"`
}

// SsoStatus defines the observed state of Sso.
type SsoStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SsoObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Sso is the Schema for the Ssos API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,palette}
type Sso struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SsoSpec   `json:"spec"`
	Status            SsoStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SsoList contains a list of Ssos
type SsoList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Sso `json:"items"`
}

// Repository type metadata.
var (
	Sso_Kind             = "Sso"
	Sso_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Sso_Kind}.String()
	Sso_KindAPIVersion   = Sso_Kind + "." + CRDGroupVersion.String()
	Sso_GroupVersionKind = CRDGroupVersion.WithKind(Sso_Kind)
)

func init() {
	SchemeBuilder.Register(&Sso{}, &SsoList{})
}
