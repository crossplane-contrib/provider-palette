// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EdgeVsphereBackupPolicyInitParameters struct {

	// The ID of the backup location to use for the backup.
	BackupLocationID *string `json:"backupLocationId,omitempty" tf:"backup_location_id,omitempty"`

	// The list of cluster UIDs to include in the backup. If `include_all_clusters` is set to `true`, then all clusters will be included.
	ClusterUids []*string `json:"clusterUids,omitempty" tf:"cluster_uids,omitempty"`

	// The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
	ExpiryInHour *float64 `json:"expiryInHour,omitempty" tf:"expiry_in_hour,omitempty"`

	// Whether to include all clusters in the backup. If set to false, only the clusters specified in `cluster_uids` will be included.
	IncludeAllClusters *bool `json:"includeAllClusters,omitempty" tf:"include_all_clusters,omitempty"`

	// Whether to include the cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up.
	IncludeClusterResources *bool `json:"includeClusterResources,omitempty" tf:"include_cluster_resources,omitempty"`

	// Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
	IncludeDisks *bool `json:"includeDisks,omitempty" tf:"include_disks,omitempty"`

	// The list of Kubernetes namespaces to include in the backup. If not specified, all namespaces will be included.
	Namespaces []*string `json:"namespaces,omitempty" tf:"namespaces,omitempty"`

	// Prefix for the backup name. The backup name will be of the format <prefix>-<cluster-name>-<timestamp>.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to `0 1 * * *`.
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`
}

type EdgeVsphereBackupPolicyObservation struct {

	// The ID of the backup location to use for the backup.
	BackupLocationID *string `json:"backupLocationId,omitempty" tf:"backup_location_id,omitempty"`

	// The list of cluster UIDs to include in the backup. If `include_all_clusters` is set to `true`, then all clusters will be included.
	ClusterUids []*string `json:"clusterUids,omitempty" tf:"cluster_uids,omitempty"`

	// The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
	ExpiryInHour *float64 `json:"expiryInHour,omitempty" tf:"expiry_in_hour,omitempty"`

	// Whether to include all clusters in the backup. If set to false, only the clusters specified in `cluster_uids` will be included.
	IncludeAllClusters *bool `json:"includeAllClusters,omitempty" tf:"include_all_clusters,omitempty"`

	// Whether to include the cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up.
	IncludeClusterResources *bool `json:"includeClusterResources,omitempty" tf:"include_cluster_resources,omitempty"`

	// Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
	IncludeDisks *bool `json:"includeDisks,omitempty" tf:"include_disks,omitempty"`

	// The list of Kubernetes namespaces to include in the backup. If not specified, all namespaces will be included.
	Namespaces []*string `json:"namespaces,omitempty" tf:"namespaces,omitempty"`

	// Prefix for the backup name. The backup name will be of the format <prefix>-<cluster-name>-<timestamp>.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to `0 1 * * *`.
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`
}

type EdgeVsphereBackupPolicyParameters struct {

	// The ID of the backup location to use for the backup.
	// +kubebuilder:validation:Optional
	BackupLocationID *string `json:"backupLocationId" tf:"backup_location_id,omitempty"`

	// The list of cluster UIDs to include in the backup. If `include_all_clusters` is set to `true`, then all clusters will be included.
	// +kubebuilder:validation:Optional
	ClusterUids []*string `json:"clusterUids,omitempty" tf:"cluster_uids,omitempty"`

	// The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
	// +kubebuilder:validation:Optional
	ExpiryInHour *float64 `json:"expiryInHour" tf:"expiry_in_hour,omitempty"`

	// Whether to include all clusters in the backup. If set to false, only the clusters specified in `cluster_uids` will be included.
	// +kubebuilder:validation:Optional
	IncludeAllClusters *bool `json:"includeAllClusters,omitempty" tf:"include_all_clusters,omitempty"`

	// Whether to include the cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up.
	// +kubebuilder:validation:Optional
	IncludeClusterResources *bool `json:"includeClusterResources,omitempty" tf:"include_cluster_resources,omitempty"`

	// Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
	// +kubebuilder:validation:Optional
	IncludeDisks *bool `json:"includeDisks,omitempty" tf:"include_disks,omitempty"`

	// The list of Kubernetes namespaces to include in the backup. If not specified, all namespaces will be included.
	// +kubebuilder:validation:Optional
	Namespaces []*string `json:"namespaces,omitempty" tf:"namespaces,omitempty"`

	// Prefix for the backup name. The backup name will be of the format <prefix>-<cluster-name>-<timestamp>.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix" tf:"prefix,omitempty"`

	// The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to `0 1 * * *`.
	// +kubebuilder:validation:Optional
	Schedule *string `json:"schedule" tf:"schedule,omitempty"`
}

type EdgeVsphereCloudConfigInitParameters struct {
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	ImageTemplateFolder *string `json:"imageTemplateFolder,omitempty" tf:"image_template_folder,omitempty"`

	NetworkSearchDomain *string `json:"networkSearchDomain,omitempty" tf:"network_search_domain,omitempty"`

	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// Public SSH Key (Secure Shell) to establish, administer, and communicate with remote clusters, `ssh_key & ssh_keys` are mutually exclusive.
	SSHKey *string `json:"sshKey,omitempty" tf:"ssh_key,omitempty"`

	// List of public SSH (Secure Shell) keys to establish, administer, and communicate with remote clusters, `ssh_key & ssh_keys` are mutually exclusive.
	SSHKeys []*string `json:"sshKeys,omitempty" tf:"ssh_keys,omitempty"`

	StaticIP *bool `json:"staticIp,omitempty" tf:"static_ip,omitempty"`

	Vip *string `json:"vip,omitempty" tf:"vip,omitempty"`
}

type EdgeVsphereCloudConfigObservation struct {
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	ImageTemplateFolder *string `json:"imageTemplateFolder,omitempty" tf:"image_template_folder,omitempty"`

	NetworkSearchDomain *string `json:"networkSearchDomain,omitempty" tf:"network_search_domain,omitempty"`

	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// Public SSH Key (Secure Shell) to establish, administer, and communicate with remote clusters, `ssh_key & ssh_keys` are mutually exclusive.
	SSHKey *string `json:"sshKey,omitempty" tf:"ssh_key,omitempty"`

	// List of public SSH (Secure Shell) keys to establish, administer, and communicate with remote clusters, `ssh_key & ssh_keys` are mutually exclusive.
	SSHKeys []*string `json:"sshKeys,omitempty" tf:"ssh_keys,omitempty"`

	StaticIP *bool `json:"staticIp,omitempty" tf:"static_ip,omitempty"`

	Vip *string `json:"vip,omitempty" tf:"vip,omitempty"`
}

type EdgeVsphereCloudConfigParameters struct {

	// +kubebuilder:validation:Optional
	Datacenter *string `json:"datacenter" tf:"datacenter,omitempty"`

	// +kubebuilder:validation:Optional
	Folder *string `json:"folder" tf:"folder,omitempty"`

	// +kubebuilder:validation:Optional
	ImageTemplateFolder *string `json:"imageTemplateFolder,omitempty" tf:"image_template_folder,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkSearchDomain *string `json:"networkSearchDomain,omitempty" tf:"network_search_domain,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// Public SSH Key (Secure Shell) to establish, administer, and communicate with remote clusters, `ssh_key & ssh_keys` are mutually exclusive.
	// +kubebuilder:validation:Optional
	SSHKey *string `json:"sshKey,omitempty" tf:"ssh_key,omitempty"`

	// List of public SSH (Secure Shell) keys to establish, administer, and communicate with remote clusters, `ssh_key & ssh_keys` are mutually exclusive.
	// +kubebuilder:validation:Optional
	SSHKeys []*string `json:"sshKeys,omitempty" tf:"ssh_keys,omitempty"`

	// +kubebuilder:validation:Optional
	StaticIP *bool `json:"staticIp,omitempty" tf:"static_ip,omitempty"`

	// +kubebuilder:validation:Optional
	Vip *string `json:"vip" tf:"vip,omitempty"`
}

type EdgeVsphereClusterProfileInitParameters struct {

	// The ID of the cluster profile.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// For packs of type `spectro`, `helm`, and `manifest`, at least one pack must be specified.
	Pack []EdgeVsphereClusterProfilePackInitParameters `json:"pack,omitempty" tf:"pack,omitempty"`
}

type EdgeVsphereClusterProfileObservation struct {

	// The ID of the cluster profile.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// For packs of type `spectro`, `helm`, and `manifest`, at least one pack must be specified.
	Pack []EdgeVsphereClusterProfilePackObservation `json:"pack,omitempty" tf:"pack,omitempty"`
}

type EdgeVsphereClusterProfilePackInitParameters struct {
	Manifest []EdgeVsphereClusterProfilePackManifestInitParameters `json:"manifest,omitempty" tf:"manifest,omitempty"`

	// The name of the pack. The name must be unique within the cluster profile.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name.
	RegistryUID *string `json:"registryUid,omitempty" tf:"registry_uid,omitempty"`

	// The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is `spectro` or `helm`.
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// The type of the pack. Allowed values are `spectro`, `manifest` or `helm`. The default value is `spectro`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The unique identifier of the pack. The value can be looked up using the [`spectrocloud_pack`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs/data-sources/pack) data source. This value is required if the pack type is `spectro`.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
	Values *string `json:"values,omitempty" tf:"values,omitempty"`
}

type EdgeVsphereClusterProfilePackManifestInitParameters struct {

	// The content of the manifest. The content is the YAML content of the manifest.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The name of the manifest. The name must be unique within the pack.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type EdgeVsphereClusterProfilePackManifestObservation struct {

	// The content of the manifest. The content is the YAML content of the manifest.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The name of the manifest. The name must be unique within the pack.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type EdgeVsphereClusterProfilePackManifestParameters struct {

	// The content of the manifest. The content is the YAML content of the manifest.
	// +kubebuilder:validation:Optional
	Content *string `json:"content" tf:"content,omitempty"`

	// The name of the manifest. The name must be unique within the pack.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type EdgeVsphereClusterProfilePackObservation struct {
	Manifest []EdgeVsphereClusterProfilePackManifestObservation `json:"manifest,omitempty" tf:"manifest,omitempty"`

	// The name of the pack. The name must be unique within the cluster profile.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name.
	RegistryUID *string `json:"registryUid,omitempty" tf:"registry_uid,omitempty"`

	// The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is `spectro` or `helm`.
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// The type of the pack. Allowed values are `spectro`, `manifest` or `helm`. The default value is `spectro`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The unique identifier of the pack. The value can be looked up using the [`spectrocloud_pack`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs/data-sources/pack) data source. This value is required if the pack type is `spectro`.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
	Values *string `json:"values,omitempty" tf:"values,omitempty"`
}

type EdgeVsphereClusterProfilePackParameters struct {

	// +kubebuilder:validation:Optional
	Manifest []EdgeVsphereClusterProfilePackManifestParameters `json:"manifest,omitempty" tf:"manifest,omitempty"`

	// The name of the pack. The name must be unique within the cluster profile.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name.
	// +kubebuilder:validation:Optional
	RegistryUID *string `json:"registryUid,omitempty" tf:"registry_uid,omitempty"`

	// The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is `spectro` or `helm`.
	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// The type of the pack. Allowed values are `spectro`, `manifest` or `helm`. The default value is `spectro`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The unique identifier of the pack. The value can be looked up using the [`spectrocloud_pack`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs/data-sources/pack) data source. This value is required if the pack type is `spectro`.
	// +kubebuilder:validation:Optional
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
	// +kubebuilder:validation:Optional
	Values *string `json:"values,omitempty" tf:"values,omitempty"`
}

type EdgeVsphereClusterProfileParameters struct {

	// The ID of the cluster profile.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// For packs of type `spectro`, `helm`, and `manifest`, at least one pack must be specified.
	// +kubebuilder:validation:Optional
	Pack []EdgeVsphereClusterProfilePackParameters `json:"pack,omitempty" tf:"pack,omitempty"`
}

type EdgeVsphereClusterRbacBindingInitParameters struct {

	// The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	Role map[string]*string `json:"role,omitempty" tf:"role,omitempty"`

	Subjects []EdgeVsphereClusterRbacBindingSubjectsInitParameters `json:"subjects,omitempty" tf:"subjects,omitempty"`

	// The type of the RBAC binding. Can be one of the following values: `RoleBinding`, or `ClusterRoleBinding`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EdgeVsphereClusterRbacBindingObservation struct {

	// The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	Role map[string]*string `json:"role,omitempty" tf:"role,omitempty"`

	Subjects []EdgeVsphereClusterRbacBindingSubjectsObservation `json:"subjects,omitempty" tf:"subjects,omitempty"`

	// The type of the RBAC binding. Can be one of the following values: `RoleBinding`, or `ClusterRoleBinding`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EdgeVsphereClusterRbacBindingParameters struct {

	// The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	// +kubebuilder:validation:Optional
	Role map[string]*string `json:"role,omitempty" tf:"role,omitempty"`

	// +kubebuilder:validation:Optional
	Subjects []EdgeVsphereClusterRbacBindingSubjectsParameters `json:"subjects,omitempty" tf:"subjects,omitempty"`

	// The type of the RBAC binding. Can be one of the following values: `RoleBinding`, or `ClusterRoleBinding`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type EdgeVsphereClusterRbacBindingSubjectsInitParameters struct {

	// The name of the subject. Required if 'type' is set to 'User' or 'Group'.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The Kubernetes namespace of the subject. Required if 'type' is set to 'ServiceAccount'.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The type of the subject. Can be one of the following values: `User`, `Group`, or `ServiceAccount`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EdgeVsphereClusterRbacBindingSubjectsObservation struct {

	// The name of the subject. Required if 'type' is set to 'User' or 'Group'.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The Kubernetes namespace of the subject. Required if 'type' is set to 'ServiceAccount'.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The type of the subject. Can be one of the following values: `User`, `Group`, or `ServiceAccount`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EdgeVsphereClusterRbacBindingSubjectsParameters struct {

	// The name of the subject. Required if 'type' is set to 'User' or 'Group'.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The Kubernetes namespace of the subject. Required if 'type' is set to 'ServiceAccount'.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The type of the subject. Can be one of the following values: `User`, `Group`, or `ServiceAccount`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type EdgeVsphereHostConfigInitParameters struct {

	// The external traffic policy for the cluster.
	ExternalTrafficPolicy *string `json:"externalTrafficPolicy,omitempty" tf:"external_traffic_policy,omitempty"`

	// The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
	HostEndpointType *string `json:"hostEndpointType,omitempty" tf:"host_endpoint_type,omitempty"`

	// The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
	IngressHost *string `json:"ingressHost,omitempty" tf:"ingress_host,omitempty"`

	// The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
	LoadBalancerSourceRanges *string `json:"loadBalancerSourceRanges,omitempty" tf:"load_balancer_source_ranges,omitempty"`
}

type EdgeVsphereHostConfigObservation struct {

	// The external traffic policy for the cluster.
	ExternalTrafficPolicy *string `json:"externalTrafficPolicy,omitempty" tf:"external_traffic_policy,omitempty"`

	// The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
	HostEndpointType *string `json:"hostEndpointType,omitempty" tf:"host_endpoint_type,omitempty"`

	// The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
	IngressHost *string `json:"ingressHost,omitempty" tf:"ingress_host,omitempty"`

	// The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
	LoadBalancerSourceRanges *string `json:"loadBalancerSourceRanges,omitempty" tf:"load_balancer_source_ranges,omitempty"`
}

type EdgeVsphereHostConfigParameters struct {

	// The external traffic policy for the cluster.
	// +kubebuilder:validation:Optional
	ExternalTrafficPolicy *string `json:"externalTrafficPolicy,omitempty" tf:"external_traffic_policy,omitempty"`

	// The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
	// +kubebuilder:validation:Optional
	HostEndpointType *string `json:"hostEndpointType,omitempty" tf:"host_endpoint_type,omitempty"`

	// The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
	// +kubebuilder:validation:Optional
	IngressHost *string `json:"ingressHost,omitempty" tf:"ingress_host,omitempty"`

	// The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
	// +kubebuilder:validation:Optional
	LoadBalancerSourceRanges *string `json:"loadBalancerSourceRanges,omitempty" tf:"load_balancer_source_ranges,omitempty"`
}

type EdgeVsphereInitParameters struct {

	// The backup policy for the cluster. If not specified, no backups will be taken.
	BackupPolicy []EdgeVsphereBackupPolicyInitParameters `json:"backupPolicy,omitempty" tf:"backup_policy,omitempty"`

	CloudConfig []EdgeVsphereCloudConfigInitParameters `json:"cloudConfig,omitempty" tf:"cloud_config,omitempty"`

	// `cluster_meta_attribute` can be used to set additional cluster metadata information, eg `{'nic_name': 'test', 'env': 'stage'}`
	ClusterMetaAttribute *string `json:"clusterMetaAttribute,omitempty" tf:"cluster_meta_attribute,omitempty"`

	ClusterProfile []EdgeVsphereClusterProfileInitParameters `json:"clusterProfile,omitempty" tf:"cluster_profile,omitempty"`

	// The RBAC binding for the cluster.
	ClusterRbacBinding []EdgeVsphereClusterRbacBindingInitParameters `json:"clusterRbacBinding,omitempty" tf:"cluster_rbac_binding,omitempty"`

	// The context of the Edge cluster. Allowed values are `project` or `tenant`. Default is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// The description of the cluster. Default value is empty string.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	EdgeHostUID *string `json:"edgeHostUid,omitempty" tf:"edge_host_uid,omitempty"`

	// If set to `true`, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
	ForceDeleteDelay *float64 `json:"forceDeleteDelay,omitempty" tf:"force_delete_delay,omitempty"`

	// The host configuration for the cluster.
	HostConfig []EdgeVsphereHostConfigInitParameters `json:"hostConfig,omitempty" tf:"host_config,omitempty"`

	LocationConfig []EdgeVsphereLocationConfigInitParameters `json:"locationConfig,omitempty" tf:"location_config,omitempty"`

	MachinePool []EdgeVsphereMachinePoolInitParameters `json:"machinePool,omitempty" tf:"machine_pool,omitempty"`

	// The namespaces for the cluster.
	Namespaces []EdgeVsphereNamespacesInitParameters `json:"namespaces,omitempty" tf:"namespaces,omitempty"`

	// Date and time after which to patch cluster `RFC3339: 2006-01-02T15:04:05Z07:00`
	OsPatchAfter *string `json:"osPatchAfter,omitempty" tf:"os_patch_after,omitempty"`

	// Whether to apply OS patch on boot. Default is `false`.
	OsPatchOnBoot *bool `json:"osPatchOnBoot,omitempty" tf:"os_patch_on_boot,omitempty"`

	// Cron schedule for OS patching. This must be in the form of `0 0 * * *`.
	OsPatchSchedule *string `json:"osPatchSchedule,omitempty" tf:"os_patch_schedule,omitempty"`

	// The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is `unlock`, meaning upgrades occur automatically. Setting it to `lock` pauses automatic agent upgrades for the cluster.
	PauseAgentUpgrades *string `json:"pauseAgentUpgrades,omitempty" tf:"pause_agent_upgrades,omitempty"`

	// To authorize the cluster repave, set the value to `Approved` for approval and `""` to decline. Default value is `""`.
	ReviewRepaveState *string `json:"reviewRepaveState,omitempty" tf:"review_repave_state,omitempty"`

	// The scan policy for the cluster.
	ScanPolicy []EdgeVsphereScanPolicyInitParameters `json:"scanPolicy,omitempty" tf:"scan_policy,omitempty"`

	// If `true`, the cluster will be created asynchronously. Default value is `false`.
	SkipCompletion *bool `json:"skipCompletion,omitempty" tf:"skip_completion,omitempty"`

	// A list of tags to be applied to the cluster. Tags must be in the form of `key:value`.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type EdgeVsphereLocationConfigInitParameters struct {

	// The country code of the country the cluster is located in.
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// The name of the country.
	CountryName *string `json:"countryName,omitempty" tf:"country_name,omitempty"`

	// The latitude coordinates value.
	Latitude *float64 `json:"latitude,omitempty" tf:"latitude,omitempty"`

	// The longitude coordinates value.
	Longitude *float64 `json:"longitude,omitempty" tf:"longitude,omitempty"`

	// The region code of where the cluster is located in.
	RegionCode *string `json:"regionCode,omitempty" tf:"region_code,omitempty"`

	// The name of the region.
	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`
}

type EdgeVsphereLocationConfigObservation struct {

	// The country code of the country the cluster is located in.
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// The name of the country.
	CountryName *string `json:"countryName,omitempty" tf:"country_name,omitempty"`

	// The latitude coordinates value.
	Latitude *float64 `json:"latitude,omitempty" tf:"latitude,omitempty"`

	// The longitude coordinates value.
	Longitude *float64 `json:"longitude,omitempty" tf:"longitude,omitempty"`

	// The region code of where the cluster is located in.
	RegionCode *string `json:"regionCode,omitempty" tf:"region_code,omitempty"`

	// The name of the region.
	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`
}

type EdgeVsphereLocationConfigParameters struct {

	// The country code of the country the cluster is located in.
	// +kubebuilder:validation:Optional
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// The name of the country.
	// +kubebuilder:validation:Optional
	CountryName *string `json:"countryName,omitempty" tf:"country_name,omitempty"`

	// The latitude coordinates value.
	// +kubebuilder:validation:Optional
	Latitude *float64 `json:"latitude" tf:"latitude,omitempty"`

	// The longitude coordinates value.
	// +kubebuilder:validation:Optional
	Longitude *float64 `json:"longitude" tf:"longitude,omitempty"`

	// The region code of where the cluster is located in.
	// +kubebuilder:validation:Optional
	RegionCode *string `json:"regionCode,omitempty" tf:"region_code,omitempty"`

	// The name of the region.
	// +kubebuilder:validation:Optional
	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`
}

type EdgeVsphereMachinePoolInitParameters struct {
	AdditionalLabels map[string]*string `json:"additionalLabels,omitempty" tf:"additional_labels,omitempty"`

	// Whether this machine pool is a control plane. Defaults to `false`.
	ControlPlane *bool `json:"controlPlane,omitempty" tf:"control_plane,omitempty"`

	// Whether this machine pool is a control plane and a worker. Defaults to `false`.
	ControlPlaneAsWorker *bool `json:"controlPlaneAsWorker,omitempty" tf:"control_plane_as_worker,omitempty"`

	// Number of nodes in the machine pool.
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	InstanceType []InstanceTypeInitParameters `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Node []EdgeVsphereMachinePoolNodeInitParameters `json:"node,omitempty" tf:"node,omitempty"`

	// Minimum number of seconds node should be Ready, before the next node is selected for repave. Default value is `0`, Applicable only for worker pools.
	NodeRepaveInterval *float64 `json:"nodeRepaveInterval,omitempty" tf:"node_repave_interval,omitempty"`

	Placement []PlacementInitParameters `json:"placement,omitempty" tf:"placement,omitempty"`

	Taints []EdgeVsphereMachinePoolTaintsInitParameters `json:"taints,omitempty" tf:"taints,omitempty"`

	// Update strategy for the machine pool. Valid values are `RollingUpdateScaleOut` and `RollingUpdateScaleIn`.
	UpdateStrategy *string `json:"updateStrategy,omitempty" tf:"update_strategy,omitempty"`
}

type EdgeVsphereMachinePoolNodeInitParameters struct {

	// The action to perform on the node. Valid values are: `cordon`, `uncordon`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The node_id of the node, For example `i-07f899a33dee624f7`
	NodeID *string `json:"nodeId,omitempty" tf:"node_id,omitempty"`
}

type EdgeVsphereMachinePoolNodeObservation struct {

	// The action to perform on the node. Valid values are: `cordon`, `uncordon`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The node_id of the node, For example `i-07f899a33dee624f7`
	NodeID *string `json:"nodeId,omitempty" tf:"node_id,omitempty"`
}

type EdgeVsphereMachinePoolNodeParameters struct {

	// The action to perform on the node. Valid values are: `cordon`, `uncordon`.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// The node_id of the node, For example `i-07f899a33dee624f7`
	// +kubebuilder:validation:Optional
	NodeID *string `json:"nodeId" tf:"node_id,omitempty"`
}

type EdgeVsphereMachinePoolObservation struct {
	AdditionalLabels map[string]*string `json:"additionalLabels,omitempty" tf:"additional_labels,omitempty"`

	// Whether this machine pool is a control plane. Defaults to `false`.
	ControlPlane *bool `json:"controlPlane,omitempty" tf:"control_plane,omitempty"`

	// Whether this machine pool is a control plane and a worker. Defaults to `false`.
	ControlPlaneAsWorker *bool `json:"controlPlaneAsWorker,omitempty" tf:"control_plane_as_worker,omitempty"`

	// Number of nodes in the machine pool.
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	InstanceType []InstanceTypeObservation `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Node []EdgeVsphereMachinePoolNodeObservation `json:"node,omitempty" tf:"node,omitempty"`

	// Minimum number of seconds node should be Ready, before the next node is selected for repave. Default value is `0`, Applicable only for worker pools.
	NodeRepaveInterval *float64 `json:"nodeRepaveInterval,omitempty" tf:"node_repave_interval,omitempty"`

	Placement []PlacementObservation `json:"placement,omitempty" tf:"placement,omitempty"`

	Taints []EdgeVsphereMachinePoolTaintsObservation `json:"taints,omitempty" tf:"taints,omitempty"`

	// Update strategy for the machine pool. Valid values are `RollingUpdateScaleOut` and `RollingUpdateScaleIn`.
	UpdateStrategy *string `json:"updateStrategy,omitempty" tf:"update_strategy,omitempty"`
}

type EdgeVsphereMachinePoolParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalLabels map[string]*string `json:"additionalLabels,omitempty" tf:"additional_labels,omitempty"`

	// Whether this machine pool is a control plane. Defaults to `false`.
	// +kubebuilder:validation:Optional
	ControlPlane *bool `json:"controlPlane,omitempty" tf:"control_plane,omitempty"`

	// Whether this machine pool is a control plane and a worker. Defaults to `false`.
	// +kubebuilder:validation:Optional
	ControlPlaneAsWorker *bool `json:"controlPlaneAsWorker,omitempty" tf:"control_plane_as_worker,omitempty"`

	// Number of nodes in the machine pool.
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count" tf:"count,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceType []InstanceTypeParameters `json:"instanceType" tf:"instance_type,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Node []EdgeVsphereMachinePoolNodeParameters `json:"node,omitempty" tf:"node,omitempty"`

	// Minimum number of seconds node should be Ready, before the next node is selected for repave. Default value is `0`, Applicable only for worker pools.
	// +kubebuilder:validation:Optional
	NodeRepaveInterval *float64 `json:"nodeRepaveInterval,omitempty" tf:"node_repave_interval,omitempty"`

	// +kubebuilder:validation:Optional
	Placement []PlacementParameters `json:"placement" tf:"placement,omitempty"`

	// +kubebuilder:validation:Optional
	Taints []EdgeVsphereMachinePoolTaintsParameters `json:"taints,omitempty" tf:"taints,omitempty"`

	// Update strategy for the machine pool. Valid values are `RollingUpdateScaleOut` and `RollingUpdateScaleIn`.
	// +kubebuilder:validation:Optional
	UpdateStrategy *string `json:"updateStrategy,omitempty" tf:"update_strategy,omitempty"`
}

type EdgeVsphereMachinePoolTaintsInitParameters struct {

	// The effect of the taint. Allowed values are: `NoSchedule`, `PreferNoSchedule` or `NoExecute`.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// The key of the taint.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The value of the taint.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EdgeVsphereMachinePoolTaintsObservation struct {

	// The effect of the taint. Allowed values are: `NoSchedule`, `PreferNoSchedule` or `NoExecute`.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// The key of the taint.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The value of the taint.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EdgeVsphereMachinePoolTaintsParameters struct {

	// The effect of the taint. Allowed values are: `NoSchedule`, `PreferNoSchedule` or `NoExecute`.
	// +kubebuilder:validation:Optional
	Effect *string `json:"effect" tf:"effect,omitempty"`

	// The key of the taint.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// The value of the taint.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type EdgeVsphereNamespacesInitParameters struct {

	// List of images to disallow for the namespace. For example, `['nginx:latest', 'redis:latest']`
	ImagesBlacklist []*string `json:"imagesBlacklist,omitempty" tf:"images_blacklist,omitempty"`

	// Name of the namespace. This is the name of the Kubernetes namespace in the cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, `{cpu_cores: '2', memory_MiB: '2048'}`
	ResourceAllocation map[string]*string `json:"resourceAllocation,omitempty" tf:"resource_allocation,omitempty"`
}

type EdgeVsphereNamespacesObservation struct {

	// List of images to disallow for the namespace. For example, `['nginx:latest', 'redis:latest']`
	ImagesBlacklist []*string `json:"imagesBlacklist,omitempty" tf:"images_blacklist,omitempty"`

	// Name of the namespace. This is the name of the Kubernetes namespace in the cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, `{cpu_cores: '2', memory_MiB: '2048'}`
	ResourceAllocation map[string]*string `json:"resourceAllocation,omitempty" tf:"resource_allocation,omitempty"`
}

type EdgeVsphereNamespacesParameters struct {

	// List of images to disallow for the namespace. For example, `['nginx:latest', 'redis:latest']`
	// +kubebuilder:validation:Optional
	ImagesBlacklist []*string `json:"imagesBlacklist,omitempty" tf:"images_blacklist,omitempty"`

	// Name of the namespace. This is the name of the Kubernetes namespace in the cluster.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, `{cpu_cores: '2', memory_MiB: '2048'}`
	// +kubebuilder:validation:Optional
	ResourceAllocation map[string]*string `json:"resourceAllocation" tf:"resource_allocation,omitempty"`
}

type EdgeVsphereObservation struct {

	// Admin Kube-config for the cluster. This can be used to connect to the cluster using `kubectl`, With admin privilege.
	AdminKubeConfig *string `json:"adminKubeConfig,omitempty" tf:"admin_kube_config,omitempty"`

	// The backup policy for the cluster. If not specified, no backups will be taken.
	BackupPolicy []EdgeVsphereBackupPolicyObservation `json:"backupPolicy,omitempty" tf:"backup_policy,omitempty"`

	CloudConfig []EdgeVsphereCloudConfigObservation `json:"cloudConfig,omitempty" tf:"cloud_config,omitempty"`

	// ID of the cloud config used for the cluster. This cloud config must be of type `azure`.
	CloudConfigID *string `json:"cloudConfigId,omitempty" tf:"cloud_config_id,omitempty"`

	// `cluster_meta_attribute` can be used to set additional cluster metadata information, eg `{'nic_name': 'test', 'env': 'stage'}`
	ClusterMetaAttribute *string `json:"clusterMetaAttribute,omitempty" tf:"cluster_meta_attribute,omitempty"`

	ClusterProfile []EdgeVsphereClusterProfileObservation `json:"clusterProfile,omitempty" tf:"cluster_profile,omitempty"`

	// The RBAC binding for the cluster.
	ClusterRbacBinding []EdgeVsphereClusterRbacBindingObservation `json:"clusterRbacBinding,omitempty" tf:"cluster_rbac_binding,omitempty"`

	// The context of the Edge cluster. Allowed values are `project` or `tenant`. Default is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// The description of the cluster. Default value is empty string.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	EdgeHostUID *string `json:"edgeHostUid,omitempty" tf:"edge_host_uid,omitempty"`

	// If set to `true`, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
	ForceDeleteDelay *float64 `json:"forceDeleteDelay,omitempty" tf:"force_delete_delay,omitempty"`

	// The host configuration for the cluster.
	HostConfig []EdgeVsphereHostConfigObservation `json:"hostConfig,omitempty" tf:"host_config,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Kubeconfig for the cluster. This can be used to connect to the cluster using `kubectl`.
	Kubeconfig *string `json:"kubeconfig,omitempty" tf:"kubeconfig,omitempty"`

	LocationConfig []EdgeVsphereLocationConfigObservation `json:"locationConfig,omitempty" tf:"location_config,omitempty"`

	MachinePool []EdgeVsphereMachinePoolObservation `json:"machinePool,omitempty" tf:"machine_pool,omitempty"`

	// The namespaces for the cluster.
	Namespaces []EdgeVsphereNamespacesObservation `json:"namespaces,omitempty" tf:"namespaces,omitempty"`

	// Date and time after which to patch cluster `RFC3339: 2006-01-02T15:04:05Z07:00`
	OsPatchAfter *string `json:"osPatchAfter,omitempty" tf:"os_patch_after,omitempty"`

	// Whether to apply OS patch on boot. Default is `false`.
	OsPatchOnBoot *bool `json:"osPatchOnBoot,omitempty" tf:"os_patch_on_boot,omitempty"`

	// Cron schedule for OS patching. This must be in the form of `0 0 * * *`.
	OsPatchSchedule *string `json:"osPatchSchedule,omitempty" tf:"os_patch_schedule,omitempty"`

	// The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is `unlock`, meaning upgrades occur automatically. Setting it to `lock` pauses automatic agent upgrades for the cluster.
	PauseAgentUpgrades *string `json:"pauseAgentUpgrades,omitempty" tf:"pause_agent_upgrades,omitempty"`

	// To authorize the cluster repave, set the value to `Approved` for approval and `""` to decline. Default value is `""`.
	ReviewRepaveState *string `json:"reviewRepaveState,omitempty" tf:"review_repave_state,omitempty"`

	// The scan policy for the cluster.
	ScanPolicy []EdgeVsphereScanPolicyObservation `json:"scanPolicy,omitempty" tf:"scan_policy,omitempty"`

	// If `true`, the cluster will be created asynchronously. Default value is `false`.
	SkipCompletion *bool `json:"skipCompletion,omitempty" tf:"skip_completion,omitempty"`

	// A list of tags to be applied to the cluster. Tags must be in the form of `key:value`.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type EdgeVsphereParameters struct {

	// The backup policy for the cluster. If not specified, no backups will be taken.
	// +kubebuilder:validation:Optional
	BackupPolicy []EdgeVsphereBackupPolicyParameters `json:"backupPolicy,omitempty" tf:"backup_policy,omitempty"`

	// +kubebuilder:validation:Optional
	CloudConfig []EdgeVsphereCloudConfigParameters `json:"cloudConfig,omitempty" tf:"cloud_config,omitempty"`

	// `cluster_meta_attribute` can be used to set additional cluster metadata information, eg `{'nic_name': 'test', 'env': 'stage'}`
	// +kubebuilder:validation:Optional
	ClusterMetaAttribute *string `json:"clusterMetaAttribute,omitempty" tf:"cluster_meta_attribute,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterProfile []EdgeVsphereClusterProfileParameters `json:"clusterProfile,omitempty" tf:"cluster_profile,omitempty"`

	// The RBAC binding for the cluster.
	// +kubebuilder:validation:Optional
	ClusterRbacBinding []EdgeVsphereClusterRbacBindingParameters `json:"clusterRbacBinding,omitempty" tf:"cluster_rbac_binding,omitempty"`

	// The context of the Edge cluster. Allowed values are `project` or `tenant`. Default is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	// +kubebuilder:validation:Optional
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// The description of the cluster. Default value is empty string.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	EdgeHostUID *string `json:"edgeHostUid,omitempty" tf:"edge_host_uid,omitempty"`

	// If set to `true`, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
	// +kubebuilder:validation:Optional
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
	// +kubebuilder:validation:Optional
	ForceDeleteDelay *float64 `json:"forceDeleteDelay,omitempty" tf:"force_delete_delay,omitempty"`

	// The host configuration for the cluster.
	// +kubebuilder:validation:Optional
	HostConfig []EdgeVsphereHostConfigParameters `json:"hostConfig,omitempty" tf:"host_config,omitempty"`

	// +kubebuilder:validation:Optional
	LocationConfig []EdgeVsphereLocationConfigParameters `json:"locationConfig,omitempty" tf:"location_config,omitempty"`

	// +kubebuilder:validation:Optional
	MachinePool []EdgeVsphereMachinePoolParameters `json:"machinePool,omitempty" tf:"machine_pool,omitempty"`

	// The namespaces for the cluster.
	// +kubebuilder:validation:Optional
	Namespaces []EdgeVsphereNamespacesParameters `json:"namespaces,omitempty" tf:"namespaces,omitempty"`

	// Date and time after which to patch cluster `RFC3339: 2006-01-02T15:04:05Z07:00`
	// +kubebuilder:validation:Optional
	OsPatchAfter *string `json:"osPatchAfter,omitempty" tf:"os_patch_after,omitempty"`

	// Whether to apply OS patch on boot. Default is `false`.
	// +kubebuilder:validation:Optional
	OsPatchOnBoot *bool `json:"osPatchOnBoot,omitempty" tf:"os_patch_on_boot,omitempty"`

	// Cron schedule for OS patching. This must be in the form of `0 0 * * *`.
	// +kubebuilder:validation:Optional
	OsPatchSchedule *string `json:"osPatchSchedule,omitempty" tf:"os_patch_schedule,omitempty"`

	// The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is `unlock`, meaning upgrades occur automatically. Setting it to `lock` pauses automatic agent upgrades for the cluster.
	// +kubebuilder:validation:Optional
	PauseAgentUpgrades *string `json:"pauseAgentUpgrades,omitempty" tf:"pause_agent_upgrades,omitempty"`

	// To authorize the cluster repave, set the value to `Approved` for approval and `""` to decline. Default value is `""`.
	// +kubebuilder:validation:Optional
	ReviewRepaveState *string `json:"reviewRepaveState,omitempty" tf:"review_repave_state,omitempty"`

	// The scan policy for the cluster.
	// +kubebuilder:validation:Optional
	ScanPolicy []EdgeVsphereScanPolicyParameters `json:"scanPolicy,omitempty" tf:"scan_policy,omitempty"`

	// If `true`, the cluster will be created asynchronously. Default value is `false`.
	// +kubebuilder:validation:Optional
	SkipCompletion *bool `json:"skipCompletion,omitempty" tf:"skip_completion,omitempty"`

	// A list of tags to be applied to the cluster. Tags must be in the form of `key:value`.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type EdgeVsphereScanPolicyInitParameters struct {

	// The schedule for configuration scan.
	ConfigurationScanSchedule *string `json:"configurationScanSchedule,omitempty" tf:"configuration_scan_schedule,omitempty"`

	// The schedule for conformance scan.
	ConformanceScanSchedule *string `json:"conformanceScanSchedule,omitempty" tf:"conformance_scan_schedule,omitempty"`

	// The schedule for penetration scan.
	PenetrationScanSchedule *string `json:"penetrationScanSchedule,omitempty" tf:"penetration_scan_schedule,omitempty"`
}

type EdgeVsphereScanPolicyObservation struct {

	// The schedule for configuration scan.
	ConfigurationScanSchedule *string `json:"configurationScanSchedule,omitempty" tf:"configuration_scan_schedule,omitempty"`

	// The schedule for conformance scan.
	ConformanceScanSchedule *string `json:"conformanceScanSchedule,omitempty" tf:"conformance_scan_schedule,omitempty"`

	// The schedule for penetration scan.
	PenetrationScanSchedule *string `json:"penetrationScanSchedule,omitempty" tf:"penetration_scan_schedule,omitempty"`
}

type EdgeVsphereScanPolicyParameters struct {

	// The schedule for configuration scan.
	// +kubebuilder:validation:Optional
	ConfigurationScanSchedule *string `json:"configurationScanSchedule" tf:"configuration_scan_schedule,omitempty"`

	// The schedule for conformance scan.
	// +kubebuilder:validation:Optional
	ConformanceScanSchedule *string `json:"conformanceScanSchedule" tf:"conformance_scan_schedule,omitempty"`

	// The schedule for penetration scan.
	// +kubebuilder:validation:Optional
	PenetrationScanSchedule *string `json:"penetrationScanSchedule" tf:"penetration_scan_schedule,omitempty"`
}

type InstanceTypeInitParameters struct {
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	DiskSizeGb *float64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb,omitempty"`

	MemoryMb *float64 `json:"memoryMb,omitempty" tf:"memory_mb,omitempty"`
}

type InstanceTypeObservation struct {
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	DiskSizeGb *float64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb,omitempty"`

	MemoryMb *float64 `json:"memoryMb,omitempty" tf:"memory_mb,omitempty"`
}

type InstanceTypeParameters struct {

	// +kubebuilder:validation:Optional
	CPU *float64 `json:"cpu" tf:"cpu,omitempty"`

	// +kubebuilder:validation:Optional
	DiskSizeGb *float64 `json:"diskSizeGb" tf:"disk_size_gb,omitempty"`

	// +kubebuilder:validation:Optional
	MemoryMb *float64 `json:"memoryMb" tf:"memory_mb,omitempty"`
}

type PlacementInitParameters struct {
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`

	Datastore *string `json:"datastore,omitempty" tf:"datastore,omitempty"`

	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	ResourcePool *string `json:"resourcePool,omitempty" tf:"resource_pool,omitempty"`

	StaticIPPoolID *string `json:"staticIpPoolId,omitempty" tf:"static_ip_pool_id,omitempty"`
}

type PlacementObservation struct {
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`

	Datastore *string `json:"datastore,omitempty" tf:"datastore,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	ResourcePool *string `json:"resourcePool,omitempty" tf:"resource_pool,omitempty"`

	StaticIPPoolID *string `json:"staticIpPoolId,omitempty" tf:"static_ip_pool_id,omitempty"`
}

type PlacementParameters struct {

	// +kubebuilder:validation:Optional
	Cluster *string `json:"cluster" tf:"cluster,omitempty"`

	// +kubebuilder:validation:Optional
	Datastore *string `json:"datastore" tf:"datastore,omitempty"`

	// +kubebuilder:validation:Optional
	Network *string `json:"network" tf:"network,omitempty"`

	// +kubebuilder:validation:Optional
	ResourcePool *string `json:"resourcePool" tf:"resource_pool,omitempty"`

	// +kubebuilder:validation:Optional
	StaticIPPoolID *string `json:"staticIpPoolId,omitempty" tf:"static_ip_pool_id,omitempty"`
}

// EdgeVsphereSpec defines the desired state of EdgeVsphere
type EdgeVsphereSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EdgeVsphereParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EdgeVsphereInitParameters `json:"initProvider,omitempty"`
}

// EdgeVsphereStatus defines the observed state of EdgeVsphere.
type EdgeVsphereStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EdgeVsphereObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EdgeVsphere is the Schema for the EdgeVspheres API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,palette}
type EdgeVsphere struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cloudConfig) || (has(self.initProvider) && has(self.initProvider.cloudConfig))",message="spec.forProvider.cloudConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.edgeHostUid) || (has(self.initProvider) && has(self.initProvider.edgeHostUid))",message="spec.forProvider.edgeHostUid is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.machinePool) || (has(self.initProvider) && has(self.initProvider.machinePool))",message="spec.forProvider.machinePool is a required parameter"
	Spec   EdgeVsphereSpec   `json:"spec"`
	Status EdgeVsphereStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EdgeVsphereList contains a list of EdgeVspheres
type EdgeVsphereList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EdgeVsphere `json:"items"`
}

// Repository type metadata.
var (
	EdgeVsphere_Kind             = "EdgeVsphere"
	EdgeVsphere_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EdgeVsphere_Kind}.String()
	EdgeVsphere_KindAPIVersion   = EdgeVsphere_Kind + "." + CRDGroupVersion.String()
	EdgeVsphere_GroupVersionKind = CRDGroupVersion.WithKind(EdgeVsphere_Kind)
)

func init() {
	SchemeBuilder.Register(&EdgeVsphere{}, &EdgeVsphereList{})
}
