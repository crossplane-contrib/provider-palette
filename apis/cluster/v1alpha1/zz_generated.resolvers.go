/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha1 "github.com/crossplane-contrib/provider-palette/apis/backup/v1alpha1"
	v1alpha11 "github.com/crossplane-contrib/provider-palette/apis/cloudaccount/v1alpha1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Aks.
func (mg *Aks) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CloudAccountIDRef,
		Selector:     mg.Spec.ForProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.AzureList{},
			Managed: &v1alpha11.Azure{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudAccountID")
	}
	mg.Spec.ForProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CloudAccountIDRef,
		Selector:     mg.Spec.InitProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.AzureList{},
			Managed: &v1alpha11.Azure{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CloudAccountID")
	}
	mg.Spec.InitProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Aws.
func (mg *Aws) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CloudAccountIDRef,
		Selector:     mg.Spec.ForProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.AwsList{},
			Managed: &v1alpha11.Aws{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudAccountID")
	}
	mg.Spec.ForProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CloudAccountIDRef,
		Selector:     mg.Spec.InitProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.AwsList{},
			Managed: &v1alpha11.Aws{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CloudAccountID")
	}
	mg.Spec.InitProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Azure.
func (mg *Azure) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CloudAccountIDRef,
		Selector:     mg.Spec.ForProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.AzureList{},
			Managed: &v1alpha11.Azure{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudAccountID")
	}
	mg.Spec.ForProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CloudAccountIDRef,
		Selector:     mg.Spec.InitProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.AzureList{},
			Managed: &v1alpha11.Azure{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CloudAccountID")
	}
	mg.Spec.InitProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this CustomCloud.
func (mg *CustomCloud) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CloudAccountIDRef,
		Selector:     mg.Spec.ForProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.CustomList{},
			Managed: &v1alpha11.Custom{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudAccountID")
	}
	mg.Spec.ForProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CloudAccountIDRef,
		Selector:     mg.Spec.InitProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.CustomList{},
			Managed: &v1alpha11.Custom{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CloudAccountID")
	}
	mg.Spec.InitProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this EdgeNative.
func (mg *EdgeNative) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this EdgeVsphere.
func (mg *EdgeVsphere) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Eks.
func (mg *Eks) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CloudAccountIDRef,
		Selector:     mg.Spec.ForProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.AwsList{},
			Managed: &v1alpha11.Aws{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudAccountID")
	}
	mg.Spec.ForProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CloudAccountIDRef,
		Selector:     mg.Spec.InitProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.AwsList{},
			Managed: &v1alpha11.Aws{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CloudAccountID")
	}
	mg.Spec.InitProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this GCP.
func (mg *GCP) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CloudAccountIDRef,
		Selector:     mg.Spec.ForProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.GCPList{},
			Managed: &v1alpha11.GCP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudAccountID")
	}
	mg.Spec.ForProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CloudAccountIDRef,
		Selector:     mg.Spec.InitProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.GCPList{},
			Managed: &v1alpha11.GCP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CloudAccountID")
	}
	mg.Spec.InitProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Gke.
func (mg *Gke) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CloudAccountIDRef,
		Selector:     mg.Spec.ForProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.GCPList{},
			Managed: &v1alpha11.GCP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudAccountID")
	}
	mg.Spec.ForProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CloudAccountIDRef,
		Selector:     mg.Spec.InitProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.GCPList{},
			Managed: &v1alpha11.GCP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CloudAccountID")
	}
	mg.Spec.InitProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Group.
func (mg *Group) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Maas.
func (mg *Maas) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CloudAccountIDRef,
		Selector:     mg.Spec.ForProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.MaasList{},
			Managed: &v1alpha11.Maas{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudAccountID")
	}
	mg.Spec.ForProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CloudAccountIDRef,
		Selector:     mg.Spec.InitProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.MaasList{},
			Managed: &v1alpha11.Maas{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CloudAccountID")
	}
	mg.Spec.InitProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Openstack.
func (mg *Openstack) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CloudAccountIDRef,
		Selector:     mg.Spec.ForProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.OpenstackList{},
			Managed: &v1alpha11.Openstack{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudAccountID")
	}
	mg.Spec.ForProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CloudAccountIDRef,
		Selector:     mg.Spec.InitProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.OpenstackList{},
			Managed: &v1alpha11.Openstack{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CloudAccountID")
	}
	mg.Spec.InitProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Vsphere.
func (mg *Vsphere) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CloudAccountIDRef,
		Selector:     mg.Spec.ForProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.VsphereList{},
			Managed: &v1alpha11.Vsphere{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudAccountID")
	}
	mg.Spec.ForProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &v1alpha1.StorageLocationList{},
				Managed: &v1alpha1.StorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CloudAccountIDRef,
		Selector:     mg.Spec.InitProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &v1alpha11.VsphereList{},
			Managed: &v1alpha11.Vsphere{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CloudAccountID")
	}
	mg.Spec.InitProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ProfileList{},
				Managed: &Profile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}

	return nil
}
