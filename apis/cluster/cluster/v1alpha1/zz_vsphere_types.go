/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type VsphereBackupPolicyInitParameters struct {

	// (String) The ID of the backup location to use for the backup.
	// The ID of the backup location to use for the backup.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-palette/apis/cluster/backup/v1alpha1.StorageLocation
	BackupLocationID *string `json:"backupLocationId,omitempty" tf:"backup_location_id,omitempty"`

	// Reference to a StorageLocation in backup to populate backupLocationId.
	// +kubebuilder:validation:Optional
	BackupLocationIDRef *v1.Reference `json:"backupLocationIdRef,omitempty" tf:"-"`

	// Selector for a StorageLocation in backup to populate backupLocationId.
	// +kubebuilder:validation:Optional
	BackupLocationIDSelector *v1.Selector `json:"backupLocationIdSelector,omitempty" tf:"-"`

	// (Set of String) The list of cluster UIDs to include in the backup. If include_all_clusters is set to true, then all clusters will be included.
	// The list of cluster UIDs to include in the backup. If `include_all_clusters` is set to `true`, then all clusters will be included.
	// +listType=set
	ClusterUids []*string `json:"clusterUids,omitempty" tf:"cluster_uids,omitempty"`

	// (Number) The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
	// The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
	ExpiryInHour *float64 `json:"expiryInHour,omitempty" tf:"expiry_in_hour,omitempty"`

	// (Boolean) Whether to include all clusters in the backup. If set to false, only the clusters specified in cluster_uids will be included.
	// Whether to include all clusters in the backup. If set to false, only the clusters specified in `cluster_uids` will be included.
	IncludeAllClusters *bool `json:"includeAllClusters,omitempty" tf:"include_all_clusters,omitempty"`

	// (Boolean) Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)
	// Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)
	IncludeClusterResources *bool `json:"includeClusterResources,omitempty" tf:"include_cluster_resources,omitempty"`

	// (String) Specifies whether to include the cluster resources in the backup. Supported values are always, never, and auto.
	// Specifies whether to include the cluster resources in the backup. Supported values are `always`, `never`, and `auto`.
	IncludeClusterResourcesMode *string `json:"includeClusterResourcesMode,omitempty" tf:"include_cluster_resources_mode,omitempty"`

	// (Boolean) Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
	// Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
	IncludeDisks *bool `json:"includeDisks,omitempty" tf:"include_disks,omitempty"`

	// (Block List) The namespaces for the cluster. (see below for nested schema)
	// The list of Kubernetes namespaces to include in the backup. If not specified, all namespaces will be included.
	// +listType=set
	Namespaces []*string `json:"namespaces,omitempty" tf:"namespaces,omitempty"`

	// -.
	// Prefix for the backup name. The backup name will be of the format <prefix>-<cluster-name>-<timestamp>.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// (String) The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to 0 1 * * *.
	// The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to `0 1 * * *`.
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`
}

type VsphereBackupPolicyObservation struct {

	// (String) The ID of the backup location to use for the backup.
	// The ID of the backup location to use for the backup.
	BackupLocationID *string `json:"backupLocationId,omitempty" tf:"backup_location_id,omitempty"`

	// (Set of String) The list of cluster UIDs to include in the backup. If include_all_clusters is set to true, then all clusters will be included.
	// The list of cluster UIDs to include in the backup. If `include_all_clusters` is set to `true`, then all clusters will be included.
	// +listType=set
	ClusterUids []*string `json:"clusterUids,omitempty" tf:"cluster_uids,omitempty"`

	// (Number) The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
	// The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
	ExpiryInHour *float64 `json:"expiryInHour,omitempty" tf:"expiry_in_hour,omitempty"`

	// (Boolean) Whether to include all clusters in the backup. If set to false, only the clusters specified in cluster_uids will be included.
	// Whether to include all clusters in the backup. If set to false, only the clusters specified in `cluster_uids` will be included.
	IncludeAllClusters *bool `json:"includeAllClusters,omitempty" tf:"include_all_clusters,omitempty"`

	// (Boolean) Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)
	// Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)
	IncludeClusterResources *bool `json:"includeClusterResources,omitempty" tf:"include_cluster_resources,omitempty"`

	// (String) Specifies whether to include the cluster resources in the backup. Supported values are always, never, and auto.
	// Specifies whether to include the cluster resources in the backup. Supported values are `always`, `never`, and `auto`.
	IncludeClusterResourcesMode *string `json:"includeClusterResourcesMode,omitempty" tf:"include_cluster_resources_mode,omitempty"`

	// (Boolean) Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
	// Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
	IncludeDisks *bool `json:"includeDisks,omitempty" tf:"include_disks,omitempty"`

	// (Block List) The namespaces for the cluster. (see below for nested schema)
	// The list of Kubernetes namespaces to include in the backup. If not specified, all namespaces will be included.
	// +listType=set
	Namespaces []*string `json:"namespaces,omitempty" tf:"namespaces,omitempty"`

	// -.
	// Prefix for the backup name. The backup name will be of the format <prefix>-<cluster-name>-<timestamp>.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// (String) The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to 0 1 * * *.
	// The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to `0 1 * * *`.
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`
}

type VsphereBackupPolicyParameters struct {

	// (String) The ID of the backup location to use for the backup.
	// The ID of the backup location to use for the backup.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-palette/apis/cluster/backup/v1alpha1.StorageLocation
	// +kubebuilder:validation:Optional
	BackupLocationID *string `json:"backupLocationId,omitempty" tf:"backup_location_id,omitempty"`

	// Reference to a StorageLocation in backup to populate backupLocationId.
	// +kubebuilder:validation:Optional
	BackupLocationIDRef *v1.Reference `json:"backupLocationIdRef,omitempty" tf:"-"`

	// Selector for a StorageLocation in backup to populate backupLocationId.
	// +kubebuilder:validation:Optional
	BackupLocationIDSelector *v1.Selector `json:"backupLocationIdSelector,omitempty" tf:"-"`

	// (Set of String) The list of cluster UIDs to include in the backup. If include_all_clusters is set to true, then all clusters will be included.
	// The list of cluster UIDs to include in the backup. If `include_all_clusters` is set to `true`, then all clusters will be included.
	// +kubebuilder:validation:Optional
	// +listType=set
	ClusterUids []*string `json:"clusterUids,omitempty" tf:"cluster_uids,omitempty"`

	// (Number) The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
	// The number of hours after which the backup will be deleted. For example, if the expiry is set to 24, the backup will be deleted after 24 hours.
	// +kubebuilder:validation:Optional
	ExpiryInHour *float64 `json:"expiryInHour" tf:"expiry_in_hour,omitempty"`

	// (Boolean) Whether to include all clusters in the backup. If set to false, only the clusters specified in cluster_uids will be included.
	// Whether to include all clusters in the backup. If set to false, only the clusters specified in `cluster_uids` will be included.
	// +kubebuilder:validation:Optional
	IncludeAllClusters *bool `json:"includeAllClusters,omitempty" tf:"include_all_clusters,omitempty"`

	// (Boolean) Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)
	// Indicates whether to include cluster resources in the backup. If set to false, only the cluster configuration and disks will be backed up. (Note: Starting with Palette version 4.6, the include_cluster_resources attribute will be deprecated, and a new attribute, include_cluster_resources_mode, will be introduced.)
	// +kubebuilder:validation:Optional
	IncludeClusterResources *bool `json:"includeClusterResources,omitempty" tf:"include_cluster_resources,omitempty"`

	// (String) Specifies whether to include the cluster resources in the backup. Supported values are always, never, and auto.
	// Specifies whether to include the cluster resources in the backup. Supported values are `always`, `never`, and `auto`.
	// +kubebuilder:validation:Optional
	IncludeClusterResourcesMode *string `json:"includeClusterResourcesMode,omitempty" tf:"include_cluster_resources_mode,omitempty"`

	// (Boolean) Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
	// Whether to include the disks in the backup. If set to false, only the cluster configuration will be backed up.
	// +kubebuilder:validation:Optional
	IncludeDisks *bool `json:"includeDisks,omitempty" tf:"include_disks,omitempty"`

	// (Block List) The namespaces for the cluster. (see below for nested schema)
	// The list of Kubernetes namespaces to include in the backup. If not specified, all namespaces will be included.
	// +kubebuilder:validation:Optional
	// +listType=set
	Namespaces []*string `json:"namespaces,omitempty" tf:"namespaces,omitempty"`

	// -.
	// Prefix for the backup name. The backup name will be of the format <prefix>-<cluster-name>-<timestamp>.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix" tf:"prefix,omitempty"`

	// (String) The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to 0 1 * * *.
	// The schedule for the backup. The schedule is specified in cron format. For example, to run the backup every day at 1:00 AM, the schedule should be set to `0 1 * * *`.
	// +kubebuilder:validation:Optional
	Schedule *string `json:"schedule" tf:"schedule,omitempty"`
}

type VsphereCloudConfigInitParameters struct {

	// (String) The name of the datacenter in vSphere. This is the name of the datacenter as it appears in vSphere.
	// The name of the datacenter in vSphere. This is the name of the datacenter as it appears in vSphere.
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// (String) The name of the folder in vSphere. This is the name of the folder as it appears in vSphere.
	// The name of the folder in vSphere. This is the name of the folder as it appears in vSphere.
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// (String) The host endpoint to use for the cluster. This can be IP or FQDN(External/DDNS).
	// The host endpoint to use for the cluster. This can be `IP` or `FQDN(External/DDNS)`.
	HostEndpoint *string `json:"hostEndpoint,omitempty" tf:"host_endpoint,omitempty"`

	// (String) The name of the image template folder in vSphere. This is the name of the folder as it appears in vSphere.
	// The name of the image template folder in vSphere. This is the name of the folder as it appears in vSphere.
	ImageTemplateFolder *string `json:"imageTemplateFolder,omitempty" tf:"image_template_folder,omitempty"`

	// (String) The search domain to use for the cluster in case of DHCP.
	// The search domain to use for the cluster in case of DHCP.
	NetworkSearchDomain *string `json:"networkSearchDomain,omitempty" tf:"network_search_domain,omitempty"`

	// (String) The type of network to use for the cluster. This can be VIP or DDNS.
	// The type of network to use for the cluster. This can be `VIP` or `DDNS`.
	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// (Set of String) A list of NTP servers to be used by the cluster.
	// A list of NTP servers to be used by the cluster.
	// +listType=set
	NtpServers []*string `json:"ntpServers,omitempty" tf:"ntp_servers,omitempty"`

	// (String, Deprecated) The SSH key to be used for the cluster. This is the public key that will be used to access the cluster nodes. ssh_key & ssh_keys are mutually exclusive.
	// The SSH key to be used for the cluster. This is the public key that will be used to access the cluster nodes. `ssh_key & ssh_keys` are mutually exclusive.
	SSHKey *string `json:"sshKey,omitempty" tf:"ssh_key,omitempty"`

	// (Set of String) List of public SSH (Secure Shell) keys to establish, administer, and communicate with remote clusters, ssh_key & ssh_keys are mutually exclusive.
	// List of public SSH (Secure Shell) keys to establish, administer, and communicate with remote clusters, `ssh_key & ssh_keys` are mutually exclusive.
	// +listType=set
	SSHKeys []*string `json:"sshKeys,omitempty" tf:"ssh_keys,omitempty"`

	// (Boolean) Whether to use static IP addresses for the cluster. If true, the cluster will use static IP addresses. If false, the cluster will use DDNS. Default is false.
	// Whether to use static IP addresses for the cluster. If `true`, the cluster will use static IP addresses. If `false`, the cluster will use DDNS. Default is `false`.
	StaticIP *bool `json:"staticIp,omitempty" tf:"static_ip,omitempty"`
}

type VsphereCloudConfigObservation struct {

	// (String) The name of the datacenter in vSphere. This is the name of the datacenter as it appears in vSphere.
	// The name of the datacenter in vSphere. This is the name of the datacenter as it appears in vSphere.
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// (String) The name of the folder in vSphere. This is the name of the folder as it appears in vSphere.
	// The name of the folder in vSphere. This is the name of the folder as it appears in vSphere.
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// (String) The host endpoint to use for the cluster. This can be IP or FQDN(External/DDNS).
	// The host endpoint to use for the cluster. This can be `IP` or `FQDN(External/DDNS)`.
	HostEndpoint *string `json:"hostEndpoint,omitempty" tf:"host_endpoint,omitempty"`

	// (String) The name of the image template folder in vSphere. This is the name of the folder as it appears in vSphere.
	// The name of the image template folder in vSphere. This is the name of the folder as it appears in vSphere.
	ImageTemplateFolder *string `json:"imageTemplateFolder,omitempty" tf:"image_template_folder,omitempty"`

	// (String) The search domain to use for the cluster in case of DHCP.
	// The search domain to use for the cluster in case of DHCP.
	NetworkSearchDomain *string `json:"networkSearchDomain,omitempty" tf:"network_search_domain,omitempty"`

	// (String) The type of network to use for the cluster. This can be VIP or DDNS.
	// The type of network to use for the cluster. This can be `VIP` or `DDNS`.
	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// (Set of String) A list of NTP servers to be used by the cluster.
	// A list of NTP servers to be used by the cluster.
	// +listType=set
	NtpServers []*string `json:"ntpServers,omitempty" tf:"ntp_servers,omitempty"`

	// (String, Deprecated) The SSH key to be used for the cluster. This is the public key that will be used to access the cluster nodes. ssh_key & ssh_keys are mutually exclusive.
	// The SSH key to be used for the cluster. This is the public key that will be used to access the cluster nodes. `ssh_key & ssh_keys` are mutually exclusive.
	SSHKey *string `json:"sshKey,omitempty" tf:"ssh_key,omitempty"`

	// (Set of String) List of public SSH (Secure Shell) keys to establish, administer, and communicate with remote clusters, ssh_key & ssh_keys are mutually exclusive.
	// List of public SSH (Secure Shell) keys to establish, administer, and communicate with remote clusters, `ssh_key & ssh_keys` are mutually exclusive.
	// +listType=set
	SSHKeys []*string `json:"sshKeys,omitempty" tf:"ssh_keys,omitempty"`

	// (Boolean) Whether to use static IP addresses for the cluster. If true, the cluster will use static IP addresses. If false, the cluster will use DDNS. Default is false.
	// Whether to use static IP addresses for the cluster. If `true`, the cluster will use static IP addresses. If `false`, the cluster will use DDNS. Default is `false`.
	StaticIP *bool `json:"staticIp,omitempty" tf:"static_ip,omitempty"`
}

type VsphereCloudConfigParameters struct {

	// (String) The name of the datacenter in vSphere. This is the name of the datacenter as it appears in vSphere.
	// The name of the datacenter in vSphere. This is the name of the datacenter as it appears in vSphere.
	// +kubebuilder:validation:Optional
	Datacenter *string `json:"datacenter" tf:"datacenter,omitempty"`

	// (String) The name of the folder in vSphere. This is the name of the folder as it appears in vSphere.
	// The name of the folder in vSphere. This is the name of the folder as it appears in vSphere.
	// +kubebuilder:validation:Optional
	Folder *string `json:"folder" tf:"folder,omitempty"`

	// (String) The host endpoint to use for the cluster. This can be IP or FQDN(External/DDNS).
	// The host endpoint to use for the cluster. This can be `IP` or `FQDN(External/DDNS)`.
	// +kubebuilder:validation:Optional
	HostEndpoint *string `json:"hostEndpoint,omitempty" tf:"host_endpoint,omitempty"`

	// (String) The name of the image template folder in vSphere. This is the name of the folder as it appears in vSphere.
	// The name of the image template folder in vSphere. This is the name of the folder as it appears in vSphere.
	// +kubebuilder:validation:Optional
	ImageTemplateFolder *string `json:"imageTemplateFolder,omitempty" tf:"image_template_folder,omitempty"`

	// (String) The search domain to use for the cluster in case of DHCP.
	// The search domain to use for the cluster in case of DHCP.
	// +kubebuilder:validation:Optional
	NetworkSearchDomain *string `json:"networkSearchDomain,omitempty" tf:"network_search_domain,omitempty"`

	// (String) The type of network to use for the cluster. This can be VIP or DDNS.
	// The type of network to use for the cluster. This can be `VIP` or `DDNS`.
	// +kubebuilder:validation:Optional
	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// (Set of String) A list of NTP servers to be used by the cluster.
	// A list of NTP servers to be used by the cluster.
	// +kubebuilder:validation:Optional
	// +listType=set
	NtpServers []*string `json:"ntpServers,omitempty" tf:"ntp_servers,omitempty"`

	// (String, Deprecated) The SSH key to be used for the cluster. This is the public key that will be used to access the cluster nodes. ssh_key & ssh_keys are mutually exclusive.
	// The SSH key to be used for the cluster. This is the public key that will be used to access the cluster nodes. `ssh_key & ssh_keys` are mutually exclusive.
	// +kubebuilder:validation:Optional
	SSHKey *string `json:"sshKey,omitempty" tf:"ssh_key,omitempty"`

	// (Set of String) List of public SSH (Secure Shell) keys to establish, administer, and communicate with remote clusters, ssh_key & ssh_keys are mutually exclusive.
	// List of public SSH (Secure Shell) keys to establish, administer, and communicate with remote clusters, `ssh_key & ssh_keys` are mutually exclusive.
	// +kubebuilder:validation:Optional
	// +listType=set
	SSHKeys []*string `json:"sshKeys,omitempty" tf:"ssh_keys,omitempty"`

	// (Boolean) Whether to use static IP addresses for the cluster. If true, the cluster will use static IP addresses. If false, the cluster will use DDNS. Default is false.
	// Whether to use static IP addresses for the cluster. If `true`, the cluster will use static IP addresses. If `false`, the cluster will use DDNS. Default is `false`.
	// +kubebuilder:validation:Optional
	StaticIP *bool `json:"staticIp,omitempty" tf:"static_ip,omitempty"`
}

type VsphereClusterProfileInitParameters struct {

	// (String) The ID of this resource.
	// The ID of the cluster profile.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-palette/apis/cluster/cluster/v1alpha1.Profile
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a Profile in cluster to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a Profile in cluster to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`

	// (Block List) For packs of type spectro, helm, and manifest, at least one pack must be specified. (see below for nested schema)
	// For packs of type `spectro`, `helm`, and `manifest`, at least one pack must be specified.
	Pack []VsphereClusterProfilePackInitParameters `json:"pack,omitempty" tf:"pack,omitempty"`

	// value pairs. For example: priority = "5".
	// A map of cluster profile variables, specified as key-value pairs. For example: `priority = "5"`.
	// +mapType=granular
	Variables map[string]*string `json:"variables,omitempty" tf:"variables,omitempty"`
}

type VsphereClusterProfileObservation struct {

	// (String) The ID of this resource.
	// The ID of the cluster profile.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List) For packs of type spectro, helm, and manifest, at least one pack must be specified. (see below for nested schema)
	// For packs of type `spectro`, `helm`, and `manifest`, at least one pack must be specified.
	Pack []VsphereClusterProfilePackObservation `json:"pack,omitempty" tf:"pack,omitempty"`

	// value pairs. For example: priority = "5".
	// A map of cluster profile variables, specified as key-value pairs. For example: `priority = "5"`.
	// +mapType=granular
	Variables map[string]*string `json:"variables,omitempty" tf:"variables,omitempty"`
}

type VsphereClusterProfilePackInitParameters struct {

	// (Block List) (see below for nested schema)
	Manifest []VsphereClusterProfilePackManifestInitParameters `json:"manifest,omitempty" tf:"manifest,omitempty"`

	// (String) The name of the cluster.
	// The name of the pack. The name must be unique within the cluster profile.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name. If uid is not provided, this field is required along with name and tag to resolve the pack UID internally.
	// The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name. If `uid` is not provided, this field is required along with `name` and `tag` to resolve the pack UID internally.
	RegistryUID *string `json:"registryUid,omitempty" tf:"registry_uid,omitempty"`

	// (String) The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is spectro or helm. If uid is not provided, this field is required along with name and registry_uid to resolve the pack UID internally.
	// The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is `spectro` or `helm`. If `uid` is not provided, this field is required along with `name` and `registry_uid` to resolve the pack UID internally.
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
	// The type of the pack. Allowed values are `spectro`, `manifest`, `helm`, or `oci`. The default value is spectro. If using an OCI registry for pack, set the type to `oci`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry. If not provided, all of name, tag, and registry_uid must be specified to resolve the pack UID internally.
	// The unique identifier of the pack. The value can be looked up using the [`spectrocloud_pack`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs/data-sources/pack) data source. This value is required if the pack type is `spectro` and for `helm` if the chart is from a public helm registry. If not provided, all of `name`, `tag`, and `registry_uid` must be specified to resolve the pack UID internally.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// (String) The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
	// The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
	Values *string `json:"values,omitempty" tf:"values,omitempty"`
}

type VsphereClusterProfilePackManifestInitParameters struct {

	// (String) The content of the manifest. The content is the YAML content of the manifest.
	// The content of the manifest. The content is the YAML content of the manifest.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// (String) The name of the cluster.
	// The name of the manifest. The name must be unique within the pack.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type VsphereClusterProfilePackManifestObservation struct {

	// (String) The content of the manifest. The content is the YAML content of the manifest.
	// The content of the manifest. The content is the YAML content of the manifest.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// (String) The name of the cluster.
	// The name of the manifest. The name must be unique within the pack.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry. If not provided, all of name, tag, and registry_uid must be specified to resolve the pack UID internally.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type VsphereClusterProfilePackManifestParameters struct {

	// (String) The content of the manifest. The content is the YAML content of the manifest.
	// The content of the manifest. The content is the YAML content of the manifest.
	// +kubebuilder:validation:Optional
	Content *string `json:"content" tf:"content,omitempty"`

	// (String) The name of the cluster.
	// The name of the manifest. The name must be unique within the pack.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type VsphereClusterProfilePackObservation struct {

	// (Block List) (see below for nested schema)
	Manifest []VsphereClusterProfilePackManifestObservation `json:"manifest,omitempty" tf:"manifest,omitempty"`

	// (String) The name of the cluster.
	// The name of the pack. The name must be unique within the cluster profile.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name. If uid is not provided, this field is required along with name and tag to resolve the pack UID internally.
	// The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name. If `uid` is not provided, this field is required along with `name` and `tag` to resolve the pack UID internally.
	RegistryUID *string `json:"registryUid,omitempty" tf:"registry_uid,omitempty"`

	// (String) The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is spectro or helm. If uid is not provided, this field is required along with name and registry_uid to resolve the pack UID internally.
	// The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is `spectro` or `helm`. If `uid` is not provided, this field is required along with `name` and `registry_uid` to resolve the pack UID internally.
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
	// The type of the pack. Allowed values are `spectro`, `manifest`, `helm`, or `oci`. The default value is spectro. If using an OCI registry for pack, set the type to `oci`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry. If not provided, all of name, tag, and registry_uid must be specified to resolve the pack UID internally.
	// The unique identifier of the pack. The value can be looked up using the [`spectrocloud_pack`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs/data-sources/pack) data source. This value is required if the pack type is `spectro` and for `helm` if the chart is from a public helm registry. If not provided, all of `name`, `tag`, and `registry_uid` must be specified to resolve the pack UID internally.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// (String) The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
	// The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
	Values *string `json:"values,omitempty" tf:"values,omitempty"`
}

type VsphereClusterProfilePackParameters struct {

	// (Block List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Manifest []VsphereClusterProfilePackManifestParameters `json:"manifest,omitempty" tf:"manifest,omitempty"`

	// (String) The name of the cluster.
	// The name of the pack. The name must be unique within the cluster profile.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name. If uid is not provided, this field is required along with name and tag to resolve the pack UID internally.
	// The registry UID of the pack. The registry UID is the unique identifier of the registry. This attribute is required if there is more than one registry that contains a pack with the same name. If `uid` is not provided, this field is required along with `name` and `tag` to resolve the pack UID internally.
	// +kubebuilder:validation:Optional
	RegistryUID *string `json:"registryUid,omitempty" tf:"registry_uid,omitempty"`

	// (String) The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is spectro or helm. If uid is not provided, this field is required along with name and registry_uid to resolve the pack UID internally.
	// The tag of the pack. The tag is the version of the pack. This attribute is required if the pack type is `spectro` or `helm`. If `uid` is not provided, this field is required along with `name` and `registry_uid` to resolve the pack UID internally.
	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
	// The type of the pack. Allowed values are `spectro`, `manifest`, `helm`, or `oci`. The default value is spectro. If using an OCI registry for pack, set the type to `oci`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The unique identifier of the pack. The value can be looked up using the spectrocloud_pack data source. This value is required if the pack type is spectro and for helm if the chart is from a public helm registry. If not provided, all of name, tag, and registry_uid must be specified to resolve the pack UID internally.
	// The unique identifier of the pack. The value can be looked up using the [`spectrocloud_pack`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs/data-sources/pack) data source. This value is required if the pack type is `spectro` and for `helm` if the chart is from a public helm registry. If not provided, all of `name`, `tag`, and `registry_uid` must be specified to resolve the pack UID internally.
	// +kubebuilder:validation:Optional
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// (String) The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
	// The values of the pack. The values are the configuration values of the pack. The values are specified in YAML format.
	// +kubebuilder:validation:Optional
	Values *string `json:"values,omitempty" tf:"values,omitempty"`
}

type VsphereClusterProfileParameters struct {

	// (String) The ID of this resource.
	// The ID of the cluster profile.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-palette/apis/cluster/cluster/v1alpha1.Profile
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a Profile in cluster to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a Profile in cluster to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`

	// (Block List) For packs of type spectro, helm, and manifest, at least one pack must be specified. (see below for nested schema)
	// For packs of type `spectro`, `helm`, and `manifest`, at least one pack must be specified.
	// +kubebuilder:validation:Optional
	Pack []VsphereClusterProfilePackParameters `json:"pack,omitempty" tf:"pack,omitempty"`

	// value pairs. For example: priority = "5".
	// A map of cluster profile variables, specified as key-value pairs. For example: `priority = "5"`.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Variables map[string]*string `json:"variables,omitempty" tf:"variables,omitempty"`
}

type VsphereClusterRbacBindingInitParameters struct {

	// (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	// The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (Map of String) The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	// The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	// +mapType=granular
	Role map[string]*string `json:"role,omitempty" tf:"role,omitempty"`

	// (Block List) (see below for nested schema)
	Subjects []VsphereClusterRbacBindingSubjectsInitParameters `json:"subjects,omitempty" tf:"subjects,omitempty"`

	// (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
	// The type of the RBAC binding. Can be one of the following values: `RoleBinding`, or `ClusterRoleBinding`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsphereClusterRbacBindingObservation struct {

	// (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	// The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (Map of String) The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	// The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	// +mapType=granular
	Role map[string]*string `json:"role,omitempty" tf:"role,omitempty"`

	// (Block List) (see below for nested schema)
	Subjects []VsphereClusterRbacBindingSubjectsObservation `json:"subjects,omitempty" tf:"subjects,omitempty"`

	// (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
	// The type of the RBAC binding. Can be one of the following values: `RoleBinding`, or `ClusterRoleBinding`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsphereClusterRbacBindingParameters struct {

	// (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	// The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (Map of String) The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	// The role of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Role map[string]*string `json:"role,omitempty" tf:"role,omitempty"`

	// (Block List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Subjects []VsphereClusterRbacBindingSubjectsParameters `json:"subjects,omitempty" tf:"subjects,omitempty"`

	// (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
	// The type of the RBAC binding. Can be one of the following values: `RoleBinding`, or `ClusterRoleBinding`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VsphereClusterRbacBindingSubjectsInitParameters struct {

	// (String) The name of the cluster.
	// The name of the subject. Required if 'type' is set to 'User' or 'Group'.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	// The Kubernetes namespace of the subject. Required if 'type' is set to 'ServiceAccount'.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
	// The type of the subject. Can be one of the following values: `User`, `Group`, or `ServiceAccount`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsphereClusterRbacBindingSubjectsObservation struct {

	// (String) The name of the cluster.
	// The name of the subject. Required if 'type' is set to 'User' or 'Group'.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	// The Kubernetes namespace of the subject. Required if 'type' is set to 'ServiceAccount'.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
	// The type of the subject. Can be one of the following values: `User`, `Group`, or `ServiceAccount`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsphereClusterRbacBindingSubjectsParameters struct {

	// (String) The name of the cluster.
	// The name of the subject. Required if 'type' is set to 'User' or 'Group'.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The Kubernetes namespace of the RBAC binding. Required if 'type' is set to 'RoleBinding'.
	// The Kubernetes namespace of the subject. Required if 'type' is set to 'ServiceAccount'.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (String) The type of the pack. Allowed values are spectro, manifest, helm, or oci. The default value is spectro. If using an OCI registry for pack, set the type to oci.
	// The type of the subject. Can be one of the following values: `User`, `Group`, or `ServiceAccount`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VsphereHostConfigInitParameters struct {

	// (String) The external traffic policy for the cluster.
	// The external traffic policy for the cluster.
	ExternalTrafficPolicy *string `json:"externalTrafficPolicy,omitempty" tf:"external_traffic_policy,omitempty"`

	// (String) The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
	// The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
	HostEndpointType *string `json:"hostEndpointType,omitempty" tf:"host_endpoint_type,omitempty"`

	// (String) The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
	// The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
	IngressHost *string `json:"ingressHost,omitempty" tf:"ingress_host,omitempty"`

	// (String) The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
	// The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
	LoadBalancerSourceRanges *string `json:"loadBalancerSourceRanges,omitempty" tf:"load_balancer_source_ranges,omitempty"`
}

type VsphereHostConfigObservation struct {

	// (String) The external traffic policy for the cluster.
	// The external traffic policy for the cluster.
	ExternalTrafficPolicy *string `json:"externalTrafficPolicy,omitempty" tf:"external_traffic_policy,omitempty"`

	// (String) The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
	// The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
	HostEndpointType *string `json:"hostEndpointType,omitempty" tf:"host_endpoint_type,omitempty"`

	// (String) The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
	// The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
	IngressHost *string `json:"ingressHost,omitempty" tf:"ingress_host,omitempty"`

	// (String) The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
	// The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
	LoadBalancerSourceRanges *string `json:"loadBalancerSourceRanges,omitempty" tf:"load_balancer_source_ranges,omitempty"`
}

type VsphereHostConfigParameters struct {

	// (String) The external traffic policy for the cluster.
	// The external traffic policy for the cluster.
	// +kubebuilder:validation:Optional
	ExternalTrafficPolicy *string `json:"externalTrafficPolicy,omitempty" tf:"external_traffic_policy,omitempty"`

	// (String) The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
	// The type of endpoint for the cluster. Can be either 'Ingress' or 'LoadBalancer'. The default is 'Ingress'.
	// +kubebuilder:validation:Optional
	HostEndpointType *string `json:"hostEndpointType,omitempty" tf:"host_endpoint_type,omitempty"`

	// (String) The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
	// The host for the Ingress endpoint. Required if 'host_endpoint_type' is set to 'Ingress'.
	// +kubebuilder:validation:Optional
	IngressHost *string `json:"ingressHost,omitempty" tf:"ingress_host,omitempty"`

	// (String) The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
	// The source ranges for the load balancer. Required if 'host_endpoint_type' is set to 'LoadBalancer'.
	// +kubebuilder:validation:Optional
	LoadBalancerSourceRanges *string `json:"loadBalancerSourceRanges,omitempty" tf:"load_balancer_source_ranges,omitempty"`
}

type VsphereInitParameters struct {

	// (String) The setting to apply the cluster profile. DownloadAndInstall will download and install packs in one action. DownloadAndInstallLater will only download artifact and postpone install for later. Default value is DownloadAndInstall.
	// The setting to apply the cluster profile. `DownloadAndInstall` will download and install packs in one action. `DownloadAndInstallLater` will only download artifact and postpone install for later. Default value is `DownloadAndInstall`.
	ApplySetting *string `json:"applySetting,omitempty" tf:"apply_setting,omitempty"`

	// (Block List, Max: 1) The backup policy for the cluster. If not specified, no backups will be taken. (see below for nested schema)
	// The backup policy for the cluster. If not specified, no backups will be taken.
	BackupPolicy []VsphereBackupPolicyInitParameters `json:"backupPolicy,omitempty" tf:"backup_policy,omitempty"`

	// (String) ID of the cloud account to be used for the cluster. This cloud account must be of type vsphere.
	// ID of the cloud account to be used for the cluster. This cloud account must be of type `vsphere`.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-palette/apis/cluster/cloudaccount/v1alpha1.Vsphere
	CloudAccountID *string `json:"cloudAccountId,omitempty" tf:"cloud_account_id,omitempty"`

	// Reference to a Vsphere in cloudaccount to populate cloudAccountId.
	// +kubebuilder:validation:Optional
	CloudAccountIDRef *v1.Reference `json:"cloudAccountIdRef,omitempty" tf:"-"`

	// Selector for a Vsphere in cloudaccount to populate cloudAccountId.
	// +kubebuilder:validation:Optional
	CloudAccountIDSelector *v1.Selector `json:"cloudAccountIdSelector,omitempty" tf:"-"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	CloudConfig []VsphereCloudConfigInitParameters `json:"cloudConfig,omitempty" tf:"cloud_config,omitempty"`

	// (String) cluster_meta_attribute can be used to set additional cluster metadata information, eg {'nic_name': 'test', 'env': 'stage'}
	// `cluster_meta_attribute` can be used to set additional cluster metadata information, eg `{'nic_name': 'test', 'env': 'stage'}`
	ClusterMetaAttribute *string `json:"clusterMetaAttribute,omitempty" tf:"cluster_meta_attribute,omitempty"`

	// (Block List) (see below for nested schema)
	ClusterProfile []VsphereClusterProfileInitParameters `json:"clusterProfile,omitempty" tf:"cluster_profile,omitempty"`

	// (Block List) The RBAC binding for the cluster. (see below for nested schema)
	// The RBAC binding for the cluster.
	ClusterRbacBinding []VsphereClusterRbacBindingInitParameters `json:"clusterRbacBinding,omitempty" tf:"cluster_rbac_binding,omitempty"`

	// (String) The context of the VMware cluster. Allowed values are project or tenant. Default is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
	// The context of the VMware cluster. Allowed values are `project` or `tenant`. Default is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The description of the cluster. Default value is empty string.
	// The description of the cluster. Default value is empty string.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) If set to true, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
	// If set to `true`, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// (Number) Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
	// Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
	ForceDeleteDelay *float64 `json:"forceDeleteDelay,omitempty" tf:"force_delete_delay,omitempty"`

	// (Block List) The host configuration for the cluster. (see below for nested schema)
	// The host configuration for the cluster.
	HostConfig []VsphereHostConfigInitParameters `json:"hostConfig,omitempty" tf:"host_config,omitempty"`

	// (Block List) (see below for nested schema)
	LocationConfig []VsphereLocationConfigInitParameters `json:"locationConfig,omitempty" tf:"location_config,omitempty"`

	// (Block Set, Min: 1) (see below for nested schema)
	MachinePool []VsphereMachinePoolInitParameters `json:"machinePool,omitempty" tf:"machine_pool,omitempty"`

	// (String) The name of the cluster.
	// The name of the cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) The namespaces for the cluster. (see below for nested schema)
	// The namespaces for the cluster.
	Namespaces []VsphereNamespacesInitParameters `json:"namespaces,omitempty" tf:"namespaces,omitempty"`

	// 01-02T15:04:05Z07:00
	// The date and time after which to patch the cluster. Prefix the time value with the respective RFC. Ex: `RFC3339: 2006-01-02T15:04:05Z07:00`
	OsPatchAfter *string `json:"osPatchAfter,omitempty" tf:"os_patch_after,omitempty"`

	// (Boolean) Whether to apply OS patch on boot. Default is false.
	// Whether to apply OS patch on boot. Default is `false`.
	OsPatchOnBoot *bool `json:"osPatchOnBoot,omitempty" tf:"os_patch_on_boot,omitempty"`

	// (String) The cron schedule for OS patching. This must be in the form of cron syntax. Ex: 0 0 * * *.
	// The cron schedule for OS patching. This must be in the form of cron syntax. Ex: `0 0 * * *`.
	OsPatchSchedule *string `json:"osPatchSchedule,omitempty" tf:"os_patch_schedule,omitempty"`

	// (String) The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is unlock, meaning upgrades occur automatically. Setting it to lock pauses automatic agent upgrades for the cluster.
	// The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is `unlock`, meaning upgrades occur automatically. Setting it to `lock` pauses automatic agent upgrades for the cluster.
	PauseAgentUpgrades *string `json:"pauseAgentUpgrades,omitempty" tf:"pause_agent_upgrades,omitempty"`

	// (String) To authorize the cluster repave, set the value to Approved for approval and "" to decline. Default value is "".
	// To authorize the cluster repave, set the value to `Approved` for approval and `""` to decline. Default value is `""`.
	ReviewRepaveState *string `json:"reviewRepaveState,omitempty" tf:"review_repave_state,omitempty"`

	// (Block List, Max: 1) The scan policy for the cluster. (see below for nested schema)
	// The scan policy for the cluster.
	ScanPolicy []VsphereScanPolicyInitParameters `json:"scanPolicy,omitempty" tf:"scan_policy,omitempty"`

	// (Boolean) If true, the cluster will be created asynchronously. Default value is false.
	// If `true`, the cluster will be created asynchronously. Default value is `false`.
	SkipCompletion *bool `json:"skipCompletion,omitempty" tf:"skip_completion,omitempty"`

	// (Set of String) A list of tags to be applied to the cluster. Tags must be in the form of key:value.
	// A list of tags to be applied to the cluster. Tags must be in the form of `key:value`.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VsphereLocationConfigInitParameters struct {

	// (String) The country code of the country the cluster is located in.
	// The country code of the country the cluster is located in.
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// (String) The name of the country.
	// The name of the country.
	CountryName *string `json:"countryName,omitempty" tf:"country_name,omitempty"`

	// (Number) The latitude coordinates value.
	// The latitude coordinates value.
	Latitude *float64 `json:"latitude,omitempty" tf:"latitude,omitempty"`

	// (Number) The longitude coordinates value.
	// The longitude coordinates value.
	Longitude *float64 `json:"longitude,omitempty" tf:"longitude,omitempty"`

	// (String) The region code of where the cluster is located in.
	// The region code of where the cluster is located in.
	RegionCode *string `json:"regionCode,omitempty" tf:"region_code,omitempty"`

	// (String) The name of the region.
	// The name of the region.
	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`
}

type VsphereLocationConfigObservation struct {

	// (String) The country code of the country the cluster is located in.
	// The country code of the country the cluster is located in.
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// (String) The name of the country.
	// The name of the country.
	CountryName *string `json:"countryName,omitempty" tf:"country_name,omitempty"`

	// (Number) The latitude coordinates value.
	// The latitude coordinates value.
	Latitude *float64 `json:"latitude,omitempty" tf:"latitude,omitempty"`

	// (Number) The longitude coordinates value.
	// The longitude coordinates value.
	Longitude *float64 `json:"longitude,omitempty" tf:"longitude,omitempty"`

	// (String) The region code of where the cluster is located in.
	// The region code of where the cluster is located in.
	RegionCode *string `json:"regionCode,omitempty" tf:"region_code,omitempty"`

	// (String) The name of the region.
	// The name of the region.
	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`
}

type VsphereLocationConfigParameters struct {

	// (String) The country code of the country the cluster is located in.
	// The country code of the country the cluster is located in.
	// +kubebuilder:validation:Optional
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// (String) The name of the country.
	// The name of the country.
	// +kubebuilder:validation:Optional
	CountryName *string `json:"countryName,omitempty" tf:"country_name,omitempty"`

	// (Number) The latitude coordinates value.
	// The latitude coordinates value.
	// +kubebuilder:validation:Optional
	Latitude *float64 `json:"latitude" tf:"latitude,omitempty"`

	// (Number) The longitude coordinates value.
	// The longitude coordinates value.
	// +kubebuilder:validation:Optional
	Longitude *float64 `json:"longitude" tf:"longitude,omitempty"`

	// (String) The region code of where the cluster is located in.
	// The region code of where the cluster is located in.
	// +kubebuilder:validation:Optional
	RegionCode *string `json:"regionCode,omitempty" tf:"region_code,omitempty"`

	// (String) The name of the region.
	// The name of the region.
	// +kubebuilder:validation:Optional
	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`
}

type VsphereMachinePoolInitParameters struct {

	// (Map of String)
	// +mapType=granular
	AdditionalLabels map[string]*string `json:"additionalLabels,omitempty" tf:"additional_labels,omitempty"`

	// (Boolean) Whether this machine pool is a control plane. Defaults to false.
	// Whether this machine pool is a control plane. Defaults to `false`.
	ControlPlane *bool `json:"controlPlane,omitempty" tf:"control_plane,omitempty"`

	// (Boolean) Whether this machine pool is a control plane and a worker. Defaults to false.
	// Whether this machine pool is a control plane and a worker. Defaults to `false`.
	ControlPlaneAsWorker *bool `json:"controlPlaneAsWorker,omitempty" tf:"control_plane_as_worker,omitempty"`

	// (Number) Number of nodes in the machine pool.
	// Number of nodes in the machine pool.
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	InstanceType []VsphereMachinePoolInstanceTypeInitParameters `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// (Number) Maximum number of nodes in the machine pool. This is used for autoscaling the machine pool.
	// Maximum number of nodes in the machine pool. This is used for autoscaling the machine pool.
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// (Number) Minimum number of nodes in the machine pool. This is used for autoscaling the machine pool.
	// Minimum number of nodes in the machine pool. This is used for autoscaling the machine pool.
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`

	// (String) The name of the cluster.
	// The name of the machine pool. This is used to identify the machine pool in the cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) (see below for nested schema)
	Node []VsphereMachinePoolNodeInitParameters `json:"node,omitempty" tf:"node,omitempty"`

	// (Number) Minimum number of seconds node should be Ready, before the next node is selected for repave. Default value is 0, Applicable only for worker pools.
	// Minimum number of seconds node should be Ready, before the next node is selected for repave. Default value is `0`, Applicable only for worker pools.
	NodeRepaveInterval *float64 `json:"nodeRepaveInterval,omitempty" tf:"node_repave_interval,omitempty"`

	// (Block List, Min: 1) (see below for nested schema)
	Placement []VsphereMachinePoolPlacementInitParameters `json:"placement,omitempty" tf:"placement,omitempty"`

	// (Block List) (see below for nested schema)
	Taints []VsphereMachinePoolTaintsInitParameters `json:"taints,omitempty" tf:"taints,omitempty"`

	// (String) Update strategy for the machine pool. Valid values are RollingUpdateScaleOut and RollingUpdateScaleIn.
	// Update strategy for the machine pool. Valid values are `RollingUpdateScaleOut` and `RollingUpdateScaleIn`.
	UpdateStrategy *string `json:"updateStrategy,omitempty" tf:"update_strategy,omitempty"`
}

type VsphereMachinePoolInstanceTypeInitParameters struct {

	// (Number) The number of CPUs.
	// The number of CPUs.
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// (Number) The size of the disk in GB.
	// The size of the disk in GB.
	DiskSizeGb *float64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb,omitempty"`

	// (Number) The amount of memory in MB.
	// The amount of memory in MB.
	MemoryMb *float64 `json:"memoryMb,omitempty" tf:"memory_mb,omitempty"`
}

type VsphereMachinePoolInstanceTypeObservation struct {

	// (Number) The number of CPUs.
	// The number of CPUs.
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// (Number) The size of the disk in GB.
	// The size of the disk in GB.
	DiskSizeGb *float64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb,omitempty"`

	// (Number) The amount of memory in MB.
	// The amount of memory in MB.
	MemoryMb *float64 `json:"memoryMb,omitempty" tf:"memory_mb,omitempty"`
}

type VsphereMachinePoolInstanceTypeParameters struct {

	// (Number) The number of CPUs.
	// The number of CPUs.
	// +kubebuilder:validation:Optional
	CPU *float64 `json:"cpu" tf:"cpu,omitempty"`

	// (Number) The size of the disk in GB.
	// The size of the disk in GB.
	// +kubebuilder:validation:Optional
	DiskSizeGb *float64 `json:"diskSizeGb" tf:"disk_size_gb,omitempty"`

	// (Number) The amount of memory in MB.
	// The amount of memory in MB.
	// +kubebuilder:validation:Optional
	MemoryMb *float64 `json:"memoryMb" tf:"memory_mb,omitempty"`
}

type VsphereMachinePoolNodeInitParameters struct {

	// (String) The action to perform on the node. Valid values are: cordon, uncordon.
	// The action to perform on the node. Valid values are: `cordon`, `uncordon`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// 07f899a33dee624f7
	// The node_id of the node, For example `i-07f899a33dee624f7`
	NodeID *string `json:"nodeId,omitempty" tf:"node_id,omitempty"`
}

type VsphereMachinePoolNodeObservation struct {

	// (String) The action to perform on the node. Valid values are: cordon, uncordon.
	// The action to perform on the node. Valid values are: `cordon`, `uncordon`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// 07f899a33dee624f7
	// The node_id of the node, For example `i-07f899a33dee624f7`
	NodeID *string `json:"nodeId,omitempty" tf:"node_id,omitempty"`
}

type VsphereMachinePoolNodeParameters struct {

	// (String) The action to perform on the node. Valid values are: cordon, uncordon.
	// The action to perform on the node. Valid values are: `cordon`, `uncordon`.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// 07f899a33dee624f7
	// The node_id of the node, For example `i-07f899a33dee624f7`
	// +kubebuilder:validation:Optional
	NodeID *string `json:"nodeId" tf:"node_id,omitempty"`
}

type VsphereMachinePoolObservation struct {

	// (Map of String)
	// +mapType=granular
	AdditionalLabels map[string]*string `json:"additionalLabels,omitempty" tf:"additional_labels,omitempty"`

	// (Boolean) Whether this machine pool is a control plane. Defaults to false.
	// Whether this machine pool is a control plane. Defaults to `false`.
	ControlPlane *bool `json:"controlPlane,omitempty" tf:"control_plane,omitempty"`

	// (Boolean) Whether this machine pool is a control plane and a worker. Defaults to false.
	// Whether this machine pool is a control plane and a worker. Defaults to `false`.
	ControlPlaneAsWorker *bool `json:"controlPlaneAsWorker,omitempty" tf:"control_plane_as_worker,omitempty"`

	// (Number) Number of nodes in the machine pool.
	// Number of nodes in the machine pool.
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	InstanceType []VsphereMachinePoolInstanceTypeObservation `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// (Number) Maximum number of nodes in the machine pool. This is used for autoscaling the machine pool.
	// Maximum number of nodes in the machine pool. This is used for autoscaling the machine pool.
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// (Number) Minimum number of nodes in the machine pool. This is used for autoscaling the machine pool.
	// Minimum number of nodes in the machine pool. This is used for autoscaling the machine pool.
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`

	// (String) The name of the cluster.
	// The name of the machine pool. This is used to identify the machine pool in the cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) (see below for nested schema)
	Node []VsphereMachinePoolNodeObservation `json:"node,omitempty" tf:"node,omitempty"`

	// (Number) Minimum number of seconds node should be Ready, before the next node is selected for repave. Default value is 0, Applicable only for worker pools.
	// Minimum number of seconds node should be Ready, before the next node is selected for repave. Default value is `0`, Applicable only for worker pools.
	NodeRepaveInterval *float64 `json:"nodeRepaveInterval,omitempty" tf:"node_repave_interval,omitempty"`

	// (Block List, Min: 1) (see below for nested schema)
	Placement []VsphereMachinePoolPlacementObservation `json:"placement,omitempty" tf:"placement,omitempty"`

	// (Block List) (see below for nested schema)
	Taints []VsphereMachinePoolTaintsObservation `json:"taints,omitempty" tf:"taints,omitempty"`

	// (String) Update strategy for the machine pool. Valid values are RollingUpdateScaleOut and RollingUpdateScaleIn.
	// Update strategy for the machine pool. Valid values are `RollingUpdateScaleOut` and `RollingUpdateScaleIn`.
	UpdateStrategy *string `json:"updateStrategy,omitempty" tf:"update_strategy,omitempty"`
}

type VsphereMachinePoolParameters struct {

	// (Map of String)
	// +kubebuilder:validation:Optional
	// +mapType=granular
	AdditionalLabels map[string]*string `json:"additionalLabels,omitempty" tf:"additional_labels,omitempty"`

	// (Boolean) Whether this machine pool is a control plane. Defaults to false.
	// Whether this machine pool is a control plane. Defaults to `false`.
	// +kubebuilder:validation:Optional
	ControlPlane *bool `json:"controlPlane,omitempty" tf:"control_plane,omitempty"`

	// (Boolean) Whether this machine pool is a control plane and a worker. Defaults to false.
	// Whether this machine pool is a control plane and a worker. Defaults to `false`.
	// +kubebuilder:validation:Optional
	ControlPlaneAsWorker *bool `json:"controlPlaneAsWorker,omitempty" tf:"control_plane_as_worker,omitempty"`

	// (Number) Number of nodes in the machine pool.
	// Number of nodes in the machine pool.
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count" tf:"count,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	InstanceType []VsphereMachinePoolInstanceTypeParameters `json:"instanceType" tf:"instance_type,omitempty"`

	// (Number) Maximum number of nodes in the machine pool. This is used for autoscaling the machine pool.
	// Maximum number of nodes in the machine pool. This is used for autoscaling the machine pool.
	// +kubebuilder:validation:Optional
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// (Number) Minimum number of nodes in the machine pool. This is used for autoscaling the machine pool.
	// Minimum number of nodes in the machine pool. This is used for autoscaling the machine pool.
	// +kubebuilder:validation:Optional
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`

	// (String) The name of the cluster.
	// The name of the machine pool. This is used to identify the machine pool in the cluster.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Block List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Node []VsphereMachinePoolNodeParameters `json:"node,omitempty" tf:"node,omitempty"`

	// (Number) Minimum number of seconds node should be Ready, before the next node is selected for repave. Default value is 0, Applicable only for worker pools.
	// Minimum number of seconds node should be Ready, before the next node is selected for repave. Default value is `0`, Applicable only for worker pools.
	// +kubebuilder:validation:Optional
	NodeRepaveInterval *float64 `json:"nodeRepaveInterval,omitempty" tf:"node_repave_interval,omitempty"`

	// (Block List, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Placement []VsphereMachinePoolPlacementParameters `json:"placement" tf:"placement,omitempty"`

	// (Block List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Taints []VsphereMachinePoolTaintsParameters `json:"taints,omitempty" tf:"taints,omitempty"`

	// (String) Update strategy for the machine pool. Valid values are RollingUpdateScaleOut and RollingUpdateScaleIn.
	// Update strategy for the machine pool. Valid values are `RollingUpdateScaleOut` and `RollingUpdateScaleIn`.
	// +kubebuilder:validation:Optional
	UpdateStrategy *string `json:"updateStrategy,omitempty" tf:"update_strategy,omitempty"`
}

type VsphereMachinePoolPlacementInitParameters struct {

	// (String) The name of the cluster to use for the machine pool. As it appears in the vSphere.
	// The name of the cluster to use for the machine pool. As it appears in the vSphere.
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// (String) The name of the datastore to use for the machine pool. As it appears in the vSphere.
	// The name of the datastore to use for the machine pool. As it appears in the vSphere.
	Datastore *string `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// (String) The name of the network to use for the machine pool. As it appears in the vSphere.
	// The name of the network to use for the machine pool. As it appears in the vSphere.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// (String) The name of the resource pool to use for the machine pool. As it appears in the vSphere.
	// The name of the resource pool to use for the machine pool. As it appears in the vSphere.
	ResourcePool *string `json:"resourcePool,omitempty" tf:"resource_pool,omitempty"`

	// (String) The ID of the static IP pool to use for the machine pool in case of static cluster placement.
	// The ID of the static IP pool to use for the machine pool in case of static cluster placement.
	StaticIPPoolID *string `json:"staticIpPoolId,omitempty" tf:"static_ip_pool_id,omitempty"`
}

type VsphereMachinePoolPlacementObservation struct {

	// (String) The name of the cluster to use for the machine pool. As it appears in the vSphere.
	// The name of the cluster to use for the machine pool. As it appears in the vSphere.
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// (String) The name of the datastore to use for the machine pool. As it appears in the vSphere.
	// The name of the datastore to use for the machine pool. As it appears in the vSphere.
	Datastore *string `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the network to use for the machine pool. As it appears in the vSphere.
	// The name of the network to use for the machine pool. As it appears in the vSphere.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// (String) The name of the resource pool to use for the machine pool. As it appears in the vSphere.
	// The name of the resource pool to use for the machine pool. As it appears in the vSphere.
	ResourcePool *string `json:"resourcePool,omitempty" tf:"resource_pool,omitempty"`

	// (String) The ID of the static IP pool to use for the machine pool in case of static cluster placement.
	// The ID of the static IP pool to use for the machine pool in case of static cluster placement.
	StaticIPPoolID *string `json:"staticIpPoolId,omitempty" tf:"static_ip_pool_id,omitempty"`
}

type VsphereMachinePoolPlacementParameters struct {

	// (String) The name of the cluster to use for the machine pool. As it appears in the vSphere.
	// The name of the cluster to use for the machine pool. As it appears in the vSphere.
	// +kubebuilder:validation:Optional
	Cluster *string `json:"cluster" tf:"cluster,omitempty"`

	// (String) The name of the datastore to use for the machine pool. As it appears in the vSphere.
	// The name of the datastore to use for the machine pool. As it appears in the vSphere.
	// +kubebuilder:validation:Optional
	Datastore *string `json:"datastore" tf:"datastore,omitempty"`

	// (String) The name of the network to use for the machine pool. As it appears in the vSphere.
	// The name of the network to use for the machine pool. As it appears in the vSphere.
	// +kubebuilder:validation:Optional
	Network *string `json:"network" tf:"network,omitempty"`

	// (String) The name of the resource pool to use for the machine pool. As it appears in the vSphere.
	// The name of the resource pool to use for the machine pool. As it appears in the vSphere.
	// +kubebuilder:validation:Optional
	ResourcePool *string `json:"resourcePool" tf:"resource_pool,omitempty"`

	// (String) The ID of the static IP pool to use for the machine pool in case of static cluster placement.
	// The ID of the static IP pool to use for the machine pool in case of static cluster placement.
	// +kubebuilder:validation:Optional
	StaticIPPoolID *string `json:"staticIpPoolId,omitempty" tf:"static_ip_pool_id,omitempty"`
}

type VsphereMachinePoolTaintsInitParameters struct {

	// (String) The effect of the taint. Allowed values are: NoSchedule, PreferNoSchedule or NoExecute.
	// The effect of the taint. Allowed values are: `NoSchedule`, `PreferNoSchedule` or `NoExecute`.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// (String) The key of the taint.
	// The key of the taint.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The value of the taint.
	// The value of the taint.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type VsphereMachinePoolTaintsObservation struct {

	// (String) The effect of the taint. Allowed values are: NoSchedule, PreferNoSchedule or NoExecute.
	// The effect of the taint. Allowed values are: `NoSchedule`, `PreferNoSchedule` or `NoExecute`.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// (String) The key of the taint.
	// The key of the taint.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The value of the taint.
	// The value of the taint.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type VsphereMachinePoolTaintsParameters struct {

	// (String) The effect of the taint. Allowed values are: NoSchedule, PreferNoSchedule or NoExecute.
	// The effect of the taint. Allowed values are: `NoSchedule`, `PreferNoSchedule` or `NoExecute`.
	// +kubebuilder:validation:Optional
	Effect *string `json:"effect" tf:"effect,omitempty"`

	// (String) The key of the taint.
	// The key of the taint.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) The value of the taint.
	// The value of the taint.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type VsphereNamespacesInitParameters struct {

	// (String) The name of the cluster.
	// Name of the namespace. This is the name of the Kubernetes namespace in the cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Map of String) Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, {cpu_cores: '2', memory_MiB: '2048'}
	// Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, `{cpu_cores: '2', memory_MiB: '2048', gpu_limit: '1', gpu_provider: 'nvidia'}`
	// +mapType=granular
	ResourceAllocation map[string]*string `json:"resourceAllocation,omitempty" tf:"resource_allocation,omitempty"`
}

type VsphereNamespacesObservation struct {

	// (String) The name of the cluster.
	// Name of the namespace. This is the name of the Kubernetes namespace in the cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Map of String) Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, {cpu_cores: '2', memory_MiB: '2048'}
	// Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, `{cpu_cores: '2', memory_MiB: '2048', gpu_limit: '1', gpu_provider: 'nvidia'}`
	// +mapType=granular
	ResourceAllocation map[string]*string `json:"resourceAllocation,omitempty" tf:"resource_allocation,omitempty"`
}

type VsphereNamespacesParameters struct {

	// (String) The name of the cluster.
	// Name of the namespace. This is the name of the Kubernetes namespace in the cluster.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Map of String) Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, {cpu_cores: '2', memory_MiB: '2048'}
	// Resource allocation for the namespace. This is a map containing the resource type and the resource value. For example, `{cpu_cores: '2', memory_MiB: '2048', gpu_limit: '1', gpu_provider: 'nvidia'}`
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ResourceAllocation map[string]*string `json:"resourceAllocation" tf:"resource_allocation,omitempty"`
}

type VsphereObservation struct {

	// config for the cluster. This can be used to connect to the cluster using kubectl, With admin privilege.
	// Admin Kube-config for the cluster. This can be used to connect to the cluster using `kubectl`, With admin privilege.
	AdminKubeConfig *string `json:"adminKubeConfig,omitempty" tf:"admin_kube_config,omitempty"`

	// (String) The setting to apply the cluster profile. DownloadAndInstall will download and install packs in one action. DownloadAndInstallLater will only download artifact and postpone install for later. Default value is DownloadAndInstall.
	// The setting to apply the cluster profile. `DownloadAndInstall` will download and install packs in one action. `DownloadAndInstallLater` will only download artifact and postpone install for later. Default value is `DownloadAndInstall`.
	ApplySetting *string `json:"applySetting,omitempty" tf:"apply_setting,omitempty"`

	// (Block List, Max: 1) The backup policy for the cluster. If not specified, no backups will be taken. (see below for nested schema)
	// The backup policy for the cluster. If not specified, no backups will be taken.
	BackupPolicy []VsphereBackupPolicyObservation `json:"backupPolicy,omitempty" tf:"backup_policy,omitempty"`

	// (String) ID of the cloud account to be used for the cluster. This cloud account must be of type vsphere.
	// ID of the cloud account to be used for the cluster. This cloud account must be of type `vsphere`.
	CloudAccountID *string `json:"cloudAccountId,omitempty" tf:"cloud_account_id,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	CloudConfig []VsphereCloudConfigObservation `json:"cloudConfig,omitempty" tf:"cloud_config,omitempty"`

	// (String, Deprecated) ID of the cloud config used for the cluster. This cloud config must be of type azure.
	// ID of the cloud config used for the cluster. This cloud config must be of type `azure`.
	CloudConfigID *string `json:"cloudConfigId,omitempty" tf:"cloud_config_id,omitempty"`

	// (String) cluster_meta_attribute can be used to set additional cluster metadata information, eg {'nic_name': 'test', 'env': 'stage'}
	// `cluster_meta_attribute` can be used to set additional cluster metadata information, eg `{'nic_name': 'test', 'env': 'stage'}`
	ClusterMetaAttribute *string `json:"clusterMetaAttribute,omitempty" tf:"cluster_meta_attribute,omitempty"`

	// (Block List) (see below for nested schema)
	ClusterProfile []VsphereClusterProfileObservation `json:"clusterProfile,omitempty" tf:"cluster_profile,omitempty"`

	// (Block List) The RBAC binding for the cluster. (see below for nested schema)
	// The RBAC binding for the cluster.
	ClusterRbacBinding []VsphereClusterRbacBindingObservation `json:"clusterRbacBinding,omitempty" tf:"cluster_rbac_binding,omitempty"`

	// (String) The context of the VMware cluster. Allowed values are project or tenant. Default is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
	// The context of the VMware cluster. Allowed values are `project` or `tenant`. Default is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The description of the cluster. Default value is empty string.
	// The description of the cluster. Default value is empty string.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) If set to true, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
	// If set to `true`, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// (Number) Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
	// Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
	ForceDeleteDelay *float64 `json:"forceDeleteDelay,omitempty" tf:"force_delete_delay,omitempty"`

	// (Block List) The host configuration for the cluster. (see below for nested schema)
	// The host configuration for the cluster.
	HostConfig []VsphereHostConfigObservation `json:"hostConfig,omitempty" tf:"host_config,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Kubeconfig for the cluster. This can be used to connect to the cluster using kubectl.
	// Kubeconfig for the cluster. This can be used to connect to the cluster using `kubectl`.
	Kubeconfig *string `json:"kubeconfig,omitempty" tf:"kubeconfig,omitempty"`

	// (Block List) (see below for nested schema)
	LocationConfig []VsphereLocationConfigObservation `json:"locationConfig,omitempty" tf:"location_config,omitempty"`

	// (Block Set, Min: 1) (see below for nested schema)
	MachinePool []VsphereMachinePoolObservation `json:"machinePool,omitempty" tf:"machine_pool,omitempty"`

	// (String) The name of the cluster.
	// The name of the cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) The namespaces for the cluster. (see below for nested schema)
	// The namespaces for the cluster.
	Namespaces []VsphereNamespacesObservation `json:"namespaces,omitempty" tf:"namespaces,omitempty"`

	// 01-02T15:04:05Z07:00
	// The date and time after which to patch the cluster. Prefix the time value with the respective RFC. Ex: `RFC3339: 2006-01-02T15:04:05Z07:00`
	OsPatchAfter *string `json:"osPatchAfter,omitempty" tf:"os_patch_after,omitempty"`

	// (Boolean) Whether to apply OS patch on boot. Default is false.
	// Whether to apply OS patch on boot. Default is `false`.
	OsPatchOnBoot *bool `json:"osPatchOnBoot,omitempty" tf:"os_patch_on_boot,omitempty"`

	// (String) The cron schedule for OS patching. This must be in the form of cron syntax. Ex: 0 0 * * *.
	// The cron schedule for OS patching. This must be in the form of cron syntax. Ex: `0 0 * * *`.
	OsPatchSchedule *string `json:"osPatchSchedule,omitempty" tf:"os_patch_schedule,omitempty"`

	// (String) The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is unlock, meaning upgrades occur automatically. Setting it to lock pauses automatic agent upgrades for the cluster.
	// The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is `unlock`, meaning upgrades occur automatically. Setting it to `lock` pauses automatic agent upgrades for the cluster.
	PauseAgentUpgrades *string `json:"pauseAgentUpgrades,omitempty" tf:"pause_agent_upgrades,omitempty"`

	// (String) To authorize the cluster repave, set the value to Approved for approval and "" to decline. Default value is "".
	// To authorize the cluster repave, set the value to `Approved` for approval and `""` to decline. Default value is `""`.
	ReviewRepaveState *string `json:"reviewRepaveState,omitempty" tf:"review_repave_state,omitempty"`

	// (Block List, Max: 1) The scan policy for the cluster. (see below for nested schema)
	// The scan policy for the cluster.
	ScanPolicy []VsphereScanPolicyObservation `json:"scanPolicy,omitempty" tf:"scan_policy,omitempty"`

	// (Boolean) If true, the cluster will be created asynchronously. Default value is false.
	// If `true`, the cluster will be created asynchronously. Default value is `false`.
	SkipCompletion *bool `json:"skipCompletion,omitempty" tf:"skip_completion,omitempty"`

	// (Set of String) A list of tags to be applied to the cluster. Tags must be in the form of key:value.
	// A list of tags to be applied to the cluster. Tags must be in the form of `key:value`.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VsphereParameters struct {

	// (String) The setting to apply the cluster profile. DownloadAndInstall will download and install packs in one action. DownloadAndInstallLater will only download artifact and postpone install for later. Default value is DownloadAndInstall.
	// The setting to apply the cluster profile. `DownloadAndInstall` will download and install packs in one action. `DownloadAndInstallLater` will only download artifact and postpone install for later. Default value is `DownloadAndInstall`.
	// +kubebuilder:validation:Optional
	ApplySetting *string `json:"applySetting,omitempty" tf:"apply_setting,omitempty"`

	// (Block List, Max: 1) The backup policy for the cluster. If not specified, no backups will be taken. (see below for nested schema)
	// The backup policy for the cluster. If not specified, no backups will be taken.
	// +kubebuilder:validation:Optional
	BackupPolicy []VsphereBackupPolicyParameters `json:"backupPolicy,omitempty" tf:"backup_policy,omitempty"`

	// (String) ID of the cloud account to be used for the cluster. This cloud account must be of type vsphere.
	// ID of the cloud account to be used for the cluster. This cloud account must be of type `vsphere`.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-palette/apis/cluster/cloudaccount/v1alpha1.Vsphere
	// +kubebuilder:validation:Optional
	CloudAccountID *string `json:"cloudAccountId,omitempty" tf:"cloud_account_id,omitempty"`

	// Reference to a Vsphere in cloudaccount to populate cloudAccountId.
	// +kubebuilder:validation:Optional
	CloudAccountIDRef *v1.Reference `json:"cloudAccountIdRef,omitempty" tf:"-"`

	// Selector for a Vsphere in cloudaccount to populate cloudAccountId.
	// +kubebuilder:validation:Optional
	CloudAccountIDSelector *v1.Selector `json:"cloudAccountIdSelector,omitempty" tf:"-"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	CloudConfig []VsphereCloudConfigParameters `json:"cloudConfig,omitempty" tf:"cloud_config,omitempty"`

	// (String) cluster_meta_attribute can be used to set additional cluster metadata information, eg {'nic_name': 'test', 'env': 'stage'}
	// `cluster_meta_attribute` can be used to set additional cluster metadata information, eg `{'nic_name': 'test', 'env': 'stage'}`
	// +kubebuilder:validation:Optional
	ClusterMetaAttribute *string `json:"clusterMetaAttribute,omitempty" tf:"cluster_meta_attribute,omitempty"`

	// (Block List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	ClusterProfile []VsphereClusterProfileParameters `json:"clusterProfile,omitempty" tf:"cluster_profile,omitempty"`

	// (Block List) The RBAC binding for the cluster. (see below for nested schema)
	// The RBAC binding for the cluster.
	// +kubebuilder:validation:Optional
	ClusterRbacBinding []VsphereClusterRbacBindingParameters `json:"clusterRbacBinding,omitempty" tf:"cluster_rbac_binding,omitempty"`

	// (String) The context of the VMware cluster. Allowed values are project or tenant. Default is project. If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
	// The context of the VMware cluster. Allowed values are `project` or `tenant`. Default is `project`. If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	// +kubebuilder:validation:Optional
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The description of the cluster. Default value is empty string.
	// The description of the cluster. Default value is empty string.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) If set to true, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
	// If set to `true`, the cluster will be force deleted and user has to manually clean up the provisioned cloud resources.
	// +kubebuilder:validation:Optional
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// (Number) Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
	// Delay duration in minutes to before invoking cluster force delete. Default and minimum is 20.
	// +kubebuilder:validation:Optional
	ForceDeleteDelay *float64 `json:"forceDeleteDelay,omitempty" tf:"force_delete_delay,omitempty"`

	// (Block List) The host configuration for the cluster. (see below for nested schema)
	// The host configuration for the cluster.
	// +kubebuilder:validation:Optional
	HostConfig []VsphereHostConfigParameters `json:"hostConfig,omitempty" tf:"host_config,omitempty"`

	// (Block List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	LocationConfig []VsphereLocationConfigParameters `json:"locationConfig,omitempty" tf:"location_config,omitempty"`

	// (Block Set, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	MachinePool []VsphereMachinePoolParameters `json:"machinePool,omitempty" tf:"machine_pool,omitempty"`

	// (String) The name of the cluster.
	// The name of the cluster.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) The namespaces for the cluster. (see below for nested schema)
	// The namespaces for the cluster.
	// +kubebuilder:validation:Optional
	Namespaces []VsphereNamespacesParameters `json:"namespaces,omitempty" tf:"namespaces,omitempty"`

	// 01-02T15:04:05Z07:00
	// The date and time after which to patch the cluster. Prefix the time value with the respective RFC. Ex: `RFC3339: 2006-01-02T15:04:05Z07:00`
	// +kubebuilder:validation:Optional
	OsPatchAfter *string `json:"osPatchAfter,omitempty" tf:"os_patch_after,omitempty"`

	// (Boolean) Whether to apply OS patch on boot. Default is false.
	// Whether to apply OS patch on boot. Default is `false`.
	// +kubebuilder:validation:Optional
	OsPatchOnBoot *bool `json:"osPatchOnBoot,omitempty" tf:"os_patch_on_boot,omitempty"`

	// (String) The cron schedule for OS patching. This must be in the form of cron syntax. Ex: 0 0 * * *.
	// The cron schedule for OS patching. This must be in the form of cron syntax. Ex: `0 0 * * *`.
	// +kubebuilder:validation:Optional
	OsPatchSchedule *string `json:"osPatchSchedule,omitempty" tf:"os_patch_schedule,omitempty"`

	// (String) The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is unlock, meaning upgrades occur automatically. Setting it to lock pauses automatic agent upgrades for the cluster.
	// The pause agent upgrades setting allows to control the automatic upgrade of the Palette component and agent for an individual cluster. The default value is `unlock`, meaning upgrades occur automatically. Setting it to `lock` pauses automatic agent upgrades for the cluster.
	// +kubebuilder:validation:Optional
	PauseAgentUpgrades *string `json:"pauseAgentUpgrades,omitempty" tf:"pause_agent_upgrades,omitempty"`

	// (String) To authorize the cluster repave, set the value to Approved for approval and "" to decline. Default value is "".
	// To authorize the cluster repave, set the value to `Approved` for approval and `""` to decline. Default value is `""`.
	// +kubebuilder:validation:Optional
	ReviewRepaveState *string `json:"reviewRepaveState,omitempty" tf:"review_repave_state,omitempty"`

	// (Block List, Max: 1) The scan policy for the cluster. (see below for nested schema)
	// The scan policy for the cluster.
	// +kubebuilder:validation:Optional
	ScanPolicy []VsphereScanPolicyParameters `json:"scanPolicy,omitempty" tf:"scan_policy,omitempty"`

	// (Boolean) If true, the cluster will be created asynchronously. Default value is false.
	// If `true`, the cluster will be created asynchronously. Default value is `false`.
	// +kubebuilder:validation:Optional
	SkipCompletion *bool `json:"skipCompletion,omitempty" tf:"skip_completion,omitempty"`

	// (Set of String) A list of tags to be applied to the cluster. Tags must be in the form of key:value.
	// A list of tags to be applied to the cluster. Tags must be in the form of `key:value`.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VsphereScanPolicyInitParameters struct {

	// (String) The schedule for configuration scan.
	// The schedule for configuration scan.
	ConfigurationScanSchedule *string `json:"configurationScanSchedule,omitempty" tf:"configuration_scan_schedule,omitempty"`

	// (String) The schedule for conformance scan.
	// The schedule for conformance scan.
	ConformanceScanSchedule *string `json:"conformanceScanSchedule,omitempty" tf:"conformance_scan_schedule,omitempty"`

	// (String) The schedule for penetration scan.
	// The schedule for penetration scan.
	PenetrationScanSchedule *string `json:"penetrationScanSchedule,omitempty" tf:"penetration_scan_schedule,omitempty"`
}

type VsphereScanPolicyObservation struct {

	// (String) The schedule for configuration scan.
	// The schedule for configuration scan.
	ConfigurationScanSchedule *string `json:"configurationScanSchedule,omitempty" tf:"configuration_scan_schedule,omitempty"`

	// (String) The schedule for conformance scan.
	// The schedule for conformance scan.
	ConformanceScanSchedule *string `json:"conformanceScanSchedule,omitempty" tf:"conformance_scan_schedule,omitempty"`

	// (String) The schedule for penetration scan.
	// The schedule for penetration scan.
	PenetrationScanSchedule *string `json:"penetrationScanSchedule,omitempty" tf:"penetration_scan_schedule,omitempty"`
}

type VsphereScanPolicyParameters struct {

	// (String) The schedule for configuration scan.
	// The schedule for configuration scan.
	// +kubebuilder:validation:Optional
	ConfigurationScanSchedule *string `json:"configurationScanSchedule" tf:"configuration_scan_schedule,omitempty"`

	// (String) The schedule for conformance scan.
	// The schedule for conformance scan.
	// +kubebuilder:validation:Optional
	ConformanceScanSchedule *string `json:"conformanceScanSchedule" tf:"conformance_scan_schedule,omitempty"`

	// (String) The schedule for penetration scan.
	// The schedule for penetration scan.
	// +kubebuilder:validation:Optional
	PenetrationScanSchedule *string `json:"penetrationScanSchedule" tf:"penetration_scan_schedule,omitempty"`
}

// VsphereSpec defines the desired state of Vsphere
type VsphereSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VsphereParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VsphereInitParameters `json:"initProvider,omitempty"`
}

// VsphereStatus defines the observed state of Vsphere.
type VsphereStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VsphereObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Vsphere is the Schema for the Vspheres API. A resource to manage a vSphere cluster in Palette.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,palette}
type Vsphere struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cloudConfig) || (has(self.initProvider) && has(self.initProvider.cloudConfig))",message="spec.forProvider.cloudConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.machinePool) || (has(self.initProvider) && has(self.initProvider.machinePool))",message="spec.forProvider.machinePool is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   VsphereSpec   `json:"spec"`
	Status VsphereStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VsphereList contains a list of Vspheres
type VsphereList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Vsphere `json:"items"`
}

// Repository type metadata.
var (
	Vsphere_Kind             = "Vsphere"
	Vsphere_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Vsphere_Kind}.String()
	Vsphere_KindAPIVersion   = Vsphere_Kind + "." + CRDGroupVersion.String()
	Vsphere_GroupVersionKind = CRDGroupVersion.WithKind(Vsphere_Kind)
)

func init() {
	SchemeBuilder.Register(&Vsphere{}, &VsphereList{})
}
